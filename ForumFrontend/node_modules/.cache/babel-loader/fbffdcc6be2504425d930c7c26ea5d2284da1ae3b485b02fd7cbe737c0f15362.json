{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.index-of.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.splice.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@vueuse/core');\nvar globalNodes = [];\nvar target = !core.isClient ? void 0 : document.body;\nfunction createGlobalNode(id) {\n  var el = document.createElement(\"div\");\n  if (id !== void 0) {\n    el.setAttribute(\"id\", id);\n  }\n  if (target) {\n    target.appendChild(el);\n    globalNodes.push(el);\n  }\n  return el;\n}\nfunction removeGlobalNode(el) {\n  globalNodes.splice(globalNodes.indexOf(el), 1);\n  el.remove();\n}\nfunction changeGlobalNodesTarget(el) {\n  if (el === target) return;\n  target = el;\n  globalNodes.forEach(function (el2) {\n    if (target && !el2.contains(target)) {\n      target.appendChild(el2);\n    }\n  });\n}\nexports.changeGlobalNodesTarget = changeGlobalNodesTarget;\nexports.createGlobalNode = createGlobalNode;\nexports.removeGlobalNode = removeGlobalNode;","map":{"version":3,"names":["globalNodes","target","core","isClient","document","body","createGlobalNode","id","el","createElement","setAttribute","appendChild","push","removeGlobalNode","splice","indexOf","remove","changeGlobalNodesTarget","forEach","el2","contains"],"sources":["../../../../../packages/utils/vue/global-node.ts"],"sourcesContent":["import { isClient } from '../browser'\n\nconst globalNodes: HTMLElement[] = []\nlet target: HTMLElement | undefined = !isClient ? undefined : document.body\n\nexport function createGlobalNode(id?: string) {\n  const el = document.createElement('div')\n  if (id !== undefined) {\n    el.setAttribute('id', id)\n  }\n\n  if (target) {\n    target.appendChild(el)\n    globalNodes.push(el)\n  }\n\n  return el\n}\n\nexport function removeGlobalNode(el: HTMLElement) {\n  globalNodes.splice(globalNodes.indexOf(el), 1)\n  el.remove()\n}\n\nexport function changeGlobalNodesTarget(el: HTMLElement) {\n  if (el === target) return\n\n  target = el\n  globalNodes.forEach((el) => {\n    if (target && !el.contains(target)) {\n      target.appendChild(el)\n    }\n  })\n}\n"],"mappings":";;;;;;;;;;;;AACA,IAAMA,WAAW,GAAG,EAAE;AACtB,IAAIC,MAAM,GAAG,CAACC,IAAA,CAAAC,QAAQ,GAAG,KAAK,CAAC,GAAGC,QAAQ,CAACC,IAAI;AACxC,SAASC,gBAAgBA,CAACC,EAAE,EAAE;EACnC,IAAMC,EAAE,GAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC;EACxC,IAAIF,EAAE,KAAK,KAAK,CAAC,EAAE;IACjBC,EAAE,CAACE,YAAY,CAAC,IAAI,EAAEH,EAAE,CAAC;EAC7B;EACE,IAAIN,MAAM,EAAE;IACVA,MAAM,CAACU,WAAW,CAACH,EAAE,CAAC;IACtBR,WAAW,CAACY,IAAI,CAACJ,EAAE,CAAC;EACxB;EACE,OAAOA,EAAE;AACX;AACO,SAASK,gBAAgBA,CAACL,EAAE,EAAE;EACnCR,WAAW,CAACc,MAAM,CAACd,WAAW,CAACe,OAAO,CAACP,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9CA,EAAE,CAACQ,MAAM,EAAE;AACb;AACO,SAASC,uBAAuBA,CAACT,EAAE,EAAE;EAC1C,IAAIA,EAAE,KAAKP,MAAM,EACf;EACFA,MAAM,GAAGO,EAAE;EACXR,WAAW,CAACkB,OAAO,CAAC,UAACC,GAAG,EAAK;IAC3B,IAAIlB,MAAM,IAAI,CAACkB,GAAG,CAACC,QAAQ,CAACnB,MAAM,CAAC,EAAE;MACnCA,MAAM,CAACU,WAAW,CAACQ,GAAG,CAAC;IAC7B;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}