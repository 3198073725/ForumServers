{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.number.constructor.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar badgeProps = runtime.buildProps({\n  value: {\n    type: [String, Number],\n    \"default\": \"\"\n  },\n  max: {\n    type: Number,\n    \"default\": 99\n  },\n  isDot: Boolean,\n  hidden: Boolean,\n  type: {\n    type: String,\n    values: [\"primary\", \"success\", \"warning\", \"info\", \"danger\"],\n    \"default\": \"danger\"\n  },\n  showZero: {\n    type: Boolean,\n    \"default\": true\n  },\n  color: String,\n  badgeStyle: {\n    type: runtime.definePropType([String, Object, Array])\n  },\n  offset: {\n    type: runtime.definePropType(Array),\n    \"default\": [0, 0]\n  },\n  badgeClass: {\n    type: String\n  }\n});\nexports.badgeProps = badgeProps;","map":{"version":3,"names":["badgeProps","runtime","buildProps","value","type","String","Number","max","isDot","Boolean","hidden","values","showZero","color","badgeStyle","definePropType","Object","Array","offset","badgeClass"],"sources":["../../../../../../packages/components/badge/src/badge.ts"],"sourcesContent":["import { buildProps, definePropType } from '@element-plus/utils'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport const badgeProps = buildProps({\n  /**\n   * @description display value.\n   */\n  value: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description maximum value, shows `{max}+` when exceeded. Only works if value is a number.\n   */\n  max: {\n    type: Number,\n    default: 99,\n  },\n  /**\n   * @description if a little dot is displayed.\n   */\n  isDot: Boolean,\n  /**\n   * @description hidden badge.\n   */\n  hidden: Boolean,\n  /**\n   * @description badge type.\n   */\n  type: {\n    type: String,\n    values: ['primary', 'success', 'warning', 'info', 'danger'],\n    default: 'danger',\n  },\n  /**\n   * @description whether to show badge when value is zero.\n   */\n  showZero: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description customize dot background color\n   */\n  color: String,\n  /**\n   * @description CSS style of badge\n   */\n  badgeStyle: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n  },\n  /**\n   * @description set offset of the badge\n   */\n  offset: {\n    type: definePropType<[number, number]>(Array),\n    default: [0, 0],\n  },\n  /**\n   * @description custom class name of badge\n   */\n  badgeClass: {\n    type: String,\n  },\n} as const)\nexport type BadgeProps = ExtractPropTypes<typeof badgeProps>\n"],"mappings":";;;;;;;;AACY,IAACA,UAAU,GAAGC,OAAA,CAAAC,UAAU,CAAC;EACnCC,KAAK,EAAE;IACLC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;IACtB,WAAS;EACb,CAAG;EACDC,GAAG,EAAE;IACHH,IAAI,EAAEE,MAAM;IACZ,WAAS;EACb,CAAG;EACDE,KAAK,EAAEC,OAAO;EACdC,MAAM,EAAED,OAAO;EACfL,IAAI,EAAE;IACJA,IAAI,EAAEC,MAAM;IACZM,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;IAC3D,WAAS;EACb,CAAG;EACDC,QAAQ,EAAE;IACRR,IAAI,EAAEK,OAAO;IACb,WAAS;EACb,CAAG;EACDI,KAAK,EAAER,MAAM;EACbS,UAAU,EAAE;IACVV,IAAI,EAAEH,OAAA,CAAAc,cAAc,CAAC,CAACV,MAAM,EAAEW,MAAM,EAAEC,KAAK,CAAC;EAChD,CAAG;EACDC,MAAM,EAAE;IACNd,IAAI,EAAEH,OAAA,CAAAc,cAAc,CAACE,KAAK,CAAC;IAC3B,WAAS,CAAC,CAAC,EAAE,CAAC;EAClB,CAAG;EACDE,UAAU,EAAE;IACVf,IAAI,EAAEC;EACV;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}