{"ast":null,"code":"import _toConsumableArray from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, withCtx as _withCtx, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, renderList as _renderList } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"post-detail-container\"\n};\nvar _hoisted_2 = {\n  key: 0,\n  \"class\": \"loading-container\"\n};\nvar _hoisted_3 = {\n  key: 1\n};\nvar _hoisted_4 = {\n  \"class\": \"post-header\"\n};\nvar _hoisted_5 = {\n  key: 0,\n  \"class\": \"post-title\"\n};\nvar _hoisted_6 = {\n  \"class\": \"post-title-edit\"\n};\nvar _hoisted_7 = {\n  \"class\": \"post-meta\"\n};\nvar _hoisted_8 = {\n  \"class\": \"author-info\"\n};\nvar _hoisted_9 = {\n  \"class\": \"author-name\"\n};\nvar _hoisted_10 = {\n  \"class\": \"post-time\"\n};\nvar _hoisted_11 = [\"innerHTML\"];\nvar _hoisted_12 = {\n  \"class\": \"post-content-edit\"\n};\nvar _hoisted_13 = {\n  \"class\": \"edit-actions\"\n};\nvar _hoisted_14 = {\n  \"class\": \"post-footer\"\n};\nvar _hoisted_15 = {\n  \"class\": \"post-stats\"\n};\nvar _hoisted_16 = {\n  \"class\": \"post-actions\"\n};\nvar _hoisted_17 = {\n  slot: \"header\",\n  \"class\": \"clearfix\"\n};\nvar _hoisted_18 = {\n  \"class\": \"comment-form\"\n};\nvar _hoisted_19 = {\n  \"class\": \"comment-form-footer\"\n};\nvar _hoisted_20 = {\n  key: 0,\n  \"class\": \"login-tip\"\n};\nvar _hoisted_21 = {\n  key: 0,\n  \"class\": \"loading-container\"\n};\nvar _hoisted_22 = {\n  key: 1,\n  \"class\": \"empty-comments\"\n};\nvar _hoisted_23 = {\n  key: 0\n};\nvar _hoisted_24 = {\n  key: 1\n};\nvar _hoisted_25 = {\n  key: 2,\n  \"class\": \"comments-list\"\n};\nvar _hoisted_26 = {\n  \"class\": \"comment-header\"\n};\nvar _hoisted_27 = [\"onClick\"];\nvar _hoisted_28 = {\n  \"class\": \"comment-user-info\"\n};\nvar _hoisted_29 = {\n  \"class\": \"comment-username\"\n};\nvar _hoisted_30 = {\n  \"class\": \"comment-time\"\n};\nvar _hoisted_31 = {\n  key: 0,\n  \"class\": \"comment-actions\"\n};\nvar _hoisted_32 = {\n  \"class\": \"comment-content\"\n};\nvar _hoisted_33 = {\n  \"class\": \"comment-footer\"\n};\nvar _hoisted_34 = {\n  key: 0,\n  \"class\": \"reply-form\"\n};\nvar _hoisted_35 = {\n  \"class\": \"reply-form-footer\"\n};\nvar _hoisted_36 = {\n  key: 1,\n  \"class\": \"replies-list\"\n};\nvar _hoisted_37 = {\n  \"class\": \"reply-header\"\n};\nvar _hoisted_38 = [\"onClick\"];\nvar _hoisted_39 = {\n  \"class\": \"reply-user-info\"\n};\nvar _hoisted_40 = {\n  \"class\": \"reply-username\"\n};\nvar _hoisted_41 = {\n  \"class\": \"reply-time\"\n};\nvar _hoisted_42 = {\n  key: 0,\n  \"class\": \"reply-actions\"\n};\nvar _hoisted_43 = {\n  \"class\": \"reply-content\"\n};\nvar _hoisted_44 = {\n  \"class\": \"reply-footer\"\n};\nvar _hoisted_45 = {\n  key: 3,\n  \"class\": \"pagination-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_skeleton = _resolveComponent(\"el-skeleton\");\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_avatar = _resolveComponent(\"el-avatar\");\n  var _component_Grid = _resolveComponent(\"Grid\");\n  var _component_el_icon = _resolveComponent(\"el-icon\");\n  var _component_rich_text_editor = _resolveComponent(\"rich-text-editor\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_View = _resolveComponent(\"View\");\n  var _component_Star = _resolveComponent(\"Star\");\n  var _component_ChatDotRound = _resolveComponent(\"ChatDotRound\");\n  var _component_Edit = _resolveComponent(\"Edit\");\n  var _component_Delete = _resolveComponent(\"Delete\");\n  var _component_Collection = _resolveComponent(\"Collection\");\n  var _component_Setting = _resolveComponent(\"Setting\");\n  var _component_el_dropdown_item = _resolveComponent(\"el-dropdown-item\");\n  var _component_el_dropdown_menu = _resolveComponent(\"el-dropdown-menu\");\n  var _component_el_dropdown = _resolveComponent(\"el-dropdown\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_router_link = _resolveComponent(\"router-link\");\n  var _component_el_pagination = _resolveComponent(\"el-pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 帖子详情卡片 \"), _createVNode(_component_el_card, {\n    \"class\": \"post-detail-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      var _$data$post$user2, _$data$post$user5, _$data$post$user6, _$data$post$board;\n      return [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_el_skeleton, {\n        rows: 10,\n        animated: \"\"\n      })])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 非编辑状态下的标题 \"), !$data.isEditing ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_5, [$data.post.is_pinned ? (_openBlock(), _createBlock(_component_el_tag, {\n        key: 0,\n        size: \"medium\",\n        type: \"danger\"\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[8] || (_cache[8] = [_createTextVNode(\"置顶\")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [8]\n      })) : _createCommentVNode(\"v-if\", true), $data.post.is_featured ? (_openBlock(), _createBlock(_component_el_tag, {\n        key: 1,\n        size: \"medium\",\n        type: \"success\"\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[9] || (_cache[9] = [_createTextVNode(\"精华\")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [9]\n      })) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" \" + _toDisplayString($data.post.title), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(_Fragment, {\n        key: 1\n      }, [_createCommentVNode(\" 编辑状态下的标题输入框 \"), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_input, {\n        modelValue: $data.editPostForm.title,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.editPostForm.title = $event;\n        }),\n        placeholder: \"请输入帖子标题\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", {\n        \"class\": \"post-author\",\n        onClick: _cache[1] || (_cache[1] = function ($event) {\n          var _$data$post$user;\n          return $options.goToUserProfile((_$data$post$user = $data.post.user) === null || _$data$post$user === void 0 ? void 0 : _$data$post$user.id);\n        }),\n        style: {\n          \"cursor\": \"pointer\"\n        }\n      }, [_createVNode(_component_el_avatar, {\n        size: 40,\n        src: ((_$data$post$user2 = $data.post.user) === null || _$data$post$user2 === void 0 ? void 0 : _$data$post$user2.avatar_url) || ''\n      }, {\n        \"default\": _withCtx(function () {\n          var _$data$post$user3, _$data$post$user4;\n          return [_createTextVNode(_toDisplayString(((_$data$post$user3 = $data.post.user) === null || _$data$post$user3 === void 0 || (_$data$post$user3 = _$data$post$user3.nickname) === null || _$data$post$user3 === void 0 ? void 0 : _$data$post$user3.charAt(0)) || ((_$data$post$user4 = $data.post.user) === null || _$data$post$user4 === void 0 || (_$data$post$user4 = _$data$post$user4.username) === null || _$data$post$user4 === void 0 ? void 0 : _$data$post$user4.charAt(0)) || 'U'), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(((_$data$post$user5 = $data.post.user) === null || _$data$post$user5 === void 0 ? void 0 : _$data$post$user5.nickname) || ((_$data$post$user6 = $data.post.user) === null || _$data$post$user6 === void 0 ? void 0 : _$data$post$user6.username)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, \"发布于 \" + _toDisplayString($options.formatDate($data.post.created_at)), 1 /* TEXT */)])]), _createElementVNode(\"div\", {\n        \"class\": \"post-board\",\n        onClick: _cache[2] || (_cache[2] = function () {\n          return $options.goToBoard && $options.goToBoard.apply($options, arguments);\n        })\n      }, [_createVNode(_component_el_icon, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_Grid)];\n        }),\n        _: 1 /* STABLE */\n      }), _createElementVNode(\"span\", null, _toDisplayString((_$data$post$board = $data.post.board) === null || _$data$post$board === void 0 ? void 0 : _$data$post$board.name), 1 /* TEXT */)])])]), _createCommentVNode(\" 非编辑状态下的内容 \"), !$data.isEditing ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        \"class\": \"post-content\",\n        innerHTML: $data.post.content\n      }, null, 8 /* PROPS */, _hoisted_11)) : (_openBlock(), _createElementBlock(_Fragment, {\n        key: 1\n      }, [_createCommentVNode(\" 编辑状态下的内容输入框 \"), _createElementVNode(\"div\", _hoisted_12, [_createVNode(_component_el_input, {\n        modelValue: $data.editPostForm.title,\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = function ($event) {\n          return $data.editPostForm.title = $event;\n        }),\n        placeholder: \"请输入帖子标题\"\n      }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_rich_text_editor, {\n        modelValue: $data.editPostForm.content,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n          return $data.editPostForm.content = $event;\n        }),\n        disabled: false,\n        onChange: $options.handleContentChange\n      }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createCommentVNode(\" 编辑状态下的操作按钮 \"), _createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_el_button, {\n        onClick: $options.cancelEdit\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[10] || (_cache[10] = [_createTextVNode(\"取消\")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [10]\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.submitEdit,\n        loading: $data.editPostSubmitting\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[11] || (_cache[11] = [_createTextVNode(\"提交\")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [11]\n      }, 8 /* PROPS */, [\"onClick\", \"loading\"])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"span\", null, [_createVNode(_component_el_icon, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_View)];\n        }),\n        _: 1 /* STABLE */\n      }), _createTextVNode(\" \" + _toDisplayString($data.post.views), 1 /* TEXT */)]), _createElementVNode(\"span\", null, [_createVNode(_component_el_icon, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_Star)];\n        }),\n        _: 1 /* STABLE */\n      }), _createTextVNode(\" \" + _toDisplayString($data.post.likes_count), 1 /* TEXT */)]), _createElementVNode(\"span\", null, [_createVNode(_component_el_icon, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_ChatDotRound)];\n        }),\n        _: 1 /* STABLE */\n      }), _createTextVNode(\" \" + _toDisplayString($data.post.comments_count), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_16, [_createCommentVNode(\" 帖子作者可见的操作按钮 \"), $options.isPostAuthor ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 0\n      }, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        size: \"small\",\n        onClick: $options.handleEditPost\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_icon, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_Edit)];\n            }),\n            _: 1 /* STABLE */\n          }), _cache[12] || (_cache[12] = _createTextVNode(\" 编辑 \"))];\n        }),\n        _: 1 /* STABLE */,\n        __: [12]\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n        type: \"danger\",\n        size: \"small\",\n        onClick: $options.handleDeletePost\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_icon, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_Delete)];\n            }),\n            _: 1 /* STABLE */\n          }), _cache[13] || (_cache[13] = _createTextVNode(\" 删除 \"))];\n        }),\n        _: 1 /* STABLE */,\n        __: [13]\n      }, 8 /* PROPS */, [\"onClick\"])], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n        key: 1\n      }, [_createCommentVNode(\" 非作者可见的操作按钮 \"), _createVNode(_component_el_button, {\n        type: $data.isLiked ? 'primary' : 'default',\n        size: \"small\",\n        onClick: $options.handleLike\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_icon, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_Star)];\n            }),\n            _: 1 /* STABLE */\n          }), _createTextVNode(\" \" + _toDisplayString($data.isLiked ? '已点赞' : '点赞'), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"type\", \"onClick\"]), _createVNode(_component_el_button, {\n        type: $data.isFavorited ? 'warning' : 'default',\n        size: \"small\",\n        onClick: $options.handleFavorite\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_icon, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_Collection)];\n            }),\n            _: 1 /* STABLE */\n          }), _createTextVNode(\" \" + _toDisplayString($data.isFavorited ? '已收藏' : '收藏'), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"type\", \"onClick\"])], 64 /* STABLE_FRAGMENT */)), _createCommentVNode(\" 管理员操作下拉菜单 \"), _ctx.isAdmin ? (_openBlock(), _createBlock(_component_el_dropdown, {\n        key: 2,\n        trigger: \"click\",\n        onCommand: $options.handleCommand\n      }, {\n        dropdown: _withCtx(function () {\n          return [_createVNode(_component_el_dropdown_menu, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_dropdown_item, {\n                command: \"pin\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($data.post.is_pinned ? '取消置顶' : '置顶'), 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_el_dropdown_item, {\n                command: \"feature\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($data.post.is_featured ? '取消加精' : '加精'), 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              })];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_button, {\n            size: \"small\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_icon, null, {\n                \"default\": _withCtx(function () {\n                  return [_createVNode(_component_Setting)];\n                }),\n                _: 1 /* STABLE */\n              }), _cache[14] || (_cache[14] = _createTextVNode(\" 管理 \"))];\n            }),\n            _: 1 /* STABLE */,\n            __: [14]\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onCommand\"])) : _createCommentVNode(\"v-if\", true)])])]))];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 评论区 \"), _createVNode(_component_el_card, {\n    \"class\": \"comments-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"span\", null, \"评论区 (\" + _toDisplayString($data.post.comments_count || 0) + \")\", 1 /* TEXT */)]), _createCommentVNode(\" 发表评论 \"), _createElementVNode(\"div\", _hoisted_18, [_createVNode(_component_el_input, {\n        modelValue: $data.commentContent,\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n          return $data.commentContent = $event;\n        }),\n        type: \"textarea\",\n        rows: 3,\n        placeholder: \"发表你的评论...\",\n        disabled: !$options.isLogin\n      }, null, 8 /* PROPS */, [\"modelValue\", \"disabled\"]), _createElementVNode(\"div\", _hoisted_19, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        disabled: !$options.isLogin || !$data.commentContent.trim(),\n        onClick: $options.submitComment\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[15] || (_cache[15] = [_createTextVNode(\" 发表评论 \")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [15]\n      }, 8 /* PROPS */, [\"disabled\", \"onClick\"]), !$options.isLogin ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_cache[17] || (_cache[17] = _createTextVNode(\" 请先 \")), _createVNode(_component_router_link, {\n        to: {\n          name: 'Login',\n          query: {\n            redirect: _ctx.$route.fullPath\n          }\n        }\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[16] || (_cache[16] = [_createTextVNode(\"登录\")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [16]\n      }, 8 /* PROPS */, [\"to\"]), _cache[18] || (_cache[18] = _createTextVNode(\" 后发表评论 \"))])) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" 评论列表 \"), $data.commentsLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createVNode(_component_el_skeleton, {\n        rows: 5,\n        animated: \"\"\n      })])) : $data.comments.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createVNode(_component_el_icon, {\n        size: 48\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_ChatDotRound)];\n        }),\n        _: 1 /* STABLE */\n      }), $options.isLogin ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, \"暂无评论，快来发表第一条评论吧！\")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_24, \"暂无评论，登录后可以发表评论\"))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, function (comment) {\n        var _comment$user2;\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: comment.id,\n          \"class\": \"comment-item\"\n        }, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", {\n          \"class\": \"comment-user\",\n          onClick: function onClick($event) {\n            var _comment$user;\n            return $options.goToUserProfile((_comment$user = comment.user) === null || _comment$user === void 0 ? void 0 : _comment$user.id);\n          },\n          style: {\n            \"cursor\": \"pointer\"\n          }\n        }, [_createVNode(_component_el_avatar, {\n          size: 40,\n          src: ((_comment$user2 = comment.user) === null || _comment$user2 === void 0 ? void 0 : _comment$user2.avatar_url) || ''\n        }, {\n          \"default\": _withCtx(function () {\n            var _comment$user3, _comment$user4;\n            return [_createTextVNode(_toDisplayString(((_comment$user3 = comment.user) === null || _comment$user3 === void 0 || (_comment$user3 = _comment$user3.nickname) === null || _comment$user3 === void 0 ? void 0 : _comment$user3.charAt(0)) || ((_comment$user4 = comment.user) === null || _comment$user4 === void 0 || (_comment$user4 = _comment$user4.username) === null || _comment$user4 === void 0 ? void 0 : _comment$user4.charAt(0)) || 'U'), 1 /* TEXT */)];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, _toDisplayString(comment.user.nickname || comment.user.username), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_30, _toDisplayString($options.formatDate(comment.created_at)), 1 /* TEXT */)])], 8 /* PROPS */, _hoisted_27), $options.canManageComment(comment) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_31, [_createVNode(_component_el_button, {\n          text: \"\",\n          size: \"small\",\n          onClick: function onClick($event) {\n            return $options.handleDeleteComment(comment);\n          }\n        }, {\n          \"default\": _withCtx(function () {\n            return _toConsumableArray(_cache[19] || (_cache[19] = [_createTextVNode(\"删除\")]));\n          }),\n          _: 2 /* DYNAMIC */,\n          __: [19]\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_32, _toDisplayString(comment.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_33, [$options.isLogin ? (_openBlock(), _createBlock(_component_el_button, {\n          key: 0,\n          text: \"\",\n          size: \"small\",\n          onClick: function onClick($event) {\n            return $options.handleReply(comment);\n          }\n        }, {\n          \"default\": _withCtx(function () {\n            return _toConsumableArray(_cache[20] || (_cache[20] = [_createTextVNode(\"回复\")]));\n          }),\n          _: 2 /* DYNAMIC */,\n          __: [20]\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 回复表单 \"), $data.replyingTo === comment.id ? (_openBlock(), _createElementBlock(\"div\", _hoisted_34, [_createVNode(_component_el_input, {\n          modelValue: $data.replyContent,\n          \"onUpdate:modelValue\": _cache[6] || (_cache[6] = function ($event) {\n            return $data.replyContent = $event;\n          }),\n          type: \"textarea\",\n          rows: 2,\n          placeholder: \"回复评论...\"\n        }, null, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_35, [_createVNode(_component_el_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: function onClick($event) {\n            return $options.submitReply(comment);\n          },\n          disabled: !$data.replyContent.trim()\n        }, {\n          \"default\": _withCtx(function () {\n            return _toConsumableArray(_cache[21] || (_cache[21] = [_createTextVNode(\"提交回复\")]));\n          }),\n          _: 2 /* DYNAMIC */,\n          __: [21]\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\", \"disabled\"]), _createVNode(_component_el_button, {\n          size: \"small\",\n          onClick: $options.cancelReply\n        }, {\n          \"default\": _withCtx(function () {\n            return _toConsumableArray(_cache[22] || (_cache[22] = [_createTextVNode(\"取消\")]));\n          }),\n          _: 1 /* STABLE */,\n          __: [22]\n        }, 8 /* PROPS */, [\"onClick\"])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 回复列表 \"), comment.replies && comment.replies.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(comment.replies, function (reply) {\n          var _reply$user2;\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: reply.id,\n            \"class\": \"reply-item\"\n          }, [_createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", {\n            \"class\": \"reply-user\",\n            onClick: function onClick($event) {\n              var _reply$user;\n              return $options.goToUserProfile((_reply$user = reply.user) === null || _reply$user === void 0 ? void 0 : _reply$user.id);\n            },\n            style: {\n              \"cursor\": \"pointer\"\n            }\n          }, [_createVNode(_component_el_avatar, {\n            size: 30,\n            src: ((_reply$user2 = reply.user) === null || _reply$user2 === void 0 ? void 0 : _reply$user2.avatar_url) || ''\n          }, {\n            \"default\": _withCtx(function () {\n              var _reply$user3, _reply$user4;\n              return [_createTextVNode(_toDisplayString(((_reply$user3 = reply.user) === null || _reply$user3 === void 0 || (_reply$user3 = _reply$user3.nickname) === null || _reply$user3 === void 0 ? void 0 : _reply$user3.charAt(0)) || ((_reply$user4 = reply.user) === null || _reply$user4 === void 0 || (_reply$user4 = _reply$user4.username) === null || _reply$user4 === void 0 ? void 0 : _reply$user4.charAt(0)) || 'U'), 1 /* TEXT */)];\n            }),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, _toDisplayString(reply.user.nickname || reply.user.username), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_41, _toDisplayString($options.formatDate(reply.created_at)), 1 /* TEXT */)])], 8 /* PROPS */, _hoisted_38), $options.canManageComment(reply) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_42, [_createVNode(_component_el_button, {\n            text: \"\",\n            size: \"small\",\n            onClick: function onClick($event) {\n              return $options.handleDeleteComment(reply);\n            }\n          }, {\n            \"default\": _withCtx(function () {\n              return _toConsumableArray(_cache[23] || (_cache[23] = [_createTextVNode(\"删除\")]));\n            }),\n            _: 2 /* DYNAMIC */,\n            __: [23]\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_43, _toDisplayString(reply.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_44, [$options.isLogin ? (_openBlock(), _createBlock(_component_el_button, {\n            key: 0,\n            text: \"\",\n            size: \"small\",\n            onClick: function onClick($event) {\n              return $options.handleReply(comment, reply);\n            }\n          }, {\n            \"default\": _withCtx(function () {\n              return _toConsumableArray(_cache[24] || (_cache[24] = [_createTextVNode(\"回复\")]));\n            }),\n            _: 2 /* DYNAMIC */,\n            __: [24]\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)])]);\n        }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n      }), 128 /* KEYED_FRAGMENT */))])), $data.comments.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_45, [_createVNode(_component_el_pagination, {\n        background: \"\",\n        layout: \"prev, pager, next\",\n        total: $data.commentsTotal,\n        \"page-size\": $data.commentsQuery.limit,\n        \"current-page\": $data.commentsQuery.page,\n        \"onUpdate:currentPage\": _cache[7] || (_cache[7] = function (val) {\n          return $data.commentsQuery.page = val;\n        }),\n        onCurrentChange: $options.handleCommentsPageChange\n      }, null, 8 /* PROPS */, [\"total\", \"page-size\", \"current-page\", \"onCurrentChange\"])])) : _createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["key","slot","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_el_card","_withCtx","_$data$post$user2","_$data$post$user5","_$data$post$user6","_$data$post$board","$data","loading","_hoisted_2","_component_el_skeleton","rows","animated","_hoisted_3","_createElementVNode","_hoisted_4","isEditing","_hoisted_5","post","is_pinned","_createBlock","_component_el_tag","size","type","_cache","_createTextVNode","_","__","is_featured","_toDisplayString","title","_Fragment","_hoisted_6","_component_el_input","modelValue","editPostForm","$event","placeholder","_hoisted_7","onClick","_$data$post$user","$options","goToUserProfile","user","id","style","_component_el_avatar","src","avatar_url","_$data$post$user3","_$data$post$user4","nickname","charAt","username","_hoisted_8","_hoisted_9","_hoisted_10","formatDate","created_at","goToBoard","apply","arguments","_component_el_icon","_component_Grid","board","name","innerHTML","content","_hoisted_11","_hoisted_12","_component_rich_text_editor","disabled","onChange","handleContentChange","_hoisted_13","_component_el_button","cancelEdit","submitEdit","editPostSubmitting","_hoisted_14","_hoisted_15","_component_View","views","_component_Star","likes_count","_component_ChatDotRound","comments_count","_hoisted_16","isPostAuthor","handleEditPost","_component_Edit","handleDeletePost","_component_Delete","isLiked","handleLike","isFavorited","handleFavorite","_component_Collection","_ctx","isAdmin","_component_el_dropdown","trigger","onCommand","handleCommand","dropdown","_component_el_dropdown_menu","_component_el_dropdown_item","command","_component_Setting","_hoisted_17","_hoisted_18","commentContent","isLogin","_hoisted_19","trim","submitComment","_hoisted_20","_component_router_link","to","query","redirect","$route","fullPath","commentsLoading","_hoisted_21","comments","length","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_renderList","comment","_comment$user2","_hoisted_26","_comment$user","_comment$user3","_comment$user4","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_27","canManageComment","_hoisted_31","text","handleDeleteComment","_toConsumableArray","_hoisted_32","_hoisted_33","handleReply","replyingTo","_hoisted_34","replyContent","_hoisted_35","submitReply","cancelReply","replies","_hoisted_36","reply","_reply$user2","_hoisted_37","_reply$user","_reply$user3","_reply$user4","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_38","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_component_el_pagination","background","layout","total","commentsTotal","commentsQuery","limit","page","val","onCurrentChange","handleCommentsPageChange"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <!-- 非编辑状态下的标题 -->\n          <h1 v-if=\"!isEditing\" class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <!-- 编辑状态下的标题输入框 -->\n          <div v-else class=\"post-title-edit\">\n            <el-input v-model=\"editPostForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n          </div>\n\n          <div class=\"post-meta\">\n            <div class=\"post-author\" @click=\"goToUserProfile(post.user?.id)\" style=\"cursor: pointer;\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <el-icon><Grid /></el-icon>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 非编辑状态下的内容 -->\n        <div v-if=\"!isEditing\" class=\"post-content\" v-html=\"post.content\"></div>\n\n        <!-- 编辑状态下的内容输入框 -->\n        <div v-else class=\"post-content-edit\">\n          <el-input\n            v-model=\"editPostForm.title\"\n            placeholder=\"请输入帖子标题\"\n          ></el-input>\n          <rich-text-editor\n            v-model=\"editPostForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n          <!-- 编辑状态下的操作按钮 -->\n          <div class=\"edit-actions\">\n            <el-button @click=\"cancelEdit\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitEdit\" :loading=\"editPostSubmitting\">提交</el-button>\n          </div>\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span>\n              <el-icon><View /></el-icon>\n              {{ post.views }}\n            </span>\n            <span>\n              <el-icon><Star /></el-icon>\n              {{ post.likes_count }}\n            </span>\n            <span>\n              <el-icon><ChatDotRound /></el-icon>\n              {{ post.comments_count }}\n            </span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                @click=\"handleEditPost\"\n              >\n                <el-icon><Edit /></el-icon>\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                @click=\"handleDeletePost\"\n              >\n                <el-icon><Delete /></el-icon>\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                @click=\"handleLike\"\n              >\n                <el-icon><Star /></el-icon>\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                @click=\"handleFavorite\"\n              >\n                <el-icon><Collection /></el-icon>\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\">\n                <el-icon><Setting /></el-icon>\n                管理\n              </el-button>\n              <template #dropdown>\n                <el-dropdown-menu>\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n              </template>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <el-icon :size=\"48\"><ChatDotRound /></el-icon>\n        <p v-if=\"isLogin\">暂无评论，快来发表第一条评论吧！</p>\n        <p v-else>暂无评论，登录后可以发表评论</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\n          <div class=\"comment-header\">\n            <div class=\"comment-user\" @click=\"goToUserProfile(comment.user?.id)\" style=\"cursor: pointer;\">\n              <el-avatar :size=\"40\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"comment-user-info\">\n                <div class=\"comment-username\">{{ comment.user.nickname || comment.user.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\" v-if=\"canManageComment(comment)\">\n              <el-button text size=\"small\" @click=\"handleDeleteComment(comment)\">删除</el-button>\n            </div>\n          </div>\n          <div class=\"comment-content\">{{ comment.content }}</div>\n          <div class=\"comment-footer\">\n            <el-button v-if=\"isLogin\" text size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button type=\"primary\" size=\"small\" @click=\"submitReply(comment)\" :disabled=\"!replyContent.trim()\">提交回复</el-button>\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div v-for=\"reply in comment.replies\" :key=\"reply.id\" class=\"reply-item\">\n              <div class=\"reply-header\">\n                <div class=\"reply-user\" @click=\"goToUserProfile(reply.user?.id)\" style=\"cursor: pointer;\">\n                  <el-avatar :size=\"30\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"reply-user-info\">\n                    <div class=\"reply-username\">{{ reply.user.nickname || reply.user.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\" v-if=\"canManageComment(reply)\">\n                  <el-button text size=\"small\" @click=\"handleDeleteComment(reply)\">删除</el-button>\n                </div>\n              </div>\n              <div class=\"reply-content\">{{ reply.content }}</div>\n              <div class=\"reply-footer\">\n                <el-button v-if=\"isLogin\" text size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          :current-page=\"commentsQuery.page\"\n          @update:current-page=\"val => commentsQuery.page = val\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost, getLikeStatus, getFavoriteStatus } from '@/api/post'\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n\n      forceRefresh: false, // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false, // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '标题长度在2到100个字符之间', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 5, message: '内容至少5个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.$store.getters.isLoggedIn\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    log('PostDetail组件created，登录状态:', this.isLogin, '认证状态:', this.$store.getters.isLoggedIn)\n    const postId = this.$route.params.id\n    if (postId) {\n      log('准备获取帖子详情和评论，ID:', postId)\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      log('没有帖子ID，跳转到帖子列表')\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        log('组件开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        log('组件收到帖子详情响应:', response)\n\n        // 检查响应是否有效\n        if (!response) {\n          log('帖子详情响应为空')\n          this.post = {}\n          return\n        }\n\n        // 检查响应中的数据\n        if (response.data) {\n          log('使用响应中的data字段:', response.data)\n          this.post = response.data\n        } else if (response.code === 0 || response.status === 0) {\n          log('响应成功但没有data字段，尝试使用响应本身')\n          // 移除code、status、msg等字段，只保留实际数据\n          const { code, status, msg, ...postData } = response\n          if (Object.keys(postData).length > 0) {\n            this.post = postData\n          } else {\n            log('响应中没有有效的帖子数据')\n            this.$message.error('获取帖子详情失败，请稍后再试')\n            this.post = {}\n          }\n        } else if (typeof response === 'object') {\n          log('直接使用响应对象')\n          this.post = response\n        } else {\n          log('无法从响应中提取帖子数据')\n          this.$message.error('获取帖子详情失败，请稍后再试')\n          this.post = {}\n        }\n        \n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n        \n        // 检查是否已点赞和收藏\n        this.checkLikeAndFavorite()\n      } catch (error) {\n        log('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败，请稍后再试')\n        this.post = {}\n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 确保帖子对象包含所有必要的字段\n    ensurePostFields() {\n      // 确保post是一个对象\n      if (!this.post || typeof this.post !== 'object') {\n        this.post = {}\n      }\n      \n      // 确保必要的字段存在\n      this.post.title = this.post.title || '帖子标题'\n      this.post.content = this.post.content || '帖子内容'\n      this.post.created_at = this.post.created_at || new Date().toISOString()\n      this.post.views = this.post.views || 0\n      this.post.likes_count = this.post.likes_count || 0\n      this.post.comments_count = this.post.comments_count || 0\n      this.post.is_pinned = this.post.is_pinned || false\n      this.post.is_featured = this.post.is_featured || false\n      \n      // 确保board字段存在\n      if (!this.post.board || typeof this.post.board !== 'object') {\n        this.post.board = { id: 1, name: '默认板块' }\n      } else if (typeof this.post.board === 'number') {\n        // 如果board只是一个ID，转换为对象\n        this.post.board = { id: this.post.board, name: '板块' + this.post.board }\n      }\n      \n      // 确保board.name字段存在\n      if (!this.post.board.name) {\n        this.post.board.name = '板块' + this.post.board.id\n      }\n      \n      // 确保user字段存在\n      if (!this.post.user || typeof this.post.user !== 'object') {\n        this.post.user = {\n          id: 1,\n          username: 'user',\n          nickname: '用户',\n          avatar_url: ''\n        }\n      }\n      \n      // 确保user.nickname字段存在\n      if (!this.post.user.nickname) {\n        this.post.user.nickname = this.post.user.username || '用户'\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    async checkLikeAndFavorite() {\n      if (!this.isLogin) {\n        log('未登录用户，设置为未点赞和未收藏状态')\n        this.isLiked = false\n        this.isFavorited = false\n        return\n      }\n\n      try {\n        // 并行请求点赞和收藏状态\n        const [likeResponse, favoriteResponse] = await Promise.all([\n          getLikeStatus(this.post.id),\n          getFavoriteStatus(this.post.id)\n        ]);\n\n        // 更新点赞状态\n        this.isLiked = likeResponse.data?.is_liked || false;\n        // 更新收藏状态\n        this.isFavorited = favoriteResponse.data?.is_favorited || false;\n\n        log('获取状态成功:', {\n          isLiked: this.isLiked,\n          isFavorited: this.isFavorited\n        });\n      } catch (error) {\n        log('获取点赞/收藏状态失败:', error);\n        // 状态获取失败时，默认为未点赞和未收藏\n        this.isLiked = false;\n        this.isFavorited = false;\n      }\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n      log('开始获取评论列表，ID:', postId, '强制刷新:', this.forceRefresh)\n\n      try {\n        // 使用API函数的forceRefresh参数\n        const response = await getPostComments(postId, this.forceRefresh)\n        log('评论列表响应:', response)\n        \n        // 处理响应\n        this.processCommentsResponse(response)\n      } catch (error) {\n        log('获取评论列表失败:', error)\n        // 设置空评论列表\n        this.comments = []\n        this.commentsTotal = 0\n        \n        // 未登录用户不显示错误提示\n        if (!(error.response && error.response.status === 401)) {\n          this.$message.error('获取评论列表失败，请刷新页面重试')\n        }\n      } finally {\n        this.commentsLoading = false\n        this.forceRefresh = false // 重置强制刷新标志\n        log('评论列表获取完成，重置强制刷新标志')\n      }\n    },\n    \n    // 处理评论列表响应\n    processCommentsResponse(response) {\n      // 如果响应为空，设置空评论列表\n      if (!response) {\n        log('评论列表响应为空，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 提取评论数据和总数\n      let comments = []\n      let total = 0\n      \n      if (response.data && response.data.results) {\n        // 标准格式：{data: {results: [...], count: 10}}\n        comments = response.data.results\n        total = response.data.count || 0\n      } else if (response.results) {\n        // 直接结果格式：{results: [...], count: 10}\n        comments = response.results\n        total = response.count || 0\n      } else if (Array.isArray(response)) {\n        // 数组格式：[...]\n        comments = response\n        total = response.length\n      } else if (response.data && Array.isArray(response.data)) {\n        // 数组包装格式：{data: [...]}\n        comments = response.data\n        total = response.data.length\n      } else {\n        // 其他情况，设置空评论列表\n        log('无法从响应中提取评论数据，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 确保评论数据有效\n      comments = comments.filter(comment => comment && typeof comment === 'object')\n      \n      // 处理评论数据\n      this.comments = comments.map(comment => {\n        // 确保replies字段存在\n        const replies = Array.isArray(comment.replies) ? comment.replies : []\n        \n        // 确保user字段存在\n        const user = comment.user || {\n          id: 0,\n          username: 'unknown',\n          nickname: '未知用户',\n          avatar_url: ''\n        }\n        \n        // 返回处理后的评论对象\n        return {\n          ...comment,\n          replies,\n          user\n        }\n      })\n      \n      this.commentsTotal = total\n      \n      // 更新帖子评论数\n      if (this.post) {\n        this.post.comments_count = total\n      }\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board && this.post.board.id) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 跳转到用户主页\n    goToUserProfile(userId) {\n      if (userId) {\n        this.$router.push({ name: 'UserProfile', params: { id: userId } });\n      } else {\n        this.$message.warning('无法获取用户信息');\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        console.log('收藏操作开始，当前状态:', this.isFavorited, '帖子ID:', this.post.id);\n        \n        // 先乐观更新UI状态\n        const previousState = this.isFavorited\n          this.isFavorited = !this.isFavorited\n        \n        console.log('调用favoritePost API...');\n        const response = await favoritePost(this.post.id)\n        console.log('favoritePost API响应:', response);\n        \n        // 根据API响应更新状态，而不是依赖本地状态\n        if (response && response.data && response.data.is_favorited !== undefined) {\n          this.isFavorited = response.data.is_favorited;\n          console.log('根据API响应更新收藏状态为:', this.isFavorited);\n        }\n        \n          // 使用 Notification 替代 Message\n          this.$notify({\n            title: this.isFavorited ? '收藏成功' : '已取消收藏',\n            message: this.isFavorited ? '帖子已添加到您的收藏列表' : '帖子已从您的收藏列表中移除',\n            type: this.isFavorited ? 'success' : 'info',\n            position: 'top-right',\n            duration: 2000,\n            showClose: false,\n            customClass: this.isFavorited ? 'favorite-notification success' : 'favorite-notification info'\n          })\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        // 恢复之前的状态\n        this.isFavorited = !this.isFavorited\n        \n        this.$notify.error({\n          title: '收藏操作失败',\n          message: error.message || '请稍后重试',\n          position: 'top-right',\n          duration: 3000\n        })\n        \n        // 如果是未登录错误，跳转到登录页\n        if (error.response && error.response.status === 401) {\n          this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        }\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        // 更新点赞状态\n        this.isLiked = !this.isLiked\n        // 更新点赞数\n        this.post.likes_count = this.isLiked ? this.post.likes_count + 1 : this.post.likes_count - 1\n        // 使用 Notification 替代 Message\n        this.$notify({\n          title: this.isLiked ? '点赞成功' : '已取消点赞',\n          message: this.isLiked ? '感谢您的支持！' : '您已取消点赞',\n          type: this.isLiked ? 'success' : 'info',\n          position: 'top-right',\n          duration: 2000,\n          showClose: false,\n          customClass: this.isLiked ? 'like-notification success' : 'like-notification info'\n        })\n      } catch (error) {\n        log('点赞操作失败:', error)\n        this.$notify.error({\n          title: '操作失败',\n          message: error.message || '请稍后重试',\n          position: 'top-right',\n          duration: 3000\n        })\n        // 如果是未登录错误，跳转到登录页\n        if (error.response && error.response.status === 401) {\n          this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        }\n        // 操作失败时恢复原状态\n        await this.checkLikeAndFavorite()\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    }, \n    // 编辑帖子\n    handleEditPost() {\n      log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n      \n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n      \n      // 切换到编辑状态\n      this.isEditing = true;\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false\n      // 重置表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n    },\n\n    // 提交编辑\n    async submitEdit() {\n      // 表单验证\n      if (!this.editPostForm.title.trim()) {\n        this.$message.warning('标题不能为空')\n        return\n      }\n\n      if (!this.editPostForm.content.trim()) {\n        this.$message.warning('内容不能为空')\n        return\n      }\n\n      this.editPostSubmitting = true\n      try {\n        // 确保发送正确的数据格式\n        const postData = {\n          title: this.editPostForm.title.trim(),\n          content: this.editPostForm.content.trim(),\n          board: this.post.board.id // 需要包含板块ID\n        }\n\n        log('提交更新帖子数据:', postData)\n\n        const response = await updatePost(this.post.id, postData)\n\n        // 更新当前页面的帖子数据\n        this.post.title = this.editPostForm.title\n        this.post.content = this.editPostForm.content\n        // 更新帖子的更新时间\n        if (response.data && response.data.updated_at) {\n          this.post.updated_at = response.data.updated_at\n        }\n\n        // 退出编辑状态\n        this.isEditing = false\n\n        // 显示成功提示\n        this.$notify({\n          title: '更新成功',\n          message: '帖子内容已更新',\n          type: 'success',\n          position: 'top-right',\n          duration: 2000\n        })\n      } catch (error) {\n        console.error('更新帖子失败:', error)\n        this.$notify.error({\n          title: '更新失败',\n          message: error.message || '请稍后重试',\n          position: 'top-right',\n          duration: 3000\n        })\n      } finally {\n        this.editPostSubmitting = false\n      }\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回上一级路由\n            log('帖子删除成功，正在返回上一级路由...')\n            // 返回上一级路由\n            this.$router.go(-1)\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          log('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          log('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        log('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        log('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      log('评论提交 - 登录状态检查:', {\n        isLogin: this.isLogin,\n        storeIsLoggedIn: this.$store.getters.isLoggedIn,\n        token: this.$store.state.token,\n        userInfo: this.$store.state.user,\n        localStorageToken: localStorage.getItem('token'),\n        localStorageUserInfo: localStorage.getItem('userInfo')\n      })\n\n      // 如果localStorage有token但store中认证状态为false，尝试强制刷新认证状态\n      if (!this.isLogin && localStorage.getItem('token')) {\n        log('检测到localStorage有token但store认证状态为false，尝试强制刷新认证状态');\n        await this.$store.dispatch('getUserInfo');\n        // 重新检查登录状态\n        log('刷新后的登录状态:', {\n          isLogin: this.$store.getters.isLoggedIn,\n          token: this.$store.state.token,\n          userInfo: this.$store.state.user\n        });\n      }\n      \n      if (!this.isLogin) {\n        log('未登录状态，无法提交评论')\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent,\n          token: this.$store.state.token\n        })\n\n        // 确保API请求中包含有效的token\n        const token = this.$store.state.token || localStorage.getItem('token');\n        if (!token) {\n          log('提交评论时没有有效的token');\n          this.$message.error('登录状态异常，请重新登录');\n          this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } });\n          return;\n        }\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到评论数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            log('获取到新评论数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              replies: [],\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新评论添加到评论列表的开头（如果不在列表中）\n            const existingComment = this.comments.find(c => c.id === newComment.id)\n            if (!existingComment) {\n              this.comments.unshift(newComment);\n              log('新评论已添加到列表')\n            }\n          }\n        } else {\n          log('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        log('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到回复数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            log('获取到新回复数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新回复添加到对应评论的回复列表（如果不在列表中）\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            \n            const existingReply = comment.replies.find(r => r.id === newReply.id)\n            if (!existingReply) {\n              comment.replies.push(newReply);\n              log('新回复已添加到列表')\n            }\n          }\n        } else {\n          log('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        log('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 打印评论对象，用于调试\n        log('要删除的评论对象:', comment)\n\n        // 确保评论对象和ID存在\n        if (!comment) {\n          this.$message.error('评论数据无效，无法删除')\n          return\n        }\n\n        // 获取评论ID，支持字符串和数字类型\n        const commentId = comment.id ? parseInt(comment.id) : null\n        if (!commentId) {\n          this.$message.error('评论ID无效，无法删除')\n          return\n        }\n\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          log('发送删除评论请求，ID:', commentId)\n          const response = await deleteComment(commentId)\n          loading.close() // 关闭加载状态\n\n          // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n          if (response.code === 0 || response.status === 0) {\n            log('评论删除成功，响应:', response)\n            \n            // 无论如何，强制刷新评论列表以确保同步\n            log('强制刷新评论列表以确保与数据库同步')\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          } else {\n            log('评论删除失败，响应:', response)\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n            \n            // 如果删除失败，也刷新评论列表恢复原状\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          }\n        } catch (error) {\n          loading.close()\n          log('删除评论失败:', error)\n          \n          // 如果删除失败，刷新评论列表恢复原状\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n          \n          // 根据错误类型显示不同的错误信息\n          if (error.response) {\n            switch (error.response.status) {\n              case 403:\n                this.$message.error('您没有权限删除此评论')\n                break\n              case 404:\n                this.$message.error('评论不存在或已被删除')\n                break\n              default:\n                this.$message.error(error.response.data?.msg || '删除失败，请稍后重试')\n            }\n          } else if (error.request) {\n            this.$message.error('网络连接失败，请检查网络后重试')\n          } else {\n            this.$message.error('删除失败，请稍后重试')\n          }\n        }\n      } catch (error) {\n        // 用户取消删除操作\n        if (error === 'cancel') {\n          return\n        }\n        log('删除评论操作失败:', error)\n        this.$message.error('操作失败，请稍后重试')\n      }\n    },\n\n    handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  margin-top: 20px;\n  line-height: 1.6;\n  word-break: break-word;\n}\n\n.post-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  margin: 10px 0;\n}\n\n.post-content :deep(p) {\n  margin: 10px 0;\n}\n\n.post-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 10px 0;\n}\n\n.post-content :deep(th),\n.post-content :deep(td) {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\n.post-content :deep(th) {\n  background-color: #f5f5f5;\n}\n\n.post-content :deep(blockquote) {\n  margin: 10px 0;\n  padding: 10px 20px;\n  border-left: 4px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.post-content :deep(pre) {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n}\n\n.post-content :deep(code) {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  margin-top: 10px;\n  color: #909399;\n  font-size: 14px;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.login-tip a:hover {\n  text-decoration: underline;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n/* 编辑相关样式 */\n.post-title-edit {\n  margin-bottom: 15px;\n}\n\n.post-content-edit {\n  margin-bottom: 20px;\n}\n\n.edit-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 15px;\n  gap: 10px;\n}\n</style>\n\n<style>\n/* 收藏消息提示样式 */\n.favorite-message {\n  min-width: 120px;\n  padding: 10px 20px;\n  border-radius: 4px;\n}\n\n.favorite-message.el-message--success {\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.favorite-message.el-message--warning {\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.favorite-message .el-message__icon {\n  font-size: 16px;\n  margin-right: 8px;\n}\n\n.favorite-message .el-message__content {\n  font-size: 14px;\n  color: #606266;\n}\n\n/* 图标样式调整 */\n.post-stats .el-icon {\n  margin-right: 5px;\n  vertical-align: middle;\n}\n\n.post-meta .el-icon {\n  margin-right: 5px;\n  vertical-align: middle;\n}\n\n.post-actions .el-button .el-icon {\n  margin-right: 5px;\n  vertical-align: middle;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}