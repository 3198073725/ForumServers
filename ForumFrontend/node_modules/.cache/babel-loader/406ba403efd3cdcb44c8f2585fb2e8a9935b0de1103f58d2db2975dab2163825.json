{"ast":null,"code":"import _classCallCheck from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport store from '@/store';\n\n/**\r\n * WebSocket连接管理类\r\n */\nvar WebSocketManager = /*#__PURE__*/function () {\n  function WebSocketManager() {\n    _classCallCheck(this, WebSocketManager);\n    this.notificationSocket = null;\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\n    this.baseWsUrl = this._getWebSocketBaseUrl();\n  }\n\n  /**\r\n   * 获取WebSocket基础URL\r\n   */\n  return _createClass(WebSocketManager, [{\n    key: \"_getWebSocketBaseUrl\",\n    value: function _getWebSocketBaseUrl() {\n      var protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      var host = process.env.VUE_APP_WS_HOST || window.location.host;\n      return \"\".concat(protocol, \"//\").concat(host);\n    }\n\n    /**\r\n     * 获取用户Token\r\n     */\n  }, {\n    key: \"_getToken\",\n    value: function _getToken() {\n      return store.state.token;\n    }\n\n    /**\r\n     * 初始化通知WebSocket\r\n     */\n  }, {\n    key: \"initNotificationSocket\",\n    value: function initNotificationSocket() {\n      var _this = this;\n      var token = this._getToken();\n      if (!token) {\n        console.error('未登录，无法初始化通知WebSocket');\n        return;\n      }\n\n      // 关闭已存在的连接\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n      }\n\n      // 创建新连接\n      var wsUrl = \"\".concat(this.baseWsUrl, \"/ws/notifications/?token=\").concat(token);\n      this.notificationSocket = new ReconnectingWebSocket(wsUrl);\n\n      // 连接建立时的回调\n      this.notificationSocket.onopen = function () {\n        console.log('通知WebSocket连接已建立');\n      };\n\n      // 接收消息的回调\n      this.notificationSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          _this._handleNotificationMessage(data);\n        } catch (error) {\n          console.error('解析通知WebSocket消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的回调\n      this.notificationSocket.onclose = function (event) {\n        console.log('通知WebSocket连接已关闭:', event.code, event.reason);\n      };\n\n      // 连接错误时的回调\n      this.notificationSocket.onerror = function (error) {\n        console.error('通知WebSocket连接错误:', error);\n      };\n    }\n\n    /**\r\n     * 处理通知WebSocket消息\r\n     */\n  }, {\n    key: \"_handleNotificationMessage\",\n    value: function _handleNotificationMessage(data) {\n      var messageType = data.type;\n      if (messageType === 'connection_established') {\n        console.log(data.message);\n      } else if (messageType === 'unread_count') {\n        // 更新未读通知数量\n        store.commit('setUnreadNotificationCount', data.count);\n      } else if (messageType === 'notification_message') {\n        // 接收到新通知\n        if (data.message) {\n          // 添加新通知到Vuex\n          store.commit('addNotification', data.message);\n          // 更新未读通知数量\n          store.commit('incrementUnreadNotificationCount');\n          // 显示通知提示\n          this._showNotification(data.message);\n        }\n      } else if (messageType === 'mark_read_response') {\n        // 标记通知已读的响应\n        if (data.success) {\n          store.commit('markNotificationRead', data.id);\n        }\n      } else if (messageType === 'mark_all_read_response') {\n        // 标记所有通知已读的响应\n        if (data.success) {\n          store.commit('markAllNotificationsRead');\n        }\n      }\n    }\n\n    /**\r\n     * 显示通知提示\r\n     */\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(notification) {\n      // 如果浏览器支持桌面通知且用户已授权\n      if (Notification && Notification.permission === 'granted') {\n        var title = '新通知';\n        var options = {\n          body: notification.content,\n          icon: '/favicon.ico'\n        };\n        new Notification(title, options);\n      }\n    }\n\n    /**\r\n     * 标记通知为已读\r\n     */\n  }, {\n    key: \"markNotificationRead\",\n    value: function markNotificationRead(notificationId) {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_read',\n          id: notificationId\n        }));\n      }\n    }\n\n    /**\r\n     * 标记所有通知为已读\r\n     */\n  }, {\n    key: \"markAllNotificationsRead\",\n    value: function markAllNotificationsRead() {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_all_read'\n        }));\n      }\n    }\n\n    /**\r\n     * 初始化聊天WebSocket\r\n     */\n  }, {\n    key: \"initChatSocket\",\n    value: function initChatSocket(userId) {\n      var _this2 = this;\n      var token = this._getToken();\n      if (!token) {\n        console.error('未登录，无法初始化聊天WebSocket');\n        return;\n      }\n\n      // 如果已存在与该用户的连接，先关闭\n      if (this.chatSockets[userId]) {\n        this.chatSockets[userId].close();\n      }\n\n      // 创建新连接\n      var wsUrl = \"\".concat(this.baseWsUrl, \"/ws/chat/\").concat(userId, \"/?token=\").concat(token);\n      this.chatSockets[userId] = new ReconnectingWebSocket(wsUrl);\n\n      // 连接建立时的回调\n      this.chatSockets[userId].onopen = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB\"));\n      };\n\n      // 接收消息的回调\n      this.chatSockets[userId].onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          _this2._handleChatMessage(data, userId);\n        } catch (error) {\n          console.error('解析聊天WebSocket消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的回调\n      this.chatSockets[userId].onclose = function (event) {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED:\"), event.code, event.reason);\n        // 从聊天连接列表中移除\n        delete _this2.chatSockets[userId];\n      };\n\n      // 连接错误时的回调\n      this.chatSockets[userId].onerror = function (error) {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u9519\\u8BEF:\"), error);\n      };\n      return this.chatSockets[userId];\n    }\n\n    /**\r\n     * 处理聊天WebSocket消息\r\n     */\n  }, {\n    key: \"_handleChatMessage\",\n    value: function _handleChatMessage(data, userId) {\n      var messageType = data.type;\n      if (messageType === 'connection_established') {\n        console.log(data.message);\n      } else if (messageType === 'chat_message') {\n        // 接收到新聊天消息\n        store.commit('addChatMessage', {\n          userId: userId,\n          message: {\n            id: data.id,\n            senderId: data.sender_id,\n            receiverId: data.receiver_id,\n            content: data.content,\n            timestamp: data.timestamp,\n            isRead: data.is_read,\n            isOutgoing: data.sender_id === store.state.user.id\n          }\n        });\n\n        // 如果是收到的消息且不是当前正在查看的对话，增加未读计数\n        if (data.sender_id === parseInt(userId) && store.state.currentChatUserId !== parseInt(userId)) {\n          store.commit('incrementUnreadMessageCount', userId);\n        }\n\n        // 显示消息通知\n        if (data.sender_id === parseInt(userId)) {\n          this._showChatNotification(data);\n        }\n      } else if (messageType === 'history_messages') {\n        // 接收到历史消息\n        store.commit('setChatHistory', {\n          userId: userId,\n          messages: data.messages.map(function (msg) {\n            return {\n              id: msg.id,\n              senderId: msg.sender_id,\n              receiverId: msg.receiver_id,\n              content: msg.content,\n              timestamp: msg.timestamp,\n              isRead: msg.is_read,\n              isOutgoing: msg.sender_id === store.state.user.id\n            };\n          }),\n          hasMore: data.has_more,\n          page: data.page\n        });\n      }\n    }\n\n    /**\r\n     * 显示聊天消息通知\r\n     */\n  }, {\n    key: \"_showChatNotification\",\n    value: function _showChatNotification(message) {\n      // 如果浏览器支持桌面通知且用户已授权\n      if (Notification && Notification.permission === 'granted') {\n        // 获取发送者信息\n        var sender = store.getters.getUserById(message.sender_id);\n        var senderName = sender ? sender.nickname || sender.username : \"\\u7528\\u6237\".concat(message.sender_id);\n        var title = \"\\u6765\\u81EA \".concat(senderName, \" \\u7684\\u65B0\\u6D88\\u606F\");\n        var options = {\n          body: message.content,\n          icon: sender && sender.avatar_url ? sender.avatar_url : '/favicon.ico'\n        };\n        new Notification(title, options);\n      }\n    }\n\n    /**\r\n     * 发送聊天消息\r\n     */\n  }, {\n    key: \"sendChatMessage\",\n    value: function sendChatMessage(userId, content) {\n      var _this3 = this;\n      // 如果没有与该用户的连接，先初始化\n      if (!this.chatSockets[userId] || this.chatSockets[userId].readyState !== WebSocket.OPEN) {\n        this.initChatSocket(userId);\n\n        // 等待连接建立后再发送消息\n        setTimeout(function () {\n          _this3._sendChatMessageImpl(userId, content);\n        }, 500);\n      } else {\n        this._sendChatMessageImpl(userId, content);\n      }\n    }\n\n    /**\r\n     * 实际发送聊天消息的实现\r\n     */\n  }, {\n    key: \"_sendChatMessageImpl\",\n    value: function _sendChatMessageImpl(userId, content) {\n      if (this.chatSockets[userId] && this.chatSockets[userId].readyState === WebSocket.OPEN) {\n        this.chatSockets[userId].send(JSON.stringify({\n          type: 'chat_message',\n          content: content\n        }));\n      } else {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684WebSocket\\u8FDE\\u63A5\\u672A\\u5C31\\u7EEA\\uFF0C\\u65E0\\u6CD5\\u53D1\\u9001\\u6D88\\u606F\"));\n      }\n    }\n\n    /**\r\n     * 加载历史聊天记录\r\n     */\n  }, {\n    key: \"loadChatHistory\",\n    value: function loadChatHistory(userId) {\n      var _this4 = this;\n      var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n      // 如果没有与该用户的连接，先初始化\n      if (!this.chatSockets[userId] || this.chatSockets[userId].readyState !== WebSocket.OPEN) {\n        this.initChatSocket(userId);\n\n        // 等待连接建立后再请求历史记录\n        setTimeout(function () {\n          _this4._loadChatHistoryImpl(userId, page, pageSize);\n        }, 500);\n      } else {\n        this._loadChatHistoryImpl(userId, page, pageSize);\n      }\n    }\n\n    /**\r\n     * 实际加载历史聊天记录的实现\r\n     */\n  }, {\n    key: \"_loadChatHistoryImpl\",\n    value: function _loadChatHistoryImpl(userId, page, pageSize) {\n      if (this.chatSockets[userId] && this.chatSockets[userId].readyState === WebSocket.OPEN) {\n        this.chatSockets[userId].send(JSON.stringify({\n          type: 'load_history',\n          page: page,\n          page_size: pageSize\n        }));\n      } else {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684WebSocket\\u8FDE\\u63A5\\u672A\\u5C31\\u7EEA\\uFF0C\\u65E0\\u6CD5\\u52A0\\u8F7D\\u5386\\u53F2\\u8BB0\\u5F55\"));\n      }\n    }\n\n    /**\r\n     * 关闭所有WebSocket连接\r\n     */\n  }, {\n    key: \"closeAllConnections\",\n    value: function closeAllConnections() {\n      var _this5 = this;\n      // 关闭通知WebSocket\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n        this.notificationSocket = null;\n      }\n\n      // 关闭所有聊天WebSocket\n      Object.keys(this.chatSockets).forEach(function (userId) {\n        if (_this5.chatSockets[userId]) {\n          _this5.chatSockets[userId].close();\n          delete _this5.chatSockets[userId];\n        }\n      });\n    }\n  }]);\n}(); // 创建单例\nvar webSocketManager = new WebSocketManager();\nexport default webSocketManager;","map":{"version":3,"names":["ReconnectingWebSocket","store","WebSocketManager","_classCallCheck","notificationSocket","chatSockets","baseWsUrl","_getWebSocketBaseUrl","_createClass","key","value","protocol","window","location","host","process","env","VUE_APP_WS_HOST","concat","_getToken","state","token","initNotificationSocket","_this","console","error","close","wsUrl","onopen","log","onmessage","event","data","JSON","parse","_handleNotificationMessage","onclose","code","reason","onerror","messageType","type","message","commit","count","_showNotification","success","id","notification","Notification","permission","title","options","body","content","icon","markNotificationRead","notificationId","readyState","WebSocket","OPEN","send","stringify","markAllNotificationsRead","initChatSocket","userId","_this2","_handleChatMessage","senderId","sender_id","receiverId","receiver_id","timestamp","isRead","is_read","isOutgoing","user","parseInt","currentChatUserId","_showChatNotification","messages","map","msg","hasMore","has_more","page","sender","getters","getUserById","senderName","nickname","username","avatar_url","sendChatMessage","_this3","setTimeout","_sendChatMessageImpl","loadChatHistory","_this4","arguments","length","undefined","pageSize","_loadChatHistoryImpl","page_size","closeAllConnections","_this5","Object","keys","forEach","webSocketManager"],"sources":["H:/ForumServers/ForumFrontend/src/utils/websocket.js"],"sourcesContent":["import ReconnectingWebSocket from 'reconnecting-websocket';\r\nimport store from '@/store';\r\n\r\n/**\r\n * WebSocket连接管理类\r\n */\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.notificationSocket = null;\r\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\r\n    this.baseWsUrl = this._getWebSocketBaseUrl();\r\n  }\r\n\r\n  /**\r\n   * 获取WebSocket基础URL\r\n   */\r\n  _getWebSocketBaseUrl() {\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const host = process.env.VUE_APP_WS_HOST || window.location.host;\r\n    return `${protocol}//${host}`;\r\n  }\r\n\r\n  /**\r\n   * 获取用户Token\r\n   */\r\n  _getToken() {\r\n    return store.state.token;\r\n  }\r\n\r\n  /**\r\n   * 初始化通知WebSocket\r\n   */\r\n  initNotificationSocket() {\r\n    const token = this._getToken();\r\n    if (!token) {\r\n      console.error('未登录，无法初始化通知WebSocket');\r\n      return;\r\n    }\r\n\r\n    // 关闭已存在的连接\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n    }\r\n\r\n    // 创建新连接\r\n    const wsUrl = `${this.baseWsUrl}/ws/notifications/?token=${token}`;\r\n    this.notificationSocket = new ReconnectingWebSocket(wsUrl);\r\n\r\n    // 连接建立时的回调\r\n    this.notificationSocket.onopen = () => {\r\n      console.log('通知WebSocket连接已建立');\r\n    };\r\n\r\n    // 接收消息的回调\r\n    this.notificationSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this._handleNotificationMessage(data);\r\n      } catch (error) {\r\n        console.error('解析通知WebSocket消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的回调\r\n    this.notificationSocket.onclose = (event) => {\r\n      console.log('通知WebSocket连接已关闭:', event.code, event.reason);\r\n    };\r\n\r\n    // 连接错误时的回调\r\n    this.notificationSocket.onerror = (error) => {\r\n      console.error('通知WebSocket连接错误:', error);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 处理通知WebSocket消息\r\n   */\r\n  _handleNotificationMessage(data) {\r\n    const messageType = data.type;\r\n\r\n    if (messageType === 'connection_established') {\r\n      console.log(data.message);\r\n    } else if (messageType === 'unread_count') {\r\n      // 更新未读通知数量\r\n      store.commit('setUnreadNotificationCount', data.count);\r\n    } else if (messageType === 'notification_message') {\r\n      // 接收到新通知\r\n      if (data.message) {\r\n        // 添加新通知到Vuex\r\n        store.commit('addNotification', data.message);\r\n        // 更新未读通知数量\r\n        store.commit('incrementUnreadNotificationCount');\r\n        // 显示通知提示\r\n        this._showNotification(data.message);\r\n      }\r\n    } else if (messageType === 'mark_read_response') {\r\n      // 标记通知已读的响应\r\n      if (data.success) {\r\n        store.commit('markNotificationRead', data.id);\r\n      }\r\n    } else if (messageType === 'mark_all_read_response') {\r\n      // 标记所有通知已读的响应\r\n      if (data.success) {\r\n        store.commit('markAllNotificationsRead');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示通知提示\r\n   */\r\n  _showNotification(notification) {\r\n    // 如果浏览器支持桌面通知且用户已授权\r\n    if (Notification && Notification.permission === 'granted') {\r\n      const title = '新通知';\r\n      const options = {\r\n        body: notification.content,\r\n        icon: '/favicon.ico'\r\n      };\r\n      new Notification(title, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 标记通知为已读\r\n   */\r\n  markNotificationRead(notificationId) {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_read',\r\n        id: notificationId\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 标记所有通知为已读\r\n   */\r\n  markAllNotificationsRead() {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_all_read'\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化聊天WebSocket\r\n   */\r\n  initChatSocket(userId) {\r\n    const token = this._getToken();\r\n    if (!token) {\r\n      console.error('未登录，无法初始化聊天WebSocket');\r\n      return;\r\n    }\r\n\r\n    // 如果已存在与该用户的连接，先关闭\r\n    if (this.chatSockets[userId]) {\r\n      this.chatSockets[userId].close();\r\n    }\r\n\r\n    // 创建新连接\r\n    const wsUrl = `${this.baseWsUrl}/ws/chat/${userId}/?token=${token}`;\r\n    this.chatSockets[userId] = new ReconnectingWebSocket(wsUrl);\r\n\r\n    // 连接建立时的回调\r\n    this.chatSockets[userId].onopen = () => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已建立`);\r\n    };\r\n\r\n    // 接收消息的回调\r\n    this.chatSockets[userId].onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this._handleChatMessage(data, userId);\r\n      } catch (error) {\r\n        console.error('解析聊天WebSocket消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的回调\r\n    this.chatSockets[userId].onclose = (event) => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已关闭:`, event.code, event.reason);\r\n      // 从聊天连接列表中移除\r\n      delete this.chatSockets[userId];\r\n    };\r\n\r\n    // 连接错误时的回调\r\n    this.chatSockets[userId].onerror = (error) => {\r\n      console.error(`与用户${userId}的聊天WebSocket连接错误:`, error);\r\n    };\r\n\r\n    return this.chatSockets[userId];\r\n  }\r\n\r\n  /**\r\n   * 处理聊天WebSocket消息\r\n   */\r\n  _handleChatMessage(data, userId) {\r\n    const messageType = data.type;\r\n\r\n    if (messageType === 'connection_established') {\r\n      console.log(data.message);\r\n    } else if (messageType === 'chat_message') {\r\n      // 接收到新聊天消息\r\n      store.commit('addChatMessage', {\r\n        userId: userId,\r\n        message: {\r\n          id: data.id,\r\n          senderId: data.sender_id,\r\n          receiverId: data.receiver_id,\r\n          content: data.content,\r\n          timestamp: data.timestamp,\r\n          isRead: data.is_read,\r\n          isOutgoing: data.sender_id === store.state.user.id\r\n        }\r\n      });\r\n\r\n      // 如果是收到的消息且不是当前正在查看的对话，增加未读计数\r\n      if (data.sender_id === parseInt(userId) && store.state.currentChatUserId !== parseInt(userId)) {\r\n        store.commit('incrementUnreadMessageCount', userId);\r\n      }\r\n\r\n      // 显示消息通知\r\n      if (data.sender_id === parseInt(userId)) {\r\n        this._showChatNotification(data);\r\n      }\r\n    } else if (messageType === 'history_messages') {\r\n      // 接收到历史消息\r\n      store.commit('setChatHistory', {\r\n        userId: userId,\r\n        messages: data.messages.map(msg => ({\r\n          id: msg.id,\r\n          senderId: msg.sender_id,\r\n          receiverId: msg.receiver_id,\r\n          content: msg.content,\r\n          timestamp: msg.timestamp,\r\n          isRead: msg.is_read,\r\n          isOutgoing: msg.sender_id === store.state.user.id\r\n        })),\r\n        hasMore: data.has_more,\r\n        page: data.page\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示聊天消息通知\r\n   */\r\n  _showChatNotification(message) {\r\n    // 如果浏览器支持桌面通知且用户已授权\r\n    if (Notification && Notification.permission === 'granted') {\r\n      // 获取发送者信息\r\n      const sender = store.getters.getUserById(message.sender_id);\r\n      const senderName = sender ? sender.nickname || sender.username : `用户${message.sender_id}`;\r\n      \r\n      const title = `来自 ${senderName} 的新消息`;\r\n      const options = {\r\n        body: message.content,\r\n        icon: sender && sender.avatar_url ? sender.avatar_url : '/favicon.ico'\r\n      };\r\n      new Notification(title, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送聊天消息\r\n   */\r\n  sendChatMessage(userId, content) {\r\n    // 如果没有与该用户的连接，先初始化\r\n    if (!this.chatSockets[userId] || this.chatSockets[userId].readyState !== WebSocket.OPEN) {\r\n      this.initChatSocket(userId);\r\n      \r\n      // 等待连接建立后再发送消息\r\n      setTimeout(() => {\r\n        this._sendChatMessageImpl(userId, content);\r\n      }, 500);\r\n    } else {\r\n      this._sendChatMessageImpl(userId, content);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实际发送聊天消息的实现\r\n   */\r\n  _sendChatMessageImpl(userId, content) {\r\n    if (this.chatSockets[userId] && this.chatSockets[userId].readyState === WebSocket.OPEN) {\r\n      this.chatSockets[userId].send(JSON.stringify({\r\n        type: 'chat_message',\r\n        content: content\r\n      }));\r\n    } else {\r\n      console.error(`与用户${userId}的WebSocket连接未就绪，无法发送消息`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载历史聊天记录\r\n   */\r\n  loadChatHistory(userId, page = 1, pageSize = 20) {\r\n    // 如果没有与该用户的连接，先初始化\r\n    if (!this.chatSockets[userId] || this.chatSockets[userId].readyState !== WebSocket.OPEN) {\r\n      this.initChatSocket(userId);\r\n      \r\n      // 等待连接建立后再请求历史记录\r\n      setTimeout(() => {\r\n        this._loadChatHistoryImpl(userId, page, pageSize);\r\n      }, 500);\r\n    } else {\r\n      this._loadChatHistoryImpl(userId, page, pageSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实际加载历史聊天记录的实现\r\n   */\r\n  _loadChatHistoryImpl(userId, page, pageSize) {\r\n    if (this.chatSockets[userId] && this.chatSockets[userId].readyState === WebSocket.OPEN) {\r\n      this.chatSockets[userId].send(JSON.stringify({\r\n        type: 'load_history',\r\n        page: page,\r\n        page_size: pageSize\r\n      }));\r\n    } else {\r\n      console.error(`与用户${userId}的WebSocket连接未就绪，无法加载历史记录`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 关闭所有WebSocket连接\r\n   */\r\n  closeAllConnections() {\r\n    // 关闭通知WebSocket\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n      this.notificationSocket = null;\r\n    }\r\n\r\n    // 关闭所有聊天WebSocket\r\n    Object.keys(this.chatSockets).forEach(userId => {\r\n      if (this.chatSockets[userId]) {\r\n        this.chatSockets[userId].close();\r\n        delete this.chatSockets[userId];\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// 创建单例\r\nconst webSocketManager = new WebSocketManager();\r\nexport default webSocketManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}