{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$3 = require('../../overlay/index.js');\nvar focusTrap = require('../../focus-trap/src/focus-trap.js');\nvar index$2 = require('../../teleport/index.js');\nvar dialogContent = require('./dialog-content2.js');\nvar constants = require('./constants.js');\nvar dialog = require('./dialog.js');\nvar useDialog = require('./use-dialog.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-deprecated/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$4 = require('../../../hooks/use-same-target/index.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElDialog\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialog.dialogProps,\n  emits: dialog.dialogEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var slots = vue.useSlots();\n    index.useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, vue.computed(function () {\n      return !!slots.title;\n    }));\n    var ns = index$1.useNamespace(\"dialog\");\n    var dialogRef = vue.ref();\n    var headerRef = vue.ref();\n    var dialogContentRef = vue.ref();\n    var _useDialog$useDialog = useDialog.useDialog(props, dialogRef),\n      visible = _useDialog$useDialog.visible,\n      titleId = _useDialog$useDialog.titleId,\n      bodyId = _useDialog$useDialog.bodyId,\n      style = _useDialog$useDialog.style,\n      overlayDialogStyle = _useDialog$useDialog.overlayDialogStyle,\n      rendered = _useDialog$useDialog.rendered,\n      zIndex = _useDialog$useDialog.zIndex,\n      afterEnter = _useDialog$useDialog.afterEnter,\n      afterLeave = _useDialog$useDialog.afterLeave,\n      beforeLeave = _useDialog$useDialog.beforeLeave,\n      handleClose = _useDialog$useDialog.handleClose,\n      onModalClick = _useDialog$useDialog.onModalClick,\n      onOpenAutoFocus = _useDialog$useDialog.onOpenAutoFocus,\n      onCloseAutoFocus = _useDialog$useDialog.onCloseAutoFocus,\n      onCloseRequested = _useDialog$useDialog.onCloseRequested,\n      onFocusoutPrevented = _useDialog$useDialog.onFocusoutPrevented;\n    vue.provide(constants.dialogInjectionKey, {\n      dialogRef: dialogRef,\n      headerRef: headerRef,\n      bodyId: bodyId,\n      ns: ns,\n      rendered: rendered,\n      style: style\n    });\n    var overlayEvent = index$4.useSameTarget(onModalClick);\n    var draggable = vue.computed(function () {\n      return props.draggable && !props.fullscreen;\n    });\n    var resetPosition = function resetPosition() {\n      var _a;\n      (_a = dialogContentRef.value) == null ? void 0 : _a.resetPosition();\n    };\n    expose({\n      visible: visible,\n      dialogContentRef: dialogContentRef,\n      resetPosition: resetPosition,\n      handleClose: handleClose\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElTeleport), {\n        to: _ctx.appendTo,\n        disabled: _ctx.appendTo !== \"body\" ? false : !_ctx.appendToBody\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.createVNode(vue.Transition, {\n            name: \"dialog-fade\",\n            onAfterEnter: vue.unref(afterEnter),\n            onAfterLeave: vue.unref(afterLeave),\n            onBeforeLeave: vue.unref(beforeLeave),\n            persisted: \"\"\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.withDirectives(vue.createVNode(vue.unref(index$3.ElOverlay), {\n                \"custom-mask-event\": \"\",\n                mask: _ctx.modal,\n                \"overlay-class\": _ctx.modalClass,\n                \"z-index\": vue.unref(zIndex)\n              }, {\n                \"default\": vue.withCtx(function () {\n                  return [vue.createElementVNode(\"div\", {\n                    role: \"dialog\",\n                    \"aria-modal\": \"true\",\n                    \"aria-label\": _ctx.title || void 0,\n                    \"aria-labelledby\": !_ctx.title ? vue.unref(titleId) : void 0,\n                    \"aria-describedby\": vue.unref(bodyId),\n                    \"class\": vue.normalizeClass(\"\".concat(vue.unref(ns).namespace.value, \"-overlay-dialog\")),\n                    style: vue.normalizeStyle(vue.unref(overlayDialogStyle)),\n                    onClick: vue.unref(overlayEvent).onClick,\n                    onMousedown: vue.unref(overlayEvent).onMousedown,\n                    onMouseup: vue.unref(overlayEvent).onMouseup\n                  }, [vue.createVNode(vue.unref(focusTrap[\"default\"]), {\n                    loop: \"\",\n                    trapped: vue.unref(visible),\n                    \"focus-start-el\": \"container\",\n                    onFocusAfterTrapped: vue.unref(onOpenAutoFocus),\n                    onFocusAfterReleased: vue.unref(onCloseAutoFocus),\n                    onFocusoutPrevented: vue.unref(onFocusoutPrevented),\n                    onReleaseRequested: vue.unref(onCloseRequested)\n                  }, {\n                    \"default\": vue.withCtx(function () {\n                      return [vue.unref(rendered) ? (vue.openBlock(), vue.createBlock(dialogContent[\"default\"], vue.mergeProps({\n                        key: 0,\n                        ref_key: \"dialogContentRef\",\n                        ref: dialogContentRef\n                      }, _ctx.$attrs, {\n                        center: _ctx.center,\n                        \"align-center\": _ctx.alignCenter,\n                        \"close-icon\": _ctx.closeIcon,\n                        draggable: vue.unref(draggable),\n                        overflow: _ctx.overflow,\n                        fullscreen: _ctx.fullscreen,\n                        \"header-class\": _ctx.headerClass,\n                        \"body-class\": _ctx.bodyClass,\n                        \"footer-class\": _ctx.footerClass,\n                        \"show-close\": _ctx.showClose,\n                        title: _ctx.title,\n                        \"aria-level\": _ctx.headerAriaLevel,\n                        onClose: vue.unref(handleClose)\n                      }), vue.createSlots({\n                        header: vue.withCtx(function () {\n                          return [!_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, \"header\", {\n                            key: 0,\n                            close: vue.unref(handleClose),\n                            titleId: vue.unref(titleId),\n                            titleClass: vue.unref(ns).e(\"title\")\n                          }) : vue.renderSlot(_ctx.$slots, \"title\", {\n                            key: 1\n                          })];\n                        }),\n                        \"default\": vue.withCtx(function () {\n                          return [vue.renderSlot(_ctx.$slots, \"default\")];\n                        }),\n                        _: 2\n                      }, [_ctx.$slots.footer ? {\n                        name: \"footer\",\n                        fn: vue.withCtx(function () {\n                          return [vue.renderSlot(_ctx.$slots, \"footer\")];\n                        })\n                      } : void 0]), 1040, [\"center\", \"align-center\", \"close-icon\", \"draggable\", \"overflow\", \"fullscreen\", \"header-class\", \"body-class\", \"footer-class\", \"show-close\", \"title\", \"aria-level\", \"onClose\"])) : vue.createCommentVNode(\"v-if\", true)];\n                    }),\n                    _: 3\n                  }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])], 46, [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"onClick\", \"onMousedown\", \"onMouseup\"])];\n                }),\n                _: 3\n              }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vue.vShow, vue.unref(visible)]])];\n            }),\n            _: 3\n          }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])];\n        }),\n        _: 3\n      }, 8, [\"to\", \"disabled\"]);\n    };\n  }\n}));\nvar Dialog = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"dialog.vue\"]]);\nexports[\"default\"] = Dialog;","map":{"version":3,"names":["name","inheritAttrs","slots","vue","useSlots","index","useDeprecated","scope","from","replacement","version","ref","computed","title","ns","index$1","useNamespace","dialogRef","headerRef","dialogContentRef","_useDialog$useDialog","useDialog","props","visible","titleId","bodyId","style","overlayDialogStyle","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","onFocusoutPrevented","provide","constants","dialogInjectionKey","overlayEvent","index$4","useSameTarget","draggable","fullscreen","resetPosition","_a","value","expose","_ctx","_cache","openBlock","createBlock","unref","index$2","ElTeleport","to","appendTo"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <el-teleport\n    :to=\"appendTo\"\n    :disabled=\"appendTo !== 'body' ? false : !appendToBody\"\n  >\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          :style=\"overlayDialogStyle\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @focusout-prevented=\"onFocusoutPrevented\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              v-bind=\"$attrs\"\n              :center=\"center\"\n              :align-center=\"alignCenter\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :overflow=\"overflow\"\n              :fullscreen=\"fullscreen\"\n              :header-class=\"headerClass\"\n              :body-class=\"bodyClass\"\n              :footer-class=\"footerClass\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              :aria-level=\"headerAriaLevel\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </el-teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElTeleport from '@element-plus/components/teleport'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogInjectionKey } from './constants'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  overlayDialogStyle,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n  onFocusoutPrevented,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\nconst resetPosition = () => {\n  dialogContentRef.value?.resetPosition()\n}\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n  resetPosition,\n  handleClose,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;qCA0Fc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;IAIA,IAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEvBC,KAAA,CAAAC,aAAA;MACEC,KAAA;MAAAC,IACS;MAAAC,WACD;MAAAC,OACO;MAAAC,GACJ;IAAA,GAAAR,GAAA,CAAAS,QACJ;MAAA,SAAAV,KAAA,CAAAW,KAAA;IAAA;IACP,IAAAC,EAAA,GAAAC,OAAA,CAAAC,YAAA;IAAA,IACSC,SAAA,GAAOd,GAAA,CAAAQ,GAAA;IAClB,IAAAO,SAAA,GAAAf,GAAA,CAAAQ,GAAA;IAEM,IAAAQ,gBAAA,GAA0BhB,GAAA,CAAAQ,GAAA;IAChC,IAAAS,oBAAA,GAkBEC,SAAA,CAAAA,SAAA,CAAAC,KAAA,EAAAL,SAAA;MAjBFM,OAAA,GAAAH,oBAAA,CAAAG,OAAA;MACAC,OAAA,GAAAJ,oBAAA,CAAAI,OAAA;MAEMC,MAAA,GAAAL,oBAAA,CAAAK,MAAA;MACJC,KAAA,GAAAN,oBAAA,CAAAM,KAAA;MACAC,kBAAA,GAAAP,oBAAA,CAAAO,kBAAA;MACAC,QAAA,GAAAR,oBAAA,CAAAQ,QAAA;MACAC,MAAA,GAAAT,oBAAA,CAAAS,MAAA;MACAC,UAAA,GAAAV,oBAAA,CAAAU,UAAA;MACAC,UAAA,GAAAX,oBAAA,CAAAW,UAAA;MACAC,WAAA,GAAAZ,oBAAA,CAAAY,WAAA;MACAC,WAAA,GAAAb,oBAAA,CAAAa,WAAA;MACAC,YAAA,GAAAd,oBAAA,CAAAc,YAAA;MACAC,eAAA,GAAAf,oBAAA,CAAAe,eAAA;MACAC,gBAAA,GAAAhB,oBAAA,CAAAgB,gBAAA;MACAC,gBAAA,GAAAjB,oBAAA,CAAAiB,gBAAA;MACAC,mBAAA,GAAAlB,oBAAA,CAAAkB,mBAAA;IAEAnC,GAAA,CAAAoC,OAAA,CAAAC,SAAA,CAAAC,kBAAA;MACAxB,SAAA,EAAAA,SAAA;MACFC,SAAc,EAAdA,SAAc;MAEdO,MAAQ,EAARA,MAAQ;MACNX,EAAA,EAAAA,EAAA;MACAc,QAAA,EAAAA,QAAA;MACAF,KAAA,EAAAA;IAAA,CACA;IACA,IAAAgB,YAAA,GAAAC,OAAA,CAAAC,aAAA,CAAAV,YAAA;IACA,IAAAW,SAAA,GAAA1C,GAAA,CAAAS,QAAA;MAAA,OAAAU,KAAA,CAAAuB,SAAA,KAAAvB,KAAA,CAAAwB,UAAA;IAAA;IACF,IAACC,aAAA,YAAAA,cAAA;MAEK,IAAAC,EAAA;MAEN,CAAAA,EAAA,GAAA7B,gBAA2B,CAAA8B,KAAA,SAAY,GAAa,SAAAD,EAAC,CAAAD,aAAgB;IAErE;IACEG,MAAA;MACF3B,OAAA,EAAAA,OAAA;MAEaJ,gBAAA,EAAAA,gBAAA;MAAA4B,aAAA,EAAAA,aAAA;MAEXd,WAAA,EAAAA;IAAA,CACA;IACA,iBAAAkB,IAAA,EAAAC,MAAA;MACA,OAAAjD,GAAA,CAAAkD,SAAA,IAAAlD,GAAA,CAAAmD,WAAA,CAAAnD,GAAA,CAAAoD,KAAA,CAAAC,OAAA,CAAAC,UAAA;QACDC,EAAA,EAAAP,IAAA,CAAAQ,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}