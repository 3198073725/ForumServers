{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/defineProperty.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.every.js\");\nrequire(\"core-js/modules/es.date.to-string.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.every.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar shared = require('@vue/shared');\nvar event = require('../../../constants/event.js');\nvar isValidRange = function isValidRange(range) {\n  return shared.isArray(range) && range.length === 2 && range.every(function (item) {\n    return shared.isDate(item);\n  });\n};\nvar calendarProps = runtime.buildProps({\n  modelValue: {\n    type: Date\n  },\n  range: {\n    type: runtime.definePropType(Array),\n    validator: isValidRange\n  }\n});\nvar calendarEmits = _defineProperty(_defineProperty({}, event.UPDATE_MODEL_EVENT, function (value) {\n  return shared.isDate(value);\n}), event.INPUT_EVENT, function (value) {\n  return shared.isDate(value);\n});\nexports.calendarEmits = calendarEmits;\nexports.calendarProps = calendarProps;","map":{"version":3,"names":["isValidRange","range","shared","isArray","length","every","item","isDate","calendarProps","runtime","buildProps","modelValue","type","Date","definePropType","Array","validator","calendarEmits","_defineProperty","event","UPDATE_MODEL_EVENT","value","INPUT_EVENT"],"sources":["../../../../../../packages/components/calendar/src/calendar.ts"],"sourcesContent":["import {\n  buildProps,\n  definePropType,\n  isArray,\n  isDate,\n} from '@element-plus/utils'\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\n\nexport type CalendarDateType =\n  | 'prev-month'\n  | 'next-month'\n  | 'prev-year'\n  | 'next-year'\n  | 'today'\n\nconst isValidRange = (range: unknown): range is [Date, Date] =>\n  isArray(range) && range.length === 2 && range.every((item) => isDate(item))\n\nexport const calendarProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: Date,\n  },\n  /**\n   * @description time range, including start time and end time.\n   *   Start time must be start day of week, end time must be end day of week, the time span cannot exceed two months.\n   */\n  range: {\n    type: definePropType<[Date, Date]>(Array),\n    validator: isValidRange,\n  },\n} as const)\nexport type CalendarProps = ExtractPropTypes<typeof calendarProps>\n\nexport const calendarEmits = {\n  [UPDATE_MODEL_EVENT]: (value: Date) => isDate(value),\n  [INPUT_EVENT]: (value: Date) => isDate(value),\n}\nexport type CalendarEmits = typeof calendarEmits\n"],"mappings":";;;;;;;;;;;;;;;AAOA,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK;EAAA,OAAKC,MAAA,CAAAC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,IAAIH,KAAK,CAACI,KAAK,CAAC,UAACC,IAAI;IAAA,OAAKJ,MAAA,CAAAK,MAAM,CAACD,IAAI,CAAC;EAAA,EAAC;AAAA;AAC/F,IAACE,aAAa,GAAGC,OAAA,CAAAC,UAAU,CAAC;EACtCC,UAAU,EAAE;IACVC,IAAI,EAAEC;EACV,CAAG;EACDZ,KAAK,EAAE;IACLW,IAAI,EAAEH,OAAA,CAAAK,cAAc,CAACC,KAAK,CAAC;IAC3BC,SAAS,EAAEhB;EACf;AACA,CAAC;AACW,IAACiB,aAAa,GAAAC,eAAA,CAAAA,eAAA,KACvBC,KAAA,CAAAC,kBAAkB,EAAG,UAACC,KAAK;EAAA,OAAKnB,MAAA,CAAAK,MAAM,CAACc,KAAK,CAAC;AAAA,IAC7CF,KAAA,CAAAG,WAAW,EAAG,UAACD,KAAK;EAAA,OAAKnB,MAAA,CAAAK,MAAM,CAACc,KAAK,CAAC;AAAA,EACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}