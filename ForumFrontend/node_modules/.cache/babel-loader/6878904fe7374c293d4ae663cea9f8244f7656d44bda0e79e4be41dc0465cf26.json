{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n\n  // 设置Authorization头\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n\n  // 设置Content-Type头（如果没有设置）\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n  console.log('响应拦截器收到响应:', res);\n\n  // 检查是否有明确的错误状态\n  if (res.status !== undefined && res.status !== 0 && res.status !== 200 || res.code !== undefined && res.code !== 0 && res.code !== 200) {\n    console.error('API错误响应:', res);\n    ElMessage({\n      message: res.msg || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.status === 401 || res.code === 401) {\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    // 如果是\"操作成功\"消息，且不在特定页面，才显示成功消息\n    if (res.msg && res.msg !== '操作成功' && !shouldSuppressMessage() && !isCommentDeleteOperation(response.config) && !isPostOperation(response.config)) {\n      ElMessage({\n        message: res.msg,\n        type: 'success',\n        duration: 3000\n      });\n    }\n\n    // 兼容不同的响应格式\n    if (res.code === undefined && res.status === undefined) {\n      // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: res\n      };\n    }\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n    if (status === 401) {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else if (status === 404) {\n      ElMessage({\n        message: '请求的资源不存在',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    } else if (status === 500) {\n      ElMessage({\n        message: '服务器内部错误',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    } else {\n      // 尝试从响应中获取错误信息\n      var errorMsg = '请求失败';\n      try {\n        if (error.response.data) {\n          if (error.response.data.msg) {\n            errorMsg = error.response.data.msg;\n          } else if (error.response.data.detail) {\n            errorMsg = error.response.data.detail;\n          } else if (typeof error.response.data === 'string') {\n            errorMsg = error.response.data;\n          }\n        }\n      } catch (e) {\n        console.error('解析错误信息失败:', e);\n      }\n      ElMessage({\n        message: errorMsg,\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    ElMessage({\n      message: '服务器无响应，请检查网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  } else {\n    // 请求配置有误\n    ElMessage({\n      message: '网络错误，请检查网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\n\n// 辅助函数：判断当前页面是否应该抑制消息显示\nfunction shouldSuppressMessage() {\n  var currentPath = window.location.pathname;\n  return currentPath.includes('/post/create') || currentPath.includes('/post/edit') || currentPath.includes('/post/') && !currentPath.includes('/create') && !currentPath.includes('/edit');\n}\n\n// 辅助函数：判断是否为评论删除操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为评论删除操作，配置不完整:', config);\n    return false;\n  }\n  var isDeleteMethod = config.method.toLowerCase() === 'delete';\n  var isCommentUrl = config.url.includes('/api/v1/comments/');\n  console.log('请求拦截器检测:', {\n    url: config.url,\n    method: config.method,\n    isDeleteMethod: isDeleteMethod,\n    isCommentUrl: isCommentUrl,\n    isCommentDelete: isDeleteMethod && isCommentUrl\n  });\n  return isCommentUrl && isDeleteMethod;\n}\n\n// 辅助函数：判断是否为帖子相关操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n\n  // 帖子URL模式\n  var isPostUrl = config.url.includes('/api/v1/posts/');\n\n  // 判断是否为编辑、点赞、收藏、置顶、加精等操作\n  var isPutMethod = config.method.toLowerCase() === 'put';\n  var isPostMethod = config.method.toLowerCase() === 'post';\n\n  // 特定操作的URL模式\n  var isLikeUrl = config.url.includes('/like');\n  var isFavoriteUrl = config.url.includes('/favorite');\n  var isPinUrl = config.url.includes('/pin');\n  var isFeatureUrl = config.url.includes('/feature');\n\n  // 判断是否为帖子编辑或特定操作\n  var isPostEdit = isPutMethod && isPostUrl && !isLikeUrl && !isFavoriteUrl && !isPinUrl && !isFeatureUrl;\n  var isPostAction = isPostUrl && (isLikeUrl || isFavoriteUrl || isPinUrl || isFeatureUrl);\n  console.log('请求拦截器检测帖子操作:', {\n    url: config.url,\n    method: config.method,\n    isPostUrl: isPostUrl,\n    isPutMethod: isPutMethod,\n    isPostMethod: isPostMethod,\n    isLikeUrl: isLikeUrl,\n    isFavoriteUrl: isFavoriteUrl,\n    isPinUrl: isPinUrl,\n    isFeatureUrl: isFeatureUrl,\n    isPostEdit: isPostEdit,\n    isPostAction: isPostAction,\n    isPostOperation: isPostEdit || isPostAction\n  });\n  return isPostEdit || isPostAction;\n}\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","method","data","FormData","error","console","Promise","reject","response","res","log","status","undefined","code","message","msg","type","duration","removeItem","push","Error","shouldSuppressMessage","isCommentDeleteOperation","isPostOperation","errorMsg","detail","e","currentPath","window","location","pathname","includes","url","isDeleteMethod","toLowerCase","isCommentUrl","isCommentDelete","isPostUrl","isPutMethod","isPostMethod","isLikeUrl","isFavoriteUrl","isPinUrl","isFeatureUrl","isPostEdit","isPostAction"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    \n    // 设置Authorization头\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    // 设置Content-Type头（如果没有设置）\n    if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n      if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n        config.headers['Content-Type'] = 'application/json'\n      }\n    }\n\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    console.log('响应拦截器收到响应:', res)\n    \n    // 检查是否有明确的错误状态\n    if ((res.status !== undefined && res.status !== 0 && res.status !== 200) || \n        (res.code !== undefined && res.code !== 0 && res.code !== 200)) {\n      console.error('API错误响应:', res)\n      ElMessage({\n        message: res.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      // 401: 未登录或token过期\n      if (res.status === 401 || res.code === 401) {\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      }\n\n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      // 如果是\"操作成功\"消息，且不在特定页面，才显示成功消息\n      if (res.msg && res.msg !== '操作成功' && !shouldSuppressMessage() && \n          !isCommentDeleteOperation(response.config) && \n          !isPostOperation(response.config)) {\n        ElMessage({\n          message: res.msg,\n          type: 'success',\n          duration: 3000\n        })\n      }\n      \n      // 兼容不同的响应格式\n      if (res.code === undefined && res.status === undefined) {\n        // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: res\n        }\n      }\n\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n\n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n      \n      if (status === 401) {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'error',\n          duration: 5 * 1000\n        })\n\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      } else if (status === 404) {\n        ElMessage({\n          message: '请求的资源不存在',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      } else if (status === 500) {\n        ElMessage({\n          message: '服务器内部错误',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      } else {\n        // 尝试从响应中获取错误信息\n        let errorMsg = '请求失败'\n        try {\n          if (error.response.data) {\n            if (error.response.data.msg) {\n              errorMsg = error.response.data.msg\n            } else if (error.response.data.detail) {\n              errorMsg = error.response.data.detail\n            } else if (typeof error.response.data === 'string') {\n              errorMsg = error.response.data\n            }\n          }\n        } catch (e) {\n          console.error('解析错误信息失败:', e)\n        }\n\n        ElMessage({\n          message: errorMsg,\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    } else if (error.request) {\n      // 请求已发送但没有收到响应\n      ElMessage({\n        message: '服务器无响应，请检查网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    } else {\n      // 请求配置有误\n      ElMessage({\n        message: '网络错误，请检查网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n// 辅助函数：判断当前页面是否应该抑制消息显示\nfunction shouldSuppressMessage() {\n  const currentPath = window.location.pathname\n  return currentPath.includes('/post/create') || \n         currentPath.includes('/post/edit') || \n         (currentPath.includes('/post/') && !currentPath.includes('/create') && !currentPath.includes('/edit'))\n}\n\n// 辅助函数：判断是否为评论删除操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为评论删除操作，配置不完整:', config)\n    return false\n  }\n  \n  const isDeleteMethod = config.method.toLowerCase() === 'delete'\n  const isCommentUrl = config.url.includes('/api/v1/comments/')\n  \n  console.log('请求拦截器检测:', {\n    url: config.url,\n    method: config.method,\n    isDeleteMethod,\n    isCommentUrl,\n    isCommentDelete: isDeleteMethod && isCommentUrl\n  })\n  \n  return isCommentUrl && isDeleteMethod\n}\n\n// 辅助函数：判断是否为帖子相关操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  // 帖子URL模式\n  const isPostUrl = config.url.includes('/api/v1/posts/')\n  \n  // 判断是否为编辑、点赞、收藏、置顶、加精等操作\n  const isPutMethod = config.method.toLowerCase() === 'put'\n  const isPostMethod = config.method.toLowerCase() === 'post'\n  \n  // 特定操作的URL模式\n  const isLikeUrl = config.url.includes('/like')\n  const isFavoriteUrl = config.url.includes('/favorite')\n  const isPinUrl = config.url.includes('/pin')\n  const isFeatureUrl = config.url.includes('/feature')\n  \n  // 判断是否为帖子编辑或特定操作\n  const isPostEdit = isPutMethod && isPostUrl && !isLikeUrl && !isFavoriteUrl && !isPinUrl && !isFeatureUrl\n  const isPostAction = isPostUrl && (isLikeUrl || isFavoriteUrl || isPinUrl || isFeatureUrl)\n  \n  console.log('请求拦截器检测帖子操作:', {\n    url: config.url,\n    method: config.method,\n    isPostUrl,\n    isPutMethod,\n    isPostMethod,\n    isLikeUrl,\n    isFavoriteUrl,\n    isPinUrl,\n    isFeatureUrl,\n    isPostEdit,\n    isPostAction,\n    isPostOperation: isPostEdit || isPostAction\n  })\n  \n  return isPostEdit || isPostAction\n}\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}