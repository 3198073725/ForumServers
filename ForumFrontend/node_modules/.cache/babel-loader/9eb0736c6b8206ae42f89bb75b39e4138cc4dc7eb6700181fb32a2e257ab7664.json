{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost, getMockPostDetail } from '@/api/post';\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  data: function data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      forceRefresh: false,\n      // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false,\n      // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [{\n          required: true,\n          message: '请输入帖子标题',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 100,\n          message: '标题长度在2到100个字符之间',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入帖子内容',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: '内容至少5个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAuthenticated', 'isAdmin', 'userId'])), {}, {\n    isLogin: function isLogin() {\n      return this.isAuthenticated;\n    },\n    isPostAuthor: function isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId;\n    },\n    canManagePost: function canManagePost() {\n      return this.isLogin && (this.isAdmin || this.isPostAuthor);\n    }\n  }),\n  created: function created() {\n    var postId = this.$route.params.id;\n    if (postId) {\n      this.fetchPostDetail(postId);\n      this.fetchComments(postId);\n    } else {\n      this.$router.push({\n        name: 'PostList'\n      });\n    }\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取帖子详情\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, errorMessage, mockPost;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              console.log('开始获取帖子详情, ID:', id);\n              _context.next = 5;\n              return getPostDetail(id);\n            case 5:\n              response = _context.sent;\n              console.log('帖子详情响应:', response);\n              if (response && response.code === 0 && response.data) {\n                console.log('使用code=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else if (response && response.status === 0 && response.data) {\n                console.log('使用status=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else if (response && _typeof(response) === 'object') {\n                // 尝试直接使用响应对象作为帖子数据\n                console.log('尝试直接使用响应对象作为帖子数据');\n                _this.post = response;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else {\n                console.error('获取帖子详情失败:', response ? response.msg : '未知错误');\n                _this.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '获取帖子详情失败');\n\n                // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n                // 添加延时重试\n                if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n                  console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情');\n                  setTimeout(function () {\n                    _this.fetchPostDetail(id);\n                  }, 1000);\n                } else {\n                  // 如果不是从发帖页面跳转，则返回帖子列表\n                  setTimeout(function () {\n                    _this.$router.push({\n                      name: 'PostList'\n                    });\n                  }, 1500);\n                }\n              }\n              _context.next = 38;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取帖子详情失败:', _context.t0);\n\n              // 增强错误处理，显示更具体的错误信息\n              errorMessage = '获取帖子详情失败，请稍后重试';\n              if (!_context.t0.response) {\n                _context.next = 35;\n                break;\n              }\n              if (!(_context.t0.response.status === 500)) {\n                _context.next = 20;\n                break;\n              }\n              errorMessage = '服务器内部错误，请联系管理员';\n              console.error('服务器内部错误详情:', _context.t0.response.data);\n              _context.next = 33;\n              break;\n            case 20:\n              if (!(_context.t0.response.status === 404)) {\n                _context.next = 24;\n                break;\n              }\n              errorMessage = '帖子不存在或已被删除';\n              _context.next = 33;\n              break;\n            case 24:\n              if (!(_context.t0.response.status === 401 || _context.t0.response.status === 403)) {\n                _context.next = 32;\n                break;\n              }\n              // 未登录用户应该可以查看帖子，不应该跳转到登录页\n              console.log('未登录用户尝试查看帖子，继续显示帖子内容');\n              // 使用模拟数据\n              mockPost = getMockPostDetail ? getMockPostDetail(id) : {\n                id: Number(id),\n                title: '帖子内容',\n                content: '帖子内容加载失败，请登录后查看',\n                created_at: new Date().toISOString(),\n                views: 0,\n                likes_count: 0,\n                comments_count: 0,\n                is_pinned: false,\n                is_featured: false,\n                board: {\n                  id: 1,\n                  name: '默认板块'\n                },\n                user: {\n                  id: 1,\n                  username: 'user',\n                  nickname: '用户',\n                  avatar_url: ''\n                }\n              };\n              _this.post = mockPost;\n              _this.loading = false;\n              return _context.abrupt(\"return\");\n            case 32:\n              if (_context.t0.response.data && _context.t0.response.data.msg) {\n                errorMessage = _context.t0.response.data.msg;\n              }\n            case 33:\n              _context.next = 36;\n              break;\n            case 35:\n              if (_context.t0.request) {\n                // 请求已发送但没有收到响应\n                errorMessage = '服务器无响应，请检查网络连接';\n              }\n            case 36:\n              _this.$message.error(errorMessage);\n\n              // 等待一段时间后返回帖子列表\n              setTimeout(function () {\n                _this.$router.push({\n                  name: 'PostList'\n                });\n              }, 1500);\n            case 38:\n              _context.prev = 38;\n              _this.loading = false;\n              return _context.finish(38);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 10, 38, 41]]);\n      }))();\n    },\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite: function checkLikeAndFavorite() {\n      // 未登录用户默认未点赞和未收藏\n      if (!this.isLogin) {\n        console.log('未登录用户，设置为未点赞和未收藏状态');\n        this.isLiked = false;\n        this.isFavorited = false;\n        return;\n      }\n\n      // 登录用户需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      console.log('已登录用户，检查点赞和收藏状态');\n      this.isLiked = false;\n      this.isFavorited = false;\n\n      // TODO: 实现实际的点赞和收藏状态检查\n      // 实现示例:\n      // checkPostLikeStatus(this.post.id).then(response => {\n      //   this.isLiked = response.data.is_liked\n      // })\n      // checkPostFavoriteStatus(this.post.id).then(response => {\n      //   this.isFavorited = response.data.is_favorited\n      // })\n    },\n    // 获取评论列表\n    fetchComments: function fetchComments(postId) {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, comments, _comments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this2.commentsLoading && !_this2.forceRefresh)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 2:\n              _this2.commentsLoading = true;\n              console.log('开始获取评论列表，强制刷新:', _this2.forceRefresh);\n              _context2.prev = 4;\n              _context2.next = 7;\n              return getPostComments(postId, _this2.forceRefresh);\n            case 7:\n              response = _context2.sent;\n              if (response.code === 0 || response.status === 0) {\n                console.log('获取评论列表成功，数据:', response.data);\n                // 确保评论数据格式正确\n                comments = response.data.results || []; // 完全替换评论数据，而不是合并\n                _this2.comments = comments.map(function (comment) {\n                  return _objectSpread(_objectSpread({}, comment), {}, {\n                    replies: comment.replies || []\n                  });\n                });\n                _this2.commentsTotal = response.data.count || 0;\n\n                // 更新帖子评论数，确保与后端同步\n                if (_this2.post && typeof response.data.count === 'number') {\n                  _this2.post.comments_count = response.data.count;\n                }\n              } else if (response && response.results) {\n                // 直接返回的分页结果\n                console.log('获取评论列表成功，直接结果数据:', response);\n                _comments = response.results || [];\n                _this2.comments = _comments.map(function (comment) {\n                  return _objectSpread(_objectSpread({}, comment), {}, {\n                    replies: comment.replies || []\n                  });\n                });\n                _this2.commentsTotal = response.count || 0;\n\n                // 更新帖子评论数\n                if (_this2.post && typeof response.count === 'number') {\n                  _this2.post.comments_count = response.count;\n                }\n              } else if (Array.isArray(response)) {\n                // 直接返回的数组\n                console.log('获取评论列表成功，直接数组数据:', response);\n                _this2.comments = response.map(function (comment) {\n                  return _objectSpread(_objectSpread({}, comment), {}, {\n                    replies: comment.replies || []\n                  });\n                });\n                _this2.commentsTotal = response.length;\n\n                // 更新帖子评论数\n                if (_this2.post) {\n                  _this2.post.comments_count = response.length;\n                }\n              } else {\n                console.error('获取评论列表失败，响应:', response);\n                if (response && response.msg && response.msg.includes('未登录')) {\n                  console.log('未登录用户，不显示评论加载失败提示');\n                  // 未登录用户不显示错误提示，只显示评论区登录提示\n                } else {\n                  _this2.$message.error(response && response.msg ? response.msg : '获取评论列表失败');\n                }\n              }\n              _context2.next = 15;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.error('获取评论列表失败:', _context2.t0);\n              if (_context2.t0.response && _context2.t0.response.status === 401) {\n                console.log('未登录用户，不显示评论加载失败提示');\n                // 未登录用户不显示错误提示，只显示评论区登录提示\n              } else {\n                _this2.$message.error('获取评论列表失败，请刷新页面重试');\n              }\n            case 15:\n              _context2.prev = 15;\n              _this2.commentsLoading = false;\n              _this2.forceRefresh = false; // 重置强制刷新标志\n              console.log('评论列表获取完成，重置强制刷新标志');\n              return _context2.finish(15);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[4, 11, 15, 20]]);\n      }))();\n    },\n    // 评论分页变化\n    handleCommentsPageChange: function handleCommentsPageChange(page) {\n      this.commentsQuery.page = page;\n      this.fetchComments(this.post.id);\n    },\n    // 前往板块页面\n    goToBoard: function goToBoard() {\n      if (this.post.board) {\n        this.$router.push({\n          name: 'BoardDetail',\n          params: {\n            id: this.post.board.id\n          }\n        });\n      }\n    },\n    // 点赞帖子\n    handleLike: function handleLike() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this3.isLogin) {\n                _context3.next = 4;\n                break;\n              }\n              _this3.$message.warning('请先登录');\n              _this3.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this3.$route.fullPath\n                }\n              });\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return likePost(_this3.post.id);\n            case 7:\n              response = _context3.sent;\n              if (response.code === 0) {\n                _this3.isLiked = !_this3.isLiked;\n                // 更新点赞数\n                if (_this3.isLiked) {\n                  _this3.post.likes_count++;\n                } else {\n                  _this3.post.likes_count--;\n                }\n                // this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this3.$message.error(response.msg || '操作失败');\n              }\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('点赞操作失败:', _context3.t0);\n              _this3.$message.error('点赞操作失败');\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 11]]);\n      }))();\n    },\n    // 收藏帖子\n    handleFavorite: function handleFavorite() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this4.isLogin) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请先登录');\n              _this4.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this4.$route.fullPath\n                }\n              });\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return favoritePost(_this4.post.id);\n            case 7:\n              response = _context4.sent;\n              if (response.code === 0) {\n                _this4.isFavorited = !_this4.isFavorited;\n                // this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this4.$message.error(response.msg || '操作失败');\n              }\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('收藏操作失败:', _context4.t0);\n              _this4.$message.error('收藏操作失败');\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 11]]);\n      }))();\n    },\n    // 帖子管理操作\n    handleCommand: function handleCommand(command) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = command;\n              _context5.next = _context5.t0 === 'pin' ? 3 : _context5.t0 === 'feature' ? 5 : 7;\n              break;\n            case 3:\n              _this5.handlePinPost();\n              return _context5.abrupt(\"break\", 7);\n            case 5:\n              _this5.handleFeaturePost();\n              return _context5.abrupt(\"break\", 7);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // 编辑帖子\n    handleEditPost: function handleEditPost() {\n      var _this6 = this;\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n\n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n\n      // 进入编辑状态\n      this.isEditing = true;\n\n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(function () {\n        console.log('编辑表单数据设置完成:', _this6.editPostForm);\n      });\n    },\n    // 取消编辑\n    cancelEdit: function cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false;\n      // 重置表单数据\n      this.editPostForm.title = this.post.title;\n      this.editPostForm.content = this.post.content;\n    },\n    // 提交编辑\n    submitEdit: function submitEdit() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var postData, response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (_this7.editPostForm.title.trim()) {\n                _context6.next = 3;\n                break;\n              }\n              _this7.$message.warning('标题不能为空');\n              return _context6.abrupt(\"return\");\n            case 3:\n              if (_this7.editPostForm.content.trim()) {\n                _context6.next = 6;\n                break;\n              }\n              _this7.$message.warning('内容不能为空');\n              return _context6.abrupt(\"return\");\n            case 6:\n              _this7.editPostSubmitting = true;\n              _context6.prev = 7;\n              // 确保发送正确的数据格式\n              postData = {\n                title: _this7.editPostForm.title.trim(),\n                content: _this7.editPostForm.content.trim(),\n                board: _this7.post.board.id // 需要包含板块ID\n              };\n              console.log('提交更新帖子数据:', postData);\n              _context6.next = 12;\n              return updatePost(_this7.post.id, postData);\n            case 12:\n              response = _context6.sent;\n              if (response && response.code === 0) {\n                // 更新成功\n                // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n                // 更新当前页面的帖子数据\n                _this7.post.title = _this7.editPostForm.title;\n                _this7.post.content = _this7.editPostForm.content;\n                // 更新帖子的更新时间\n                if (response.data && response.data.updated_at) {\n                  _this7.post.updated_at = response.data.updated_at;\n                }\n\n                // 强制退出编辑状态\n                console.log('强制退出编辑状态');\n                // 使用直接赋值和延时双重保险确保状态更新\n                _this7.isEditing = false;\n\n                // 如果直接赋值不起作用，使用延时函数再次尝试\n                setTimeout(function () {\n                  if (_this7.isEditing) {\n                    console.log('使用setTimeout再次尝试退出编辑状态');\n                    _this7.isEditing = false;\n                  }\n                  console.log('编辑状态最终设置为:', _this7.isEditing);\n                }, 100);\n              } else {\n                _this7.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '更新失败，请稍后重试');\n                // 失败时也退出编辑状态\n                _this7.isEditing = false;\n                setTimeout(function () {\n                  if (_this7.isEditing) {\n                    _this7.isEditing = false;\n                  }\n                }, 100);\n              }\n              _context6.next = 22;\n              break;\n            case 16:\n              _context6.prev = 16;\n              _context6.t0 = _context6[\"catch\"](7);\n              console.error('更新帖子失败:', _context6.t0);\n              _this7.$message.error('更新帖子失败，请检查网络连接');\n\n              // 出错时也退出编辑状态\n              _this7.isEditing = false;\n              setTimeout(function () {\n                if (_this7.isEditing) {\n                  _this7.isEditing = false;\n                }\n              }, 100);\n            case 22:\n              _context6.prev = 22;\n              _this7.editPostSubmitting = false;\n              return _context6.finish(22);\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[7, 16, 22, 25]]);\n      }))();\n    },\n    // 删除帖子\n    handleDeletePost: function handleDeletePost() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var loading, response;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return _this8.$confirm('确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。', '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 3:\n              // 显示加载状态\n              loading = _this8.$loading({\n                lock: true,\n                text: '正在删除帖子...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context7.prev = 4;\n              _context7.next = 7;\n              return deletePost(_this8.post.id);\n            case 7:\n              response = _context7.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，直接返回上一级路由\n                console.log('帖子删除成功，正在返回上一级路由...');\n                // 返回上一级路由\n                _this8.$router.go(-1);\n              } else {\n                _this8.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context7.next = 17;\n              break;\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](4);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除帖子请求失败:', _context7.t0);\n              _this8.$message.error('删除帖子失败，请检查网络连接');\n            case 17:\n              _context7.next = 22;\n              break;\n            case 19:\n              _context7.prev = 19;\n              _context7.t1 = _context7[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context7.t1 !== 'cancel') {\n                console.error('删除帖子操作异常:', _context7.t1);\n                _this8.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 22:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 19], [4, 12]]);\n      }))();\n    },\n    // 置顶/取消置顶帖子\n    handlePinPost: function handlePinPost() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return pinPost(_this9.post.id);\n            case 3:\n              response = _context8.sent;\n              if (response.code === 0) {\n                _this9.post.is_pinned = !_this9.post.is_pinned;\n                // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this9.$message.error(response.msg || '操作失败');\n              }\n              _context8.next = 11;\n              break;\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('置顶操作失败:', _context8.t0);\n              _this9.$message.error('置顶操作失败');\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 7]]);\n      }))();\n    },\n    // 加精/取消加精帖子\n    handleFeaturePost: function handleFeaturePost() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return featurePost(_this0.post.id);\n            case 3:\n              response = _context9.sent;\n              if (response.code === 0) {\n                _this0.post.is_featured = !_this0.post.is_featured;\n                // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this0.$message.error(response.msg || '操作失败');\n              }\n              _context9.next = 11;\n              break;\n            case 7:\n              _context9.prev = 7;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error('加精操作失败:', _context9.t0);\n              _this0.$message.error('加精操作失败');\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[0, 7]]);\n      }))();\n    },\n    // 提交评论\n    submitComment: function submitComment() {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var response, userInfo, newComment, existingComment;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              if (_this1.isLogin) {\n                _context0.next = 4;\n                break;\n              }\n              _this1.$message.warning('请先登录');\n              _this1.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this1.$route.fullPath\n                }\n              });\n              return _context0.abrupt(\"return\");\n            case 4:\n              if (_this1.commentContent.trim()) {\n                _context0.next = 7;\n                break;\n              }\n              _this1.$message.warning('评论内容不能为空');\n              return _context0.abrupt(\"return\");\n            case 7:\n              _context0.prev = 7;\n              console.log('提交评论数据:', {\n                post: _this1.post.id,\n                content: _this1.commentContent\n              });\n              _context0.next = 11;\n              return createComment({\n                post: _this1.post.id,\n                content: _this1.commentContent\n              });\n            case 11:\n              response = _context0.sent;\n              console.log('评论提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context0.next = 23;\n                break;\n              }\n              // 不显示成功消息\n              console.log('评论发表成功，不显示成功消息');\n\n              // 清空评论内容\n              _this1.commentContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this1.forceRefresh = true;\n              _context0.next = 20;\n              return _this1.fetchComments(_this1.post.id);\n            case 20:\n              // 只有在确认获取到评论数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新评论数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this1.$store.getters.userInfo; // 构建评论对象\n                newComment = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  replies: [],\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新评论添加到评论列表的开头（如果不在列表中）\n                existingComment = _this1.comments.find(function (c) {\n                  return c.id === newComment.id;\n                });\n                if (!existingComment) {\n                  _this1.comments.unshift(newComment);\n                  console.log('新评论已添加到列表');\n                }\n              }\n              _context0.next = 25;\n              break;\n            case 23:\n              console.error('评论发表失败，响应:', response);\n              _this1.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '评论发表失败');\n            case 25:\n              _context0.next = 33;\n              break;\n            case 27:\n              _context0.prev = 27;\n              _context0.t0 = _context0[\"catch\"](7);\n              console.error('评论发表失败:', _context0.t0);\n              _this1.$message.error('评论发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this1.forceRefresh = true;\n              _this1.fetchComments(_this1.post.id);\n            case 33:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, null, [[7, 27]]);\n      }))();\n    },\n    // 回复评论\n    handleReply: function handleReply(comment) {\n      var reply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!this.isLogin) {\n        this.$message.warning('请先登录');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: this.$route.fullPath\n          }\n        });\n        return;\n      }\n      this.replyingTo = comment.id;\n      this.replyContent = reply ? \"@\".concat(reply.user.nickname || reply.user.username, \" \") : '';\n    },\n    // 取消回复\n    cancelReply: function cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    // 提交回复\n    submitReply: function submitReply(comment) {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        var response, userInfo, newReply, existingReply;\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              if (_this10.isLogin) {\n                _context1.next = 4;\n                break;\n              }\n              _this10.$message.warning('请先登录');\n              _this10.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this10.$route.fullPath\n                }\n              });\n              return _context1.abrupt(\"return\");\n            case 4:\n              if (_this10.replyContent.trim()) {\n                _context1.next = 7;\n                break;\n              }\n              _this10.$message.warning('回复内容不能为空');\n              return _context1.abrupt(\"return\");\n            case 7:\n              _context1.prev = 7;\n              console.log('提交回复数据:', {\n                post: _this10.post.id,\n                parent: comment.id,\n                content: _this10.replyContent\n              });\n              _context1.next = 11;\n              return replyComment(_this10.post.id, comment.id, _this10.replyContent);\n            case 11:\n              response = _context1.sent;\n              console.log('回复提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context1.next = 23;\n                break;\n              }\n              // 清空回复状态\n              _this10.replyingTo = null;\n              _this10.replyContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this10.forceRefresh = true;\n              _context1.next = 20;\n              return _this10.fetchComments(_this10.post.id);\n            case 20:\n              // 只有在确认获取到回复数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新回复数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this10.$store.getters.userInfo; // 构建回复对象\n                newReply = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新回复添加到对应评论的回复列表（如果不在列表中）\n                if (!comment.replies) {\n                  comment.replies = [];\n                }\n                existingReply = comment.replies.find(function (r) {\n                  return r.id === newReply.id;\n                });\n                if (!existingReply) {\n                  comment.replies.push(newReply);\n                  console.log('新回复已添加到列表');\n                }\n              }\n              _context1.next = 25;\n              break;\n            case 23:\n              console.error('回复发表失败，响应:', response);\n              _this10.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '回复发表失败');\n            case 25:\n              _context1.next = 33;\n              break;\n            case 27:\n              _context1.prev = 27;\n              _context1.t0 = _context1[\"catch\"](7);\n              console.error('回复发表失败:', _context1.t0);\n              _this10.$message.error('回复发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this10.forceRefresh = true;\n              _this10.fetchComments(_this10.post.id);\n            case 33:\n            case \"end\":\n              return _context1.stop();\n          }\n        }, _callee1, null, [[7, 27]]);\n      }))();\n    },\n    // 判断是否可以管理评论\n    canManageComment: function canManageComment(comment) {\n      return this.isLogin && (this.isAdmin || comment.user && comment.user.id === this.userId);\n    },\n    // 删除评论\n    handleDeleteComment: function handleDeleteComment(comment) {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _error$response$data;\n        var commentId, hasReplies, confirmMessage, loading, response;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              // 打印评论对象，用于调试\n              console.log('要删除的评论对象:', comment);\n\n              // 确保评论对象和ID存在\n              if (comment) {\n                _context10.next = 5;\n                break;\n              }\n              _this11.$message.error('评论数据无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 5:\n              // 获取评论ID，支持字符串和数字类型\n              commentId = comment.id ? parseInt(comment.id) : null;\n              if (commentId) {\n                _context10.next = 9;\n                break;\n              }\n              _this11.$message.error('评论ID无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 9:\n              // 判断是否有回复，提供更详细的确认信息\n              hasReplies = comment.replies && comment.replies.length > 0;\n              confirmMessage = hasReplies ? \"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u8FD9\\u6761\\u8BC4\\u8BBA\\u5417\\uFF1F\\u5220\\u9664\\u540E\\u5C06\\u540C\\u65F6\\u5220\\u9664\\u8BE5\\u8BC4\\u8BBA\\u4E0B\\u7684 \".concat(comment.replies.length, \" \\u6761\\u56DE\\u590D\\uFF0C\\u4E14\\u65E0\\u6CD5\\u6062\\u590D\\u3002\") : '确定要删除这条评论吗？删除后将无法恢复。';\n              _context10.next = 13;\n              return _this11.$confirm(confirmMessage, '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 13:\n              // 显示加载状态\n              loading = _this11.$loading({\n                lock: true,\n                text: '正在删除评论...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context10.prev = 14;\n              console.log('发送删除评论请求，ID:', commentId);\n              _context10.next = 18;\n              return deleteComment(commentId);\n            case 18:\n              response = _context10.sent;\n              loading.close(); // 关闭加载状态\n\n              // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n              if (!(response.code === 0 || response.status === 0)) {\n                _context10.next = 28;\n                break;\n              }\n              console.log('评论删除成功，响应:', response);\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this11.forceRefresh = true;\n              _context10.next = 26;\n              return _this11.fetchComments(_this11.post.id);\n            case 26:\n              _context10.next = 33;\n              break;\n            case 28:\n              console.error('评论删除失败，响应:', response);\n              _this11.$message.error(response.msg || '删除失败，请稍后重试');\n\n              // 如果删除失败，也刷新评论列表恢复原状\n              _this11.forceRefresh = true;\n              _context10.next = 33;\n              return _this11.fetchComments(_this11.post.id);\n            case 33:\n              _context10.next = 54;\n              break;\n            case 35:\n              _context10.prev = 35;\n              _context10.t0 = _context10[\"catch\"](14);\n              loading.close();\n              console.error('删除评论失败:', _context10.t0);\n\n              // 如果删除失败，刷新评论列表恢复原状\n              _this11.forceRefresh = true;\n              _context10.next = 42;\n              return _this11.fetchComments(_this11.post.id);\n            case 42:\n              if (!_context10.t0.response) {\n                _context10.next = 53;\n                break;\n              }\n              _context10.t1 = _context10.t0.response.status;\n              _context10.next = _context10.t1 === 403 ? 46 : _context10.t1 === 404 ? 48 : 50;\n              break;\n            case 46:\n              _this11.$message.error('您没有权限删除此评论');\n              return _context10.abrupt(\"break\", 51);\n            case 48:\n              _this11.$message.error('评论不存在或已被删除');\n              return _context10.abrupt(\"break\", 51);\n            case 50:\n              _this11.$message.error(((_error$response$data = _context10.t0.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || '删除失败，请稍后重试');\n            case 51:\n              _context10.next = 54;\n              break;\n            case 53:\n              if (_context10.t0.request) {\n                _this11.$message.error('网络连接失败，请检查网络后重试');\n              } else {\n                _this11.$message.error('删除失败，请稍后重试');\n              }\n            case 54:\n              _context10.next = 62;\n              break;\n            case 56:\n              _context10.prev = 56;\n              _context10.t2 = _context10[\"catch\"](0);\n              if (!(_context10.t2 === 'cancel')) {\n                _context10.next = 60;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 60:\n              console.error('删除评论操作失败:', _context10.t2);\n              _this11.$message.error('操作失败，请稍后重试');\n            case 62:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[0, 56], [14, 35]]);\n      }))();\n    },\n    handleContentChange: function handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n};","map":{"version":3,"names":["getPostDetail","likePost","favoritePost","pinPost","featurePost","deletePost","updatePost","getMockPostDetail","getPostComments","createComment","replyComment","deleteComment","formatDateTime","mapGetters","RichTextEditor","formatDate","date","name","components","data","loading","commentsLoading","post","isLiked","isFavorited","comments","commentsTotal","commentsQuery","page","limit","commentContent","replyingTo","replyContent","forceRefresh","isEditing","editPostSubmitting","editPostForm","title","content","postRules","required","message","trigger","min","max","computed","_objectSpread","isLogin","isAuthenticated","isPostAuthor","user","id","userId","canManagePost","isAdmin","created","postId","$route","params","fetchPostDetail","fetchComments","$router","push","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","errorMessage","mockPost","wrap","_callee$","_context","prev","next","console","log","sent","code","checkLikeAndFavorite","status","_typeof","error","msg","$message","document","referrer","includes","setTimeout","t0","Number","created_at","Date","toISOString","views","likes_count","comments_count","is_pinned","is_featured","board","username","nickname","avatar_url","abrupt","request","finish","stop","_this2","_callee2","_comments","_callee2$","_context2","Promise","resolve","results","map","comment","replies","count","Array","isArray","length","handleCommentsPageChange","goToBoard","handleLike","_this3","_callee3","_callee3$","_context3","warning","query","redirect","fullPath","handleFavorite","_this4","_callee4","_callee4$","_context4","handleCommand","command","_this5","_callee5","_callee5$","_context5","handlePinPost","handleFeaturePost","handleEditPost","_this6","$nextTick","cancelEdit","submitEdit","_this7","_callee6","postData","_callee6$","_context6","trim","updated_at","handleDeletePost","_this8","_callee7","_callee7$","_context7","$confirm","confirmButtonText","cancelButtonText","type","distinguishCancelAndClose","closeOnClickModal","$loading","lock","text","spinner","background","close","go","t1","_this9","_callee8","_callee8$","_context8","_this0","_callee9","_callee9$","_context9","submitComment","_this1","_callee0","userInfo","newComment","existingComment","_callee0$","_context0","$store","getters","find","c","unshift","handleReply","reply","arguments","undefined","concat","cancelReply","submitReply","_this10","_callee1","newReply","existingReply","_callee1$","_context1","parent","r","canManageComment","handleDeleteComment","_this11","_callee10","_error$response$data","commentId","hasReplies","confirmMessage","_callee10$","_context10","parseInt","t2","handleContentChange","value"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <!-- 非编辑状态下的标题 -->\n          <h1 v-if=\"!isEditing\" class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <!-- 编辑状态下的标题输入框 -->\n          <div v-else class=\"post-title-edit\">\n            <el-input v-model=\"editPostForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n          </div>\n\n          <div class=\"post-meta\">\n            <div class=\"post-author\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <i class=\"el-icon-s-grid\"></i>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 非编辑状态下的内容 -->\n        <div v-if=\"!isEditing\" class=\"post-content\" v-html=\"post.content\"></div>\n\n        <!-- 编辑状态下的内容输入框 -->\n        <div v-else class=\"post-content-edit\">\n          <el-input\n            v-model=\"editPostForm.title\"\n            placeholder=\"请输入帖子标题\"\n          ></el-input>\n          <rich-text-editor\n            v-model=\"editPostForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n          <!-- 编辑状态下的操作按钮 -->\n          <div class=\"edit-actions\">\n            <el-button @click=\"cancelEdit\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitEdit\" :loading=\"editPostSubmitting\">提交</el-button>\n          </div>\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n            <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n            <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditPost\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeletePost\"\n              >\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-star-on\"\n                @click=\"handleLike\"\n              >\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-collection-tag\"\n                @click=\"handleFavorite\"\n              >\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\" icon=\"el-icon-setting\">\n                管理\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <i class=\"el-icon-chat-dot-round\"></i>\n        <p v-if=\"isLogin\">暂无评论，快来发表第一条评论吧！</p>\n        <p v-else>暂无评论，登录后可以发表评论</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\n          <div class=\"comment-header\">\n            <div class=\"comment-user\">\n              <el-avatar :size=\"40\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"comment-user-info\">\n                <div class=\"comment-username\">{{ comment.user.nickname || comment.user.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\" v-if=\"canManageComment(comment)\">\n              <el-button type=\"text\" size=\"small\" @click=\"handleDeleteComment(comment)\">删除</el-button>\n            </div>\n          </div>\n          <div class=\"comment-content\">{{ comment.content }}</div>\n          <div class=\"comment-footer\">\n            <el-button v-if=\"isLogin\" type=\"text\" size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button type=\"primary\" size=\"small\" @click=\"submitReply(comment)\" :disabled=\"!replyContent.trim()\">提交回复</el-button>\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div v-for=\"reply in comment.replies\" :key=\"reply.id\" class=\"reply-item\">\n              <div class=\"reply-header\">\n                <div class=\"reply-user\">\n                  <el-avatar :size=\"30\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"reply-user-info\">\n                    <div class=\"reply-username\">{{ reply.user.nickname || reply.user.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\" v-if=\"canManageComment(reply)\">\n                  <el-button type=\"text\" size=\"small\" @click=\"handleDeleteComment(reply)\">删除</el-button>\n                </div>\n              </div>\n              <div class=\"reply-content\">{{ reply.content }}</div>\n              <div class=\"reply-footer\">\n                <el-button v-if=\"isLogin\" type=\"text\" size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          :current-page=\"commentsQuery.page\"\n          @update:current-page=\"val => commentsQuery.page = val\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost, getMockPostDetail } from '@/api/post'\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n\n      forceRefresh: false, // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false, // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '标题长度在2到100个字符之间', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 5, message: '内容至少5个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    const postId = this.$route.params.id\n    if (postId) {\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        console.log('开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        console.log('帖子详情响应:', response)\n\n        if (response && response.code === 0 && response.data) {\n          console.log('使用code=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else if (response && response.status === 0 && response.data) {\n          console.log('使用status=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else if (response && typeof response === 'object') {\n          // 尝试直接使用响应对象作为帖子数据\n          console.log('尝试直接使用响应对象作为帖子数据')\n          this.post = response\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else {\n          console.error('获取帖子详情失败:', response ? response.msg : '未知错误')\n          this.$message.error(response?.msg || '获取帖子详情失败')\n\n          // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n          // 添加延时重试\n          if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n            console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情')\n            setTimeout(() => {\n              this.fetchPostDetail(id)\n            }, 1000)\n          } else {\n            // 如果不是从发帖页面跳转，则返回帖子列表\n            setTimeout(() => {\n              this.$router.push({ name: 'PostList' })\n            }, 1500)\n          }\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        \n        // 增强错误处理，显示更具体的错误信息\n        let errorMessage = '获取帖子详情失败，请稍后重试'\n        \n        if (error.response) {\n          // 服务器返回了错误状态码\n          if (error.response.status === 500) {\n            errorMessage = '服务器内部错误，请联系管理员'\n            console.error('服务器内部错误详情:', error.response.data)\n          } else if (error.response.status === 404) {\n            errorMessage = '帖子不存在或已被删除'\n          } else if (error.response.status === 401 || error.response.status === 403) {\n            // 未登录用户应该可以查看帖子，不应该跳转到登录页\n            console.log('未登录用户尝试查看帖子，继续显示帖子内容')\n            // 使用模拟数据\n            const mockPost = getMockPostDetail ? getMockPostDetail(id) : {\n              id: Number(id),\n              title: '帖子内容',\n              content: '帖子内容加载失败，请登录后查看',\n              created_at: new Date().toISOString(),\n              views: 0,\n              likes_count: 0,\n              comments_count: 0,\n              is_pinned: false,\n              is_featured: false,\n              board: { id: 1, name: '默认板块' },\n              user: {\n                id: 1,\n                username: 'user',\n                nickname: '用户',\n                avatar_url: ''\n              }\n            };\n            this.post = mockPost;\n            this.loading = false;\n            return;\n          } else if (error.response.data && error.response.data.msg) {\n            errorMessage = error.response.data.msg\n          }\n        } else if (error.request) {\n          // 请求已发送但没有收到响应\n          errorMessage = '服务器无响应，请检查网络连接'\n        }\n        \n        this.$message.error(errorMessage)\n        \n        // 等待一段时间后返回帖子列表\n        setTimeout(() => {\n          this.$router.push({ name: 'PostList' })\n        }, 1500)\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite() {\n      // 未登录用户默认未点赞和未收藏\n      if (!this.isLogin) {\n        console.log('未登录用户，设置为未点赞和未收藏状态')\n        this.isLiked = false\n        this.isFavorited = false\n        return\n      }\n      \n      // 登录用户需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      console.log('已登录用户，检查点赞和收藏状态')\n      this.isLiked = false\n      this.isFavorited = false\n      \n      // TODO: 实现实际的点赞和收藏状态检查\n      // 实现示例:\n      // checkPostLikeStatus(this.post.id).then(response => {\n      //   this.isLiked = response.data.is_liked\n      // })\n      // checkPostFavoriteStatus(this.post.id).then(response => {\n      //   this.isFavorited = response.data.is_favorited\n      // })\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n      console.log('开始获取评论列表，强制刷新:', this.forceRefresh)\n\n      try {\n        // 使用API函数的forceRefresh参数\n        const response = await getPostComments(postId, this.forceRefresh)\n        \n        if (response.code === 0 || response.status === 0) {\n          console.log('获取评论列表成功，数据:', response.data)\n          // 确保评论数据格式正确\n          const comments = response.data.results || []\n          \n          // 完全替换评论数据，而不是合并\n          this.comments = comments.map(comment => ({\n            ...comment,\n            replies: comment.replies || []\n          }))\n          \n          this.commentsTotal = response.data.count || 0\n\n          // 更新帖子评论数，确保与后端同步\n          if (this.post && typeof response.data.count === 'number') {\n            this.post.comments_count = response.data.count\n          }\n        } else if (response && response.results) {\n          // 直接返回的分页结果\n          console.log('获取评论列表成功，直接结果数据:', response)\n          const comments = response.results || []\n          \n          this.comments = comments.map(comment => ({\n            ...comment,\n            replies: comment.replies || []\n          }))\n          \n          this.commentsTotal = response.count || 0\n\n          // 更新帖子评论数\n          if (this.post && typeof response.count === 'number') {\n            this.post.comments_count = response.count\n          }\n        } else if (Array.isArray(response)) {\n          // 直接返回的数组\n          console.log('获取评论列表成功，直接数组数据:', response)\n          this.comments = response.map(comment => ({\n            ...comment,\n            replies: comment.replies || []\n          }))\n          \n          this.commentsTotal = response.length\n\n          // 更新帖子评论数\n          if (this.post) {\n            this.post.comments_count = response.length\n          }\n        } else {\n          console.error('获取评论列表失败，响应:', response)\n          if (response && response.msg && response.msg.includes('未登录')) {\n            console.log('未登录用户，不显示评论加载失败提示')\n            // 未登录用户不显示错误提示，只显示评论区登录提示\n          } else {\n            this.$message.error(response && response.msg ? response.msg : '获取评论列表失败')\n          }\n        }\n      } catch (error) {\n        console.error('获取评论列表失败:', error)\n        if (error.response && error.response.status === 401) {\n          console.log('未登录用户，不显示评论加载失败提示')\n          // 未登录用户不显示错误提示，只显示评论区登录提示\n        } else {\n          this.$message.error('获取评论列表失败，请刷新页面重试')\n        }\n      } finally {\n        this.commentsLoading = false\n        this.forceRefresh = false // 重置强制刷新标志\n        console.log('评论列表获取完成，重置强制刷新标志')\n      }\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        if (response.code === 0) {\n          this.isLiked = !this.isLiked\n          // 更新点赞数\n          if (this.isLiked) {\n            this.post.likes_count++\n          } else {\n            this.post.likes_count--\n          }\n          // this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('点赞操作失败:', error)\n        this.$message.error('点赞操作失败')\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await favoritePost(this.post.id)\n        if (response.code === 0) {\n          this.isFavorited = !this.isFavorited\n          // this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        this.$message.error('收藏操作失败')\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    },\n\n    // 编辑帖子\n    handleEditPost() {\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n      \n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n      \n      // 进入编辑状态\n      this.isEditing = true;\n      \n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(() => {\n        console.log('编辑表单数据设置完成:', this.editPostForm);\n      });\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false\n      // 重置表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n    },\n\n    // 提交编辑\n    async submitEdit() {\n      // 表单验证\n      if (!this.editPostForm.title.trim()) {\n        this.$message.warning('标题不能为空')\n        return\n      }\n\n      if (!this.editPostForm.content.trim()) {\n        this.$message.warning('内容不能为空')\n        return\n      }\n\n      this.editPostSubmitting = true\n      try {\n        // 确保发送正确的数据格式\n        const postData = {\n          title: this.editPostForm.title.trim(),\n          content: this.editPostForm.content.trim(),\n          board: this.post.board.id // 需要包含板块ID\n        }\n\n        console.log('提交更新帖子数据:', postData)\n\n        const response = await updatePost(this.post.id, postData)\n\n        if (response && response.code === 0) {\n          // 更新成功\n          // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n          // 更新当前页面的帖子数据\n          this.post.title = this.editPostForm.title\n          this.post.content = this.editPostForm.content\n          // 更新帖子的更新时间\n          if (response.data && response.data.updated_at) {\n            this.post.updated_at = response.data.updated_at\n          }\n\n          // 强制退出编辑状态\n          console.log('强制退出编辑状态')\n          // 使用直接赋值和延时双重保险确保状态更新\n          this.isEditing = false\n\n          // 如果直接赋值不起作用，使用延时函数再次尝试\n          setTimeout(() => {\n            if (this.isEditing) {\n              console.log('使用setTimeout再次尝试退出编辑状态')\n              this.isEditing = false\n            }\n            console.log('编辑状态最终设置为:', this.isEditing)\n          }, 100)\n        } else {\n          this.$message.error(response?.msg || '更新失败，请稍后重试')\n          // 失败时也退出编辑状态\n          this.isEditing = false\n          setTimeout(() => {\n            if (this.isEditing) {\n              this.isEditing = false\n            }\n          }, 100)\n        }\n      } catch (error) {\n        console.error('更新帖子失败:', error)\n        this.$message.error('更新帖子失败，请检查网络连接')\n\n        // 出错时也退出编辑状态\n        this.isEditing = false\n        setTimeout(() => {\n          if (this.isEditing) {\n            this.isEditing = false\n          }\n        }, 100)\n      } finally {\n        this.editPostSubmitting = false\n      }\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回上一级路由\n            console.log('帖子删除成功，正在返回上一级路由...')\n            // 返回上一级路由\n            this.$router.go(-1)\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        console.log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到评论数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新评论数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              replies: [],\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新评论添加到评论列表的开头（如果不在列表中）\n            const existingComment = this.comments.find(c => c.id === newComment.id)\n            if (!existingComment) {\n              this.comments.unshift(newComment);\n              console.log('新评论已添加到列表')\n            }\n          }\n        } else {\n          console.error('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        console.error('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        console.log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到回复数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新回复数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新回复添加到对应评论的回复列表（如果不在列表中）\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            \n            const existingReply = comment.replies.find(r => r.id === newReply.id)\n            if (!existingReply) {\n              comment.replies.push(newReply);\n              console.log('新回复已添加到列表')\n            }\n          }\n        } else {\n          console.error('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        console.error('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 打印评论对象，用于调试\n        console.log('要删除的评论对象:', comment)\n\n        // 确保评论对象和ID存在\n        if (!comment) {\n          this.$message.error('评论数据无效，无法删除')\n          return\n        }\n\n        // 获取评论ID，支持字符串和数字类型\n        const commentId = comment.id ? parseInt(comment.id) : null\n        if (!commentId) {\n          this.$message.error('评论ID无效，无法删除')\n          return\n        }\n\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          console.log('发送删除评论请求，ID:', commentId)\n          const response = await deleteComment(commentId)\n          loading.close() // 关闭加载状态\n\n          // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n          if (response.code === 0 || response.status === 0) {\n            console.log('评论删除成功，响应:', response)\n            \n            // 无论如何，强制刷新评论列表以确保同步\n            console.log('强制刷新评论列表以确保与数据库同步')\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          } else {\n            console.error('评论删除失败，响应:', response)\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n            \n            // 如果删除失败，也刷新评论列表恢复原状\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          }\n        } catch (error) {\n          loading.close()\n          console.error('删除评论失败:', error)\n          \n          // 如果删除失败，刷新评论列表恢复原状\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n          \n          // 根据错误类型显示不同的错误信息\n          if (error.response) {\n            switch (error.response.status) {\n              case 403:\n                this.$message.error('您没有权限删除此评论')\n                break\n              case 404:\n                this.$message.error('评论不存在或已被删除')\n                break\n              default:\n                this.$message.error(error.response.data?.msg || '删除失败，请稍后重试')\n            }\n          } else if (error.request) {\n            this.$message.error('网络连接失败，请检查网络后重试')\n          } else {\n            this.$message.error('删除失败，请稍后重试')\n          }\n        }\n      } catch (error) {\n        // 用户取消删除操作\n        if (error === 'cancel') {\n          return\n        }\n        console.error('删除评论操作失败:', error)\n        this.$message.error('操作失败，请稍后重试')\n      }\n    },\n\n    handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  margin-top: 20px;\n  line-height: 1.6;\n  word-break: break-word;\n}\n\n.post-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  margin: 10px 0;\n}\n\n.post-content :deep(p) {\n  margin: 10px 0;\n}\n\n.post-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 10px 0;\n}\n\n.post-content :deep(th),\n.post-content :deep(td) {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\n.post-content :deep(th) {\n  background-color: #f5f5f5;\n}\n\n.post-content :deep(blockquote) {\n  margin: 10px 0;\n  padding: 10px 20px;\n  border-left: 4px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.post-content :deep(pre) {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n}\n\n.post-content :deep(code) {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  margin-top: 10px;\n  color: #909399;\n  font-size: 14px;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.login-tip a:hover {\n  text-decoration: underline;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n/* 编辑相关样式 */\n.post-title-edit {\n  margin-bottom: 15px;\n}\n\n.post-content-edit {\n  margin-bottom: 20px;\n}\n\n.edit-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 15px;\n  gap: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}