{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.function.name.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar descriptionsRow = require('./descriptions-row2.js');\nvar token = require('./token.js');\nvar description = require('./description2.js');\nvar constants = require('./constants.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar vnode = require('../../../utils/vue/vnode.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElDescriptions\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: description.descriptionProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var ns = index.useNamespace(\"descriptions\");\n    var descriptionsSize = useFormCommonProps.useFormSize();\n    var slots = vue.useSlots();\n    vue.provide(token.descriptionsKey, props);\n    var descriptionKls = vue.computed(function () {\n      return [ns.b(), ns.m(descriptionsSize.value)];\n    });\n    var filledNode = function filledNode(node, span, count) {\n      var isLast = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (!node.props) {\n        node.props = {};\n      }\n      if (span > count) {\n        node.props.span = count;\n      }\n      if (isLast) {\n        node.props.span = span;\n      }\n      return node;\n    };\n    var getRows = function getRows() {\n      if (!slots[\"default\"]) return [];\n      var children = vnode.flattedChildren(slots[\"default\"]()).filter(function (node) {\n        var _a;\n        return ((_a = node == null ? void 0 : node.type) == null ? void 0 : _a.name) === constants.COMPONENT_NAME;\n      });\n      var rows = [];\n      var temp = [];\n      var count = props.column;\n      var totalSpan = 0;\n      var rowspanTemp = [];\n      children.forEach(function (node, index) {\n        var _a, _b, _c;\n        var span = ((_a = node.props) == null ? void 0 : _a.span) || 1;\n        var rowspan = ((_b = node.props) == null ? void 0 : _b.rowspan) || 1;\n        var rowNo = rows.length;\n        rowspanTemp[rowNo] || (rowspanTemp[rowNo] = 0);\n        if (rowspan > 1) {\n          for (var i = 1; i < rowspan; i++) {\n            rowspanTemp[_c = rowNo + i] || (rowspanTemp[_c] = 0);\n            rowspanTemp[rowNo + i]++;\n            totalSpan++;\n          }\n        }\n        if (rowspanTemp[rowNo] > 0) {\n          count -= rowspanTemp[rowNo];\n          rowspanTemp[rowNo] = 0;\n        }\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n        if (index === children.length - 1) {\n          var lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(descriptionKls))\n      }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"header\"))\n      }, [vue.createElementVNode(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"title\"))\n      }, [vue.renderSlot(_ctx.$slots, \"title\", {}, function () {\n        return [vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)];\n      })], 2), vue.createElementVNode(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"extra\"))\n      }, [vue.renderSlot(_ctx.$slots, \"extra\", {}, function () {\n        return [vue.createTextVNode(vue.toDisplayString(_ctx.extra), 1)];\n      })], 2)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"body\"))\n      }, [vue.createElementVNode(\"table\", {\n        \"class\": vue.normalizeClass([vue.unref(ns).e(\"table\"), vue.unref(ns).is(\"bordered\", _ctx.border)])\n      }, [vue.createElementVNode(\"tbody\", null, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(getRows(), function (row, _index) {\n        return vue.openBlock(), vue.createBlock(descriptionsRow[\"default\"], {\n          key: _index,\n          row: row\n        }, null, 8, [\"row\"]);\n      }), 128))])], 2)], 2)], 2);\n    };\n  }\n}));\nvar Descriptions = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"description.vue\"]]);\nexports[\"default\"] = Descriptions;","map":{"version":3,"names":["name","ns","index","useNamespace","descriptionsSize","useFormCommonProps","useFormSize","slots","vue","useSlots","provide","token","descriptionsKey","props","descriptionKls","computed","b","m","value","filledNode","node","span","count","isLast","arguments","length","undefined","getRows","children","vnode","flattedChildren","filter","_a","type","constants","COMPONENT_NAME","rows","temp","column","totalSpan","rowspanTemp","forEach","_b","_c","rowspan","rowNo","i","lastSpan","push"],"sources":["../../../../../../packages/components/descriptions/src/description.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, _index) in getRows()\" :key=\"_index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, useSlots } from 'vue'\nimport { flattedChildren } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport ElDescriptionsRow from './descriptions-row.vue'\nimport { descriptionsKey } from './token'\nimport { descriptionProps } from './description'\nimport { COMPONENT_NAME } from './constants'\n\nimport type { IDescriptionsInject } from './descriptions.type'\nimport type { DescriptionItemVNode } from './description-item'\n\ndefineOptions({\n  name: 'ElDescriptions',\n})\n\nconst props = defineProps(descriptionProps)\n\nconst ns = useNamespace('descriptions')\n\nconst descriptionsSize = useFormSize()\n\nconst slots = useSlots()\n\nprovide(descriptionsKey, props as IDescriptionsInject)\n\nconst descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)])\n\nconst filledNode = (\n  node: DescriptionItemVNode,\n  span: number,\n  count: number,\n  isLast = false\n) => {\n  if (!node.props) {\n    node.props = {}\n  }\n  if (span > count) {\n    node.props.span = count\n  }\n  if (isLast) {\n    // set the last span\n    node.props.span = span\n  }\n  return node\n}\n\nconst getRows = () => {\n  if (!slots.default) return []\n\n  const children = flattedChildren(slots.default()).filter(\n    (node): node is DescriptionItemVNode =>\n      (node as any)?.type?.name === COMPONENT_NAME\n  )\n  const rows: DescriptionItemVNode[][] = []\n  let temp: DescriptionItemVNode[] = []\n  let count = props.column\n  let totalSpan = 0 // all spans number of item\n  const rowspanTemp: number[] = [] // the number of row spans\n\n  children.forEach((node, index) => {\n    const span = node.props?.span || 1\n    const rowspan = node.props?.rowspan || 1\n    const rowNo = rows.length\n    rowspanTemp[rowNo] ||= 0\n\n    if (rowspan > 1) {\n      for (let i = 1; i < rowspan; i++) {\n        rowspanTemp[rowNo + i] ||= 0\n        rowspanTemp[rowNo + i]++\n        totalSpan++\n      }\n    }\n    if (rowspanTemp[rowNo] > 0) {\n      count -= rowspanTemp[rowNo]\n      rowspanTemp[rowNo] = 0\n    }\n    if (index < children.length - 1) {\n      totalSpan += span > count ? count : span\n    }\n\n    if (index === children.length - 1) {\n      // calculate the last item span\n      const lastSpan = props.column - (totalSpan % props.column)\n      temp.push(filledNode(node, lastSpan, count, true))\n      rows.push(temp)\n      return\n    }\n\n    if (span < count) {\n      count -= span\n      temp.push(node)\n    } else {\n      temp.push(filledNode(node, span, count))\n      rows.push(temp)\n      count = props.column\n      temp = []\n    }\n  })\n\n  return rows\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}