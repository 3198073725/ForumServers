{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.error.to-string.js\");\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.includes.js\");\nrequire(\"core-js/modules/es.array.map.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.iterator.map.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.keys.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar util = require('../util.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../../utils/types.js');\nfunction useTree(watcherData) {\n  var expandRowKeys = vue.ref([]);\n  var treeData = vue.ref({});\n  var indent = vue.ref(16);\n  var lazy = vue.ref(false);\n  var lazyTreeNodeMap = vue.ref({});\n  var lazyColumnIdentifier = vue.ref(\"hasChildren\");\n  var childrenColumnName = vue.ref(\"children\");\n  var checkStrictly = vue.ref(false);\n  var instance = vue.getCurrentInstance();\n  var normalizedData = vue.computed(function () {\n    if (!watcherData.rowKey.value) return {};\n    var data = watcherData.data.value || [];\n    return normalize(data);\n  });\n  var normalizedLazyNode = vue.computed(function () {\n    var rowKey = watcherData.rowKey.value;\n    var keys = Object.keys(lazyTreeNodeMap.value);\n    var res = {};\n    if (!keys.length) return res;\n    keys.forEach(function (key) {\n      if (lazyTreeNodeMap.value[key].length) {\n        var item = {\n          children: []\n        };\n        lazyTreeNodeMap.value[key].forEach(function (row) {\n          var currentRowKey = util.getRowIdentity(row, rowKey);\n          item.children.push(currentRowKey);\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = {\n              children: []\n            };\n          }\n        });\n        res[key] = item;\n      }\n    });\n    return res;\n  });\n  var normalize = function normalize(data) {\n    var rowKey = watcherData.rowKey.value;\n    var res = {};\n    util.walkTreeNode(data, function (parent, children, level) {\n      var parentId = util.getRowIdentity(parent, rowKey);\n      if (shared.isArray(children)) {\n        res[parentId] = {\n          children: children.map(function (row) {\n            return util.getRowIdentity(row, rowKey);\n          }),\n          level: level\n        };\n      } else if (lazy.value) {\n        res[parentId] = {\n          children: [],\n          lazy: true,\n          level: level\n        };\n      }\n    }, childrenColumnName.value, lazyColumnIdentifier.value);\n    return res;\n  };\n  var isInitTree = true;\n  var updateTreeData = function updateTreeData() {\n    var ifChangeExpandRowKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _a, _b;\n    var nested = normalizedData.value;\n    var normalizedLazyNode_ = normalizedLazyNode.value;\n    var keys = Object.keys(nested);\n    var newTreeData = {};\n    var ifExpandAll = ((_a = instance.store) == null ? void 0 : _a.states.defaultExpandAll.value) && isInitTree;\n    isInitTree = false;\n    if (keys.length) {\n      var oldTreeData = vue.unref(treeData);\n      var rootLazyRowKeys = [];\n      var getExpanded = function getExpanded(oldValue, key) {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value.length) {\n            return ifExpandAll || expandRowKeys.value.includes(key);\n          } else {\n            return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));\n          }\n        } else {\n          var included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);\n          return !!((oldValue == null ? void 0 : oldValue.expanded) || included);\n        }\n      };\n      keys.forEach(function (key) {\n        var oldValue = oldTreeData[key];\n        var newValue = _objectSpread({}, nested[key]);\n        newValue.expanded = getExpanded(oldValue, key);\n        if (newValue.lazy) {\n          var _ref = oldValue || {},\n            _ref$loaded = _ref.loaded,\n            loaded = _ref$loaded === void 0 ? false : _ref$loaded,\n            _ref$loading = _ref.loading,\n            loading = _ref$loading === void 0 ? false : _ref$loading;\n          newValue.loaded = !!loaded;\n          newValue.loading = !!loading;\n          rootLazyRowKeys.push(key);\n        }\n        newTreeData[key] = newValue;\n      });\n      var lazyKeys = Object.keys(normalizedLazyNode_);\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach(function (key) {\n          var oldValue = oldTreeData[key];\n          var lazyNodeChildren = normalizedLazyNode_[key].children;\n          if (rootLazyRowKeys.includes(key)) {\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error(\"[ElTable]children must be an empty array.\");\n            }\n            newTreeData[key].children = lazyNodeChildren;\n          } else {\n            var _ref2 = oldValue || {},\n              _ref2$loaded = _ref2.loaded,\n              loaded = _ref2$loaded === void 0 ? false : _ref2$loaded,\n              _ref2$loading = _ref2.loading,\n              loading = _ref2$loading === void 0 ? false : _ref2$loading;\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: \"\"\n            };\n          }\n        });\n      }\n    }\n    treeData.value = newTreeData;\n    (_b = instance.store) == null ? void 0 : _b.updateTableScrollY();\n  };\n  vue.watch(function () {\n    return expandRowKeys.value;\n  }, function () {\n    updateTreeData(true);\n  });\n  vue.watch(function () {\n    return normalizedData.value;\n  }, function () {\n    updateTreeData();\n  });\n  vue.watch(function () {\n    return normalizedLazyNode.value;\n  }, function () {\n    updateTreeData();\n  });\n  var updateTreeExpandKeys = function updateTreeExpandKeys(value) {\n    expandRowKeys.value = value;\n    updateTreeData();\n  };\n  var isUseLazy = function isUseLazy(data) {\n    return lazy.value && data && \"loaded\" in data && !data.loaded;\n  };\n  var toggleTreeExpansion = function toggleTreeExpansion(row, expanded) {\n    instance.store.assertRowKey();\n    var rowKey = watcherData.rowKey.value;\n    var id = util.getRowIdentity(row, rowKey);\n    var data = id && treeData.value[id];\n    if (id && data && \"expanded\" in data) {\n      var oldExpanded = data.expanded;\n      expanded = types.isUndefined(expanded) ? !data.expanded : expanded;\n      treeData.value[id].expanded = expanded;\n      if (oldExpanded !== expanded) {\n        instance.emit(\"expand-change\", row, expanded);\n      }\n      isUseLazy(data) && loadData(row, id, data);\n      instance.store.updateTableScrollY();\n    }\n  };\n  var loadOrToggle = function loadOrToggle(row) {\n    instance.store.assertRowKey();\n    var rowKey = watcherData.rowKey.value;\n    var id = util.getRowIdentity(row, rowKey);\n    var data = treeData.value[id];\n    if (isUseLazy(data)) {\n      loadData(row, id, data);\n    } else {\n      toggleTreeExpansion(row, void 0);\n    }\n  };\n  var loadData = function loadData(row, key, treeNode) {\n    var load = instance.props.load;\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true;\n      load(row, treeNode, function (data) {\n        if (!shared.isArray(data)) {\n          throw new TypeError(\"[ElTable] data must be an array\");\n        }\n        treeData.value[key].loading = false;\n        treeData.value[key].loaded = true;\n        treeData.value[key].expanded = true;\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data;\n        }\n        instance.emit(\"expand-change\", row, true);\n      });\n    }\n  };\n  var updateKeyChildren = function updateKeyChildren(key, data) {\n    var _instance$props = instance.props,\n      lazy2 = _instance$props.lazy,\n      rowKey = _instance$props.rowKey;\n    if (!lazy2) return;\n    if (!rowKey) throw new Error(\"[Table] rowKey is required in updateKeyChild\");\n    if (lazyTreeNodeMap.value[key]) {\n      lazyTreeNodeMap.value[key] = data;\n    }\n  };\n  return {\n    loadData: loadData,\n    loadOrToggle: loadOrToggle,\n    toggleTreeExpansion: toggleTreeExpansion,\n    updateTreeExpandKeys: updateTreeExpandKeys,\n    updateTreeData: updateTreeData,\n    updateKeyChildren: updateKeyChildren,\n    normalize: normalize,\n    states: {\n      expandRowKeys: expandRowKeys,\n      treeData: treeData,\n      indent: indent,\n      lazy: lazy,\n      lazyTreeNodeMap: lazyTreeNodeMap,\n      lazyColumnIdentifier: lazyColumnIdentifier,\n      childrenColumnName: childrenColumnName,\n      checkStrictly: checkStrictly\n    }\n  };\n}\nexports[\"default\"] = useTree;","map":{"version":3,"names":["useTree","watcherData","expandRowKeys","vue","ref","treeData","indent","lazy","lazyTreeNodeMap","lazyColumnIdentifier","childrenColumnName","checkStrictly","instance","getCurrentInstance","normalizedData","computed","rowKey","value","data","normalize","normalizedLazyNode","keys","Object","res","length","forEach","key","item","children","row","currentRowKey","util","getRowIdentity","push","walkTreeNode","parent","level","parentId","shared","isArray","map","isInitTree","updateTreeData","ifChangeExpandRowKeys","arguments","undefined","_a","_b","nested","normalizedLazyNode_","newTreeData","ifExpandAll","store","states","defaultExpandAll","oldTreeData","unref","rootLazyRowKeys","getExpanded","oldValue","includes","expanded","included","newValue","_objectSpread","_ref","_ref$loaded","loaded","_ref$loading","loading","lazyKeys","lazyNodeChildren","Error","_ref2","_ref2$loaded","_ref2$loading","updateTableScrollY","watch","updateTreeExpandKeys","isUseLazy","toggleTreeExpansion","assertRowKey","id","oldExpanded","types","isUndefined","emit","loadData","loadOrToggle","treeNode","load","props","TypeError","updateKeyChildren","_instance$props","lazy2"],"sources":["../../../../../../../packages/components/table/src/store/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, getCurrentInstance, ref, unref, watch } from 'vue'\nimport { isArray, isUndefined } from '@element-plus/utils'\nimport { getRowIdentity, walkTreeNode } from '../util'\n\nimport type { WatcherPropsData } from '.'\nimport type { Table, TableProps } from '../table/defaults'\n\nfunction useTree<T>(watcherData: WatcherPropsData<T>) {\n  const expandRowKeys = ref<string[]>([])\n  const treeData = ref<unknown>({})\n  const indent = ref(16)\n  const lazy = ref(false)\n  const lazyTreeNodeMap = ref({})\n  const lazyColumnIdentifier = ref('hasChildren')\n  const childrenColumnName = ref('children')\n  const checkStrictly = ref(false)\n  const instance = getCurrentInstance() as Table<T>\n  const normalizedData = computed(() => {\n    if (!watcherData.rowKey.value) return {}\n    const data = watcherData.data.value || []\n    return normalize(data)\n  })\n  const normalizedLazyNode = computed(() => {\n    const rowKey = watcherData.rowKey.value\n    const keys = Object.keys(lazyTreeNodeMap.value)\n    const res = {}\n    if (!keys.length) return res\n    keys.forEach((key) => {\n      if (lazyTreeNodeMap.value[key].length) {\n        const item = { children: [] }\n        lazyTreeNodeMap.value[key].forEach((row) => {\n          const currentRowKey = getRowIdentity(row, rowKey)\n          item.children.push(currentRowKey)\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = { children: [] }\n          }\n        })\n        res[key] = item\n      }\n    })\n    return res\n  })\n\n  const normalize = (data) => {\n    const rowKey = watcherData.rowKey.value\n    const res = {}\n    walkTreeNode(\n      data,\n      (parent, children, level) => {\n        const parentId = getRowIdentity(parent, rowKey)\n        if (isArray(children)) {\n          res[parentId] = {\n            children: children.map((row) => getRowIdentity(row, rowKey)),\n            level,\n          }\n        } else if (lazy.value) {\n          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点\n          res[parentId] = {\n            children: [],\n            lazy: true,\n            level,\n          }\n        }\n      },\n      childrenColumnName.value,\n      lazyColumnIdentifier.value\n    )\n    return res\n  }\n\n  let isInitTree = true\n  const updateTreeData = (ifChangeExpandRowKeys = false) => {\n    const nested = normalizedData.value\n    const normalizedLazyNode_ = normalizedLazyNode.value\n    const keys = Object.keys(nested)\n    const newTreeData = {}\n    const ifExpandAll =\n      instance.store?.states.defaultExpandAll.value && isInitTree\n    isInitTree = false\n    if (keys.length) {\n      const oldTreeData = unref(treeData)\n      const rootLazyRowKeys = []\n      const getExpanded = (oldValue, key) => {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value.length) {\n            return ifExpandAll || expandRowKeys.value.includes(key)\n          } else {\n            return !!(ifExpandAll || oldValue?.expanded)\n          }\n        } else {\n          const included =\n            ifExpandAll ||\n            (expandRowKeys.value && expandRowKeys.value.includes(key))\n          return !!(oldValue?.expanded || included)\n        }\n      }\n      // 合并 expanded 与 display，确保数据刷新后，状态不变\n      keys.forEach((key) => {\n        const oldValue = oldTreeData[key]\n        const newValue = { ...nested[key] }\n        newValue.expanded = getExpanded(oldValue, key)\n        if (newValue.lazy) {\n          const { loaded = false, loading = false } = oldValue || {}\n          newValue.loaded = !!loaded\n          newValue.loading = !!loading\n          rootLazyRowKeys.push(key)\n        }\n        newTreeData[key] = newValue\n      })\n      // 根据懒加载数据更新 treeData\n      const lazyKeys = Object.keys(normalizedLazyNode_)\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach((key) => {\n          const oldValue = oldTreeData[key]\n          const lazyNodeChildren = normalizedLazyNode_[key].children\n          if (rootLazyRowKeys.includes(key)) {\n            // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error('[ElTable]children must be an empty array.')\n            }\n            newTreeData[key].children = lazyNodeChildren\n          } else {\n            const { loaded = false, loading = false } = oldValue || {}\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: '',\n            }\n          }\n        })\n      }\n    }\n    treeData.value = newTreeData\n    instance.store?.updateTableScrollY()\n  }\n\n  watch(\n    () => expandRowKeys.value,\n    () => {\n      updateTreeData(true)\n    }\n  )\n\n  watch(\n    () => normalizedData.value,\n    () => {\n      updateTreeData()\n    }\n  )\n  watch(\n    () => normalizedLazyNode.value,\n    () => {\n      updateTreeData()\n    }\n  )\n\n  const updateTreeExpandKeys = (value: string[]) => {\n    expandRowKeys.value = value\n    updateTreeData()\n  }\n  const isUseLazy = (data): boolean => {\n    return lazy.value && data && 'loaded' in data && !data.loaded\n  }\n  const toggleTreeExpansion = (row: T, expanded?: boolean) => {\n    instance.store.assertRowKey()\n\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = id && treeData.value[id]\n    if (id && data && 'expanded' in data) {\n      const oldExpanded = data.expanded\n      expanded = isUndefined(expanded) ? !data.expanded : expanded\n      treeData.value[id].expanded = expanded\n      if (oldExpanded !== expanded) {\n        instance.emit('expand-change', row, expanded)\n      }\n      isUseLazy(data) && loadData(row, id, data)\n      instance.store.updateTableScrollY()\n    }\n  }\n\n  const loadOrToggle = (row) => {\n    instance.store.assertRowKey()\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = treeData.value[id]\n    if (isUseLazy(data)) {\n      loadData(row, id, data)\n    } else {\n      toggleTreeExpansion(row, undefined)\n    }\n  }\n\n  const loadData = (row: T, key: string, treeNode) => {\n    const { load } = instance.props as unknown as TableProps<T>\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true\n      load(row, treeNode, (data) => {\n        if (!isArray(data)) {\n          throw new TypeError('[ElTable] data must be an array')\n        }\n        treeData.value[key].loading = false\n        treeData.value[key].loaded = true\n        treeData.value[key].expanded = true\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data\n        }\n        instance.emit('expand-change', row, true)\n      })\n    }\n  }\n\n  const updateKeyChildren = (key: string, data: T[]) => {\n    const { lazy, rowKey } = instance.props as unknown as TableProps<T>\n    if (!lazy) return\n    if (!rowKey) throw new Error('[Table] rowKey is required in updateKeyChild')\n\n    if (lazyTreeNodeMap.value[key]) {\n      lazyTreeNodeMap.value[key] = data\n    }\n  }\n\n  return {\n    loadData,\n    loadOrToggle,\n    toggleTreeExpansion,\n    updateTreeExpandKeys,\n    updateTreeData,\n    updateKeyChildren,\n    normalize,\n    states: {\n      expandRowKeys,\n      treeData,\n      indent,\n      lazy,\n      lazyTreeNodeMap,\n      lazyColumnIdentifier,\n      childrenColumnName,\n      checkStrictly,\n    },\n  }\n}\n\nexport default useTree\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,OAAOA,CAACC,WAAW,EAAE;EAC5B,IAAMC,aAAa,GAAGC,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EAC7B,IAAMC,QAAQ,GAAGF,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EACxB,IAAME,MAAM,GAAGH,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EACtB,IAAMG,IAAI,GAAGJ,GAAA,CAAAC,GAAG,CAAC,KAAK,CAAC;EACvB,IAAMI,eAAe,GAAGL,GAAA,CAAAC,GAAG,CAAC,EAAE,CAAC;EAC/B,IAAMK,oBAAoB,GAAGN,GAAA,CAAAC,GAAG,CAAC,aAAa,CAAC;EAC/C,IAAMM,kBAAkB,GAAGP,GAAA,CAAAC,GAAG,CAAC,UAAU,CAAC;EAC1C,IAAMO,aAAa,GAAGR,GAAA,CAAAC,GAAG,CAAC,KAAK,CAAC;EAChC,IAAMQ,QAAQ,GAAGT,GAAA,CAAAU,kBAAkB,EAAE;EACrC,IAAMC,cAAc,GAAGX,GAAA,CAAAY,QAAQ,CAAC,YAAM;IACpC,IAAI,CAACd,WAAW,CAACe,MAAM,CAACC,KAAK,EAC3B,OAAO,EAAE;IACX,IAAMC,IAAI,GAAGjB,WAAW,CAACiB,IAAI,CAACD,KAAK,IAAI,EAAE;IACzC,OAAOE,SAAS,CAACD,IAAI,CAAC;EAC1B,CAAG,CAAC;EACF,IAAME,kBAAkB,GAAGjB,GAAA,CAAAY,QAAQ,CAAC,YAAM;IACxC,IAAMC,MAAM,GAAGf,WAAW,CAACe,MAAM,CAACC,KAAK;IACvC,IAAMI,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACb,eAAe,CAACS,KAAK,CAAC;IAC/C,IAAMM,GAAG,GAAG,EAAE;IACd,IAAI,CAACF,IAAI,CAACG,MAAM,EACd,OAAOD,GAAG;IACZF,IAAI,CAACI,OAAO,CAAC,UAACC,GAAG,EAAK;MACpB,IAAIlB,eAAe,CAACS,KAAK,CAACS,GAAG,CAAC,CAACF,MAAM,EAAE;QACrC,IAAMG,IAAI,GAAG;UAAEC,QAAQ,EAAE;QAAE,CAAE;QAC7BpB,eAAe,CAACS,KAAK,CAACS,GAAG,CAAC,CAACD,OAAO,CAAC,UAACI,GAAG,EAAK;UAC1C,IAAMC,aAAa,GAAGC,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;UACjDW,IAAI,CAACC,QAAQ,CAACK,IAAI,CAACH,aAAa,CAAC;UACjC,IAAID,GAAG,CAACpB,oBAAoB,CAACQ,KAAK,CAAC,IAAI,CAACM,GAAG,CAACO,aAAa,CAAC,EAAE;YAC1DP,GAAG,CAACO,aAAa,CAAC,GAAG;cAAEF,QAAQ,EAAE;YAAE,CAAE;UACjD;QACA,CAAS,CAAC;QACFL,GAAG,CAACG,GAAG,CAAC,GAAGC,IAAI;MACvB;IACA,CAAK,CAAC;IACF,OAAOJ,GAAG;EACd,CAAG,CAAC;EACF,IAAMJ,SAAS,GAAG,SAAZA,SAASA,CAAID,IAAI,EAAK;IAC1B,IAAMF,MAAM,GAAGf,WAAW,CAACe,MAAM,CAACC,KAAK;IACvC,IAAMM,GAAG,GAAG,EAAE;IACdQ,IAAA,CAAAG,YAAY,CAAChB,IAAI,EAAE,UAACiB,MAAM,EAAEP,QAAQ,EAAEQ,KAAK,EAAK;MAC9C,IAAMC,QAAQ,GAAGN,IAAA,CAAAC,cAAc,CAACG,MAAM,EAAEnB,MAAM,CAAC;MAC/C,IAAIsB,MAAA,CAAAC,OAAO,CAACX,QAAQ,CAAC,EAAE;QACrBL,GAAG,CAACc,QAAQ,CAAC,GAAG;UACdT,QAAQ,EAAEA,QAAQ,CAACY,GAAG,CAAC,UAACX,GAAG;YAAA,OAAKE,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;UAAA,EAAC;UAC5DoB,KAAK,EAALA;QACV,CAAS;MACT,CAAO,MAAM,IAAI7B,IAAI,CAACU,KAAK,EAAE;QACrBM,GAAG,CAACc,QAAQ,CAAC,GAAG;UACdT,QAAQ,EAAE,EAAE;UACZrB,IAAI,EAAE,IAAI;UACV6B,KAAK,EAALA;QACV,CAAS;MACT;IACA,CAAK,EAAE1B,kBAAkB,CAACO,KAAK,EAAER,oBAAoB,CAACQ,KAAK,CAAC;IACxD,OAAOM,GAAG;EACd,CAAG;EACD,IAAIkB,UAAU,GAAG,IAAI;EACrB,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAsC;IAAA,IAAlCC,qBAAqB,GAAAC,SAAA,CAAApB,MAAA,QAAAoB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;IACnD,IAAIE,EAAE,EAAEC,EAAE;IACV,IAAMC,MAAM,GAAGlC,cAAc,CAACG,KAAK;IACnC,IAAMgC,mBAAmB,GAAG7B,kBAAkB,CAACH,KAAK;IACpD,IAAMI,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC2B,MAAM,CAAC;IAChC,IAAME,WAAW,GAAG,EAAE;IACtB,IAAMC,WAAW,GAAG,CAAC,CAACL,EAAE,GAAGlC,QAAQ,CAACwC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGN,EAAE,CAACO,MAAM,CAACC,gBAAgB,CAACrC,KAAK,KAAKwB,UAAU;IAC7GA,UAAU,GAAG,KAAK;IAClB,IAAIpB,IAAI,CAACG,MAAM,EAAE;MACf,IAAM+B,WAAW,GAAGpD,GAAA,CAAAqD,KAAK,CAACnD,QAAQ,CAAC;MACnC,IAAMoD,eAAe,GAAG,EAAE;MAC1B,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,QAAQ,EAAEjC,GAAG,EAAK;QACrC,IAAIiB,qBAAqB,EAAE;UACzB,IAAIzC,aAAa,CAACe,KAAK,CAACO,MAAM,EAAE;YAC9B,OAAO2B,WAAW,IAAIjD,aAAa,CAACe,KAAK,CAAC2C,QAAQ,CAAClC,GAAG,CAAC;UACnE,CAAW,MAAM;YACL,OAAO,CAAC,EAAEyB,WAAW,KAAKQ,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,QAAQ,CAAC,CAAC;UACrF;QACA,CAAS,MAAM;UACL,IAAMC,QAAQ,GAAGX,WAAW,IAAIjD,aAAa,CAACe,KAAK,IAAIf,aAAa,CAACe,KAAK,CAAC2C,QAAQ,CAAClC,GAAG,CAAC;UACxF,OAAO,CAAC,EAAE,CAACiC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,QAAQ,KAAKC,QAAQ,CAAC;QAChF;MACA,CAAO;MACDzC,IAAI,CAACI,OAAO,CAAC,UAACC,GAAG,EAAK;QACpB,IAAMiC,QAAQ,GAAGJ,WAAW,CAAC7B,GAAG,CAAC;QACjC,IAAMqC,QAAQ,GAAAC,aAAA,KAAQhB,MAAM,CAACtB,GAAG,CAAC,CAAE;QACnCqC,QAAQ,CAACF,QAAQ,GAAGH,WAAW,CAACC,QAAQ,EAAEjC,GAAG,CAAC;QAC9C,IAAIqC,QAAQ,CAACxD,IAAI,EAAE;UACjB,IAAA0D,IAAA,GAA4CN,QAAQ,IAAI,EAAE;YAAAO,WAAA,GAAAD,IAAA,CAAlDE,MAAM;YAANA,MAAM,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;YAAAE,YAAA,GAAAH,IAAA,CAAEI,OAAO;YAAPA,OAAO,GAAAD,YAAA,cAAG,KAAK,GAAAA,YAAA;UACvCL,QAAQ,CAACI,MAAM,GAAG,CAAC,CAACA,MAAM;UAC1BJ,QAAQ,CAACM,OAAO,GAAG,CAAC,CAACA,OAAO;UAC5BZ,eAAe,CAACxB,IAAI,CAACP,GAAG,CAAC;QACnC;QACQwB,WAAW,CAACxB,GAAG,CAAC,GAAGqC,QAAQ;MACnC,CAAO,CAAC;MACF,IAAMO,QAAQ,GAAGhD,MAAM,CAACD,IAAI,CAAC4B,mBAAmB,CAAC;MACjD,IAAI1C,IAAI,CAACU,KAAK,IAAIqD,QAAQ,CAAC9C,MAAM,IAAIiC,eAAe,CAACjC,MAAM,EAAE;QAC3D8C,QAAQ,CAAC7C,OAAO,CAAC,UAACC,GAAG,EAAK;UACxB,IAAMiC,QAAQ,GAAGJ,WAAW,CAAC7B,GAAG,CAAC;UACjC,IAAM6C,gBAAgB,GAAGtB,mBAAmB,CAACvB,GAAG,CAAC,CAACE,QAAQ;UAC1D,IAAI6B,eAAe,CAACG,QAAQ,CAAClC,GAAG,CAAC,EAAE;YACjC,IAAIwB,WAAW,CAACxB,GAAG,CAAC,CAACE,QAAQ,CAACJ,MAAM,KAAK,CAAC,EAAE;cAC1C,MAAM,IAAIgD,KAAK,CAAC,2CAA2C,CAAC;YAC1E;YACYtB,WAAW,CAACxB,GAAG,CAAC,CAACE,QAAQ,GAAG2C,gBAAgB;UACxD,CAAW,MAAM;YACL,IAAAE,KAAA,GAA4Cd,QAAQ,IAAI,EAAE;cAAAe,YAAA,GAAAD,KAAA,CAAlDN,MAAM;cAANA,MAAM,GAAAO,YAAA,cAAG,KAAK,GAAAA,YAAA;cAAAC,aAAA,GAAAF,KAAA,CAAEJ,OAAO;cAAPA,OAAO,GAAAM,aAAA,cAAG,KAAK,GAAAA,aAAA;YACvCzB,WAAW,CAACxB,GAAG,CAAC,GAAG;cACjBnB,IAAI,EAAE,IAAI;cACV4D,MAAM,EAAE,CAAC,CAACA,MAAM;cAChBE,OAAO,EAAE,CAAC,CAACA,OAAO;cAClBR,QAAQ,EAAEH,WAAW,CAACC,QAAQ,EAAEjC,GAAG,CAAC;cACpCE,QAAQ,EAAE2C,gBAAgB;cAC1BnC,KAAK,EAAE;YACrB,CAAa;UACb;QACA,CAAS,CAAC;MACV;IACA;IACI/B,QAAQ,CAACY,KAAK,GAAGiC,WAAW;IAC5B,CAACH,EAAE,GAAGnC,QAAQ,CAACwC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGL,EAAE,CAAC6B,kBAAkB,EAAE;EACpE,CAAG;EACDzE,GAAA,CAAA0E,KAAK,CAAC;IAAA,OAAM3E,aAAa,CAACe,KAAK;EAAA,GAAE,YAAM;IACrCyB,cAAc,CAAC,IAAI,CAAC;EACxB,CAAG,CAAC;EACFvC,GAAA,CAAA0E,KAAK,CAAC;IAAA,OAAM/D,cAAc,CAACG,KAAK;EAAA,GAAE,YAAM;IACtCyB,cAAc,EAAE;EACpB,CAAG,CAAC;EACFvC,GAAA,CAAA0E,KAAK,CAAC;IAAA,OAAMzD,kBAAkB,CAACH,KAAK;EAAA,GAAE,YAAM;IAC1CyB,cAAc,EAAE;EACpB,CAAG,CAAC;EACF,IAAMoC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAI7D,KAAK,EAAK;IACtCf,aAAa,CAACe,KAAK,GAAGA,KAAK;IAC3ByB,cAAc,EAAE;EACpB,CAAG;EACD,IAAMqC,SAAS,GAAG,SAAZA,SAASA,CAAI7D,IAAI,EAAK;IAC1B,OAAOX,IAAI,CAACU,KAAK,IAAIC,IAAI,IAAI,QAAQ,IAAIA,IAAI,IAAI,CAACA,IAAI,CAACiD,MAAM;EACjE,CAAG;EACD,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAInD,GAAG,EAAEgC,QAAQ,EAAK;IAC7CjD,QAAQ,CAACwC,KAAK,CAAC6B,YAAY,EAAE;IAC7B,IAAMjE,MAAM,GAAGf,WAAW,CAACe,MAAM,CAACC,KAAK;IACvC,IAAMiE,EAAE,GAAGnD,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;IACtC,IAAME,IAAI,GAAGgE,EAAE,IAAI7E,QAAQ,CAACY,KAAK,CAACiE,EAAE,CAAC;IACrC,IAAIA,EAAE,IAAIhE,IAAI,IAAI,UAAU,IAAIA,IAAI,EAAE;MACpC,IAAMiE,WAAW,GAAGjE,IAAI,CAAC2C,QAAQ;MACjCA,QAAQ,GAAGuB,KAAA,CAAAC,WAAW,CAACxB,QAAQ,CAAC,GAAG,CAAC3C,IAAI,CAAC2C,QAAQ,GAAGA,QAAQ;MAC5DxD,QAAQ,CAACY,KAAK,CAACiE,EAAE,CAAC,CAACrB,QAAQ,GAAGA,QAAQ;MACtC,IAAIsB,WAAW,KAAKtB,QAAQ,EAAE;QAC5BjD,QAAQ,CAAC0E,IAAI,CAAC,eAAe,EAAEzD,GAAG,EAAEgC,QAAQ,CAAC;MACrD;MACMkB,SAAS,CAAC7D,IAAI,CAAC,IAAIqE,QAAQ,CAAC1D,GAAG,EAAEqD,EAAE,EAAEhE,IAAI,CAAC;MAC1CN,QAAQ,CAACwC,KAAK,CAACwB,kBAAkB,EAAE;IACzC;EACA,CAAG;EACD,IAAMY,YAAY,GAAG,SAAfA,YAAYA,CAAI3D,GAAG,EAAK;IAC5BjB,QAAQ,CAACwC,KAAK,CAAC6B,YAAY,EAAE;IAC7B,IAAMjE,MAAM,GAAGf,WAAW,CAACe,MAAM,CAACC,KAAK;IACvC,IAAMiE,EAAE,GAAGnD,IAAA,CAAAC,cAAc,CAACH,GAAG,EAAEb,MAAM,CAAC;IACtC,IAAME,IAAI,GAAGb,QAAQ,CAACY,KAAK,CAACiE,EAAE,CAAC;IAC/B,IAAIH,SAAS,CAAC7D,IAAI,CAAC,EAAE;MACnBqE,QAAQ,CAAC1D,GAAG,EAAEqD,EAAE,EAAEhE,IAAI,CAAC;IAC7B,CAAK,MAAM;MACL8D,mBAAmB,CAACnD,GAAG,EAAE,KAAK,CAAC,CAAC;IACtC;EACA,CAAG;EACD,IAAM0D,QAAQ,GAAG,SAAXA,QAAQA,CAAI1D,GAAG,EAAEH,GAAG,EAAE+D,QAAQ,EAAK;IACvC,IAAQC,IAAI,GAAK9E,QAAQ,CAAC+E,KAAK,CAAvBD,IAAI;IACZ,IAAIA,IAAI,IAAI,CAACrF,QAAQ,CAACY,KAAK,CAACS,GAAG,CAAC,CAACyC,MAAM,EAAE;MACvC9D,QAAQ,CAACY,KAAK,CAACS,GAAG,CAAC,CAAC2C,OAAO,GAAG,IAAI;MAClCqB,IAAI,CAAC7D,GAAG,EAAE4D,QAAQ,EAAE,UAACvE,IAAI,EAAK;QAC5B,IAAI,CAACoB,MAAA,CAAAC,OAAO,CAACrB,IAAI,CAAC,EAAE;UAClB,MAAM,IAAI0E,SAAS,CAAC,iCAAiC,CAAC;QAChE;QACQvF,QAAQ,CAACY,KAAK,CAACS,GAAG,CAAC,CAAC2C,OAAO,GAAG,KAAK;QACnChE,QAAQ,CAACY,KAAK,CAACS,GAAG,CAAC,CAACyC,MAAM,GAAG,IAAI;QACjC9D,QAAQ,CAACY,KAAK,CAACS,GAAG,CAAC,CAACmC,QAAQ,GAAG,IAAI;QACnC,IAAI3C,IAAI,CAACM,MAAM,EAAE;UACfhB,eAAe,CAACS,KAAK,CAACS,GAAG,CAAC,GAAGR,IAAI;QAC3C;QACQN,QAAQ,CAAC0E,IAAI,CAAC,eAAe,EAAEzD,GAAG,EAAE,IAAI,CAAC;MACjD,CAAO,CAAC;IACR;EACA,CAAG;EACD,IAAMgE,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAInE,GAAG,EAAER,IAAI,EAAK;IACvC,IAAA4E,eAAA,GAAgClF,QAAQ,CAAC+E,KAAK;MAAhCI,KAAK,GAAAD,eAAA,CAAXvF,IAAI;MAASS,MAAM,GAAA8E,eAAA,CAAN9E,MAAM;IAC3B,IAAI,CAAC+E,KAAK,EACR;IACF,IAAI,CAAC/E,MAAM,EACT,MAAM,IAAIwD,KAAK,CAAC,8CAA8C,CAAC;IACjE,IAAIhE,eAAe,CAACS,KAAK,CAACS,GAAG,CAAC,EAAE;MAC9BlB,eAAe,CAACS,KAAK,CAACS,GAAG,CAAC,GAAGR,IAAI;IACvC;EACA,CAAG;EACD,OAAO;IACLqE,QAAQ,EAARA,QAAQ;IACRC,YAAY,EAAZA,YAAY;IACZR,mBAAmB,EAAnBA,mBAAmB;IACnBF,oBAAoB,EAApBA,oBAAoB;IACpBpC,cAAc,EAAdA,cAAc;IACdmD,iBAAiB,EAAjBA,iBAAiB;IACjB1E,SAAS,EAATA,SAAS;IACTkC,MAAM,EAAE;MACNnD,aAAa,EAAbA,aAAa;MACbG,QAAQ,EAARA,QAAQ;MACRC,MAAM,EAANA,MAAM;MACNC,IAAI,EAAJA,IAAI;MACJC,eAAe,EAAfA,eAAe;MACfC,oBAAoB,EAApBA,oBAAoB;MACpBC,kBAAkB,EAAlBA,kBAAkB;MAClBC,aAAa,EAAbA;IACN;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}