{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.from.js\");\nrequire(\"core-js/modules/es.array.includes.js\");\nrequire(\"core-js/modules/es.array.index-of.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nrequire(\"core-js/modules/es.string.iterator.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nvar index = require('../../../../hooks/use-namespace/index.js');\nvar aria = require('../../../../constants/aria.js');\nfunction useKeydown(_ref, store) {\n  var el$ = _ref.el$;\n  var ns = index.useNamespace(\"tree\");\n  vue.onMounted(function () {\n    initTabIndex();\n  });\n  vue.onUpdated(function () {\n    var checkboxItems = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    checkboxItems.forEach(function (checkbox) {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n  var handleKeydown = function handleKeydown(ev) {\n    var currentItem = ev.target;\n    if (!currentItem.className.includes(ns.b(\"node\"))) return;\n    var code = ev.code;\n    var treeItems = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    var currentIndex = treeItems.indexOf(currentItem);\n    var nextIndex;\n    if ([aria.EVENT_CODE.up, aria.EVENT_CODE.down].includes(code)) {\n      ev.preventDefault();\n      if (code === aria.EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.length - 1;\n        var startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.length - 1 ? currentIndex + 1 : 0;\n        var _startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n          if (nextIndex === _startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex >= treeItems.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems[nextIndex].focus();\n    }\n    if ([aria.EVENT_CODE.left, aria.EVENT_CODE.right].includes(code)) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n    var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n    if ([aria.EVENT_CODE.enter, aria.EVENT_CODE.numpadEnter, aria.EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n  core.useEventListener(el$, \"keydown\", handleKeydown);\n  var initTabIndex = function initTabIndex() {\n    var _a;\n    var treeItems = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    var checkboxItems = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    checkboxItems.forEach(function (checkbox) {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n    var checkedItem = el$.value.querySelectorAll(\".\".concat(ns.is(\"checked\"), \"[role=treeitem]\"));\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n    (_a = treeItems[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\nexports.useKeydown = useKeydown;","map":{"version":3,"names":["useKeydown","_ref","store","el$","ns","index","useNamespace","vue","onMounted","initTabIndex","onUpdated","checkboxItems","Array","from","value","querySelectorAll","forEach","checkbox","setAttribute","handleKeydown","ev","currentItem","target","className","includes","b","code","treeItems","concat","is","currentIndex","indexOf","nextIndex","aria","EVENT_CODE","up","down","preventDefault","length","startIndex","getNode","dataset","key","canFocus","focus","left","right","click","hasInput","querySelector","enter","numpadEnter","space","core","useEventListener","_a","checkedItem"],"sources":["../../../../../../../packages/components/tree/src/model/useKeydown.ts"],"sourcesContent":["// @ts-nocheck\nimport { onMounted, onUpdated } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const ns = useNamespace('tree')\n\n  onMounted(() => {\n    initTabIndex()\n  })\n\n  onUpdated(() => {\n    const checkboxItems = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    checkboxItems.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (!currentItem.className.includes(ns.b('node'))) return\n    const code = ev.code\n    const treeItems = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const currentIndex = treeItems.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (store.value.getNode(treeItems[nextIndex].dataset.key).canFocus)\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (store.value.getNode(treeItems[nextIndex].dataset.key).canFocus)\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if (\n      [EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space].includes(\n        code\n      ) &&\n      hasInput\n    ) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  useEventListener(el$, 'keydown', handleKeydown)\n\n  const initTabIndex = (): void => {\n    const treeItems = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const checkboxItems = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    checkboxItems.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n    const checkedItem = el$.value.querySelectorAll(\n      `.${ns.is('checked')}[role=treeitem]`\n    )\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems[0]?.setAttribute('tabindex', '0')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}