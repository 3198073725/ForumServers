{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../text/index.js');\nvar virtualTree = require('./virtual-tree.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar ElNodeContent = vue.defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: virtualTree.treeNodeContentProps,\n  setup: function setup(props) {\n    var tree = vue.inject(virtualTree.ROOT_TREE_INJECTION_KEY);\n    var ns = index.useNamespace(\"tree\");\n    return function () {\n      var node = props.node;\n      var data = node.data;\n      return (tree == null ? void 0 : tree.ctx.slots[\"default\"]) ? tree.ctx.slots[\"default\"]({\n        node: node,\n        data: data\n      }) : vue.h(index$1.ElText, {\n        tag: \"span\",\n        truncated: true,\n        \"class\": ns.be(\"node\", \"label\")\n      }, function () {\n        return [node == null ? void 0 : node.label];\n      });\n    };\n  }\n});\nexports[\"default\"] = ElNodeContent;","map":{"version":3,"names":["ElNodeContent","vue","defineComponent","name","props","virtualTree","treeNodeContentProps","setup","tree","inject","ROOT_TREE_INJECTION_KEY","ns","index","useNamespace","node","data","ctx","slots","h","index$1","ElText","tag","truncated","be","label"],"sources":["../../../../../../packages/components/tree-v2/src/tree-node-content.ts"],"sourcesContent":["import { defineComponent, h, inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport ElText from '@element-plus/components/text'\nimport { ROOT_TREE_INJECTION_KEY, treeNodeContentProps } from './virtual-tree'\n\nexport default defineComponent({\n  name: 'ElTreeNodeContent',\n  props: treeNodeContentProps,\n  setup(props) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY)\n    const ns = useNamespace('tree')\n    return () => {\n      const node = props.node\n      const { data } = node!\n      return tree?.ctx.slots.default\n        ? tree.ctx.slots.default({ node, data })\n        : h(\n            ElText,\n            { tag: 'span', truncated: true, class: ns.be('node', 'label') },\n            () => [node?.label]\n          )\n    }\n  },\n})\n"],"mappings":";;;;;;;;;;AAIA,IAAAA,aAAA,GAAeC,GAAA,CAAAC,eAAe,CAAC;EAC7BC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAEC,WAAA,CAAAC,oBAAoB;EAC3BC,KAAK,WAALA,KAAKA,CAACH,KAAK,EAAE;IACX,IAAMI,IAAI,GAAGP,GAAA,CAAAQ,MAAM,CAACJ,WAAA,CAAAK,uBAAuB,CAAC;IAC5C,IAAMC,EAAE,GAAGC,KAAA,CAAAC,YAAY,CAAC,MAAM,CAAC;IAC/B,OAAO,YAAM;MACX,IAAMC,IAAI,GAAGV,KAAK,CAACU,IAAI;MACvB,IAAQC,IAAI,GAAKD,IAAI,CAAbC,IAAI;MACZ,OAAO,CAACP,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACQ,GAAG,CAACC,KAAK,WAAQ,IAAIT,IAAI,CAACQ,GAAG,CAACC,KAAK,WAAQ,CAAC;QAAEH,IAAI,EAAJA,IAAI;QAAEC,IAAI,EAAJA;MAAI,CAAE,CAAC,GAAGd,GAAA,CAAAiB,CAAC,CAACC,OAAA,CAAAC,MAAM,EAAE;QAAEC,GAAG,EAAE,MAAM;QAAEC,SAAS,EAAE,IAAI;QAAE,SAAOX,EAAE,CAACY,EAAE,CAAC,MAAM,EAAE,OAAO;MAAC,CAAE,EAAE;QAAA,OAAM,CAACT,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACU,KAAK,CAAC;MAAA,EAAC;IAC/N,CAAK;EACL;AACA,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}