{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"rich-text-editor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_quill_editor = _resolveComponent(\"quill-editor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_quill_editor, {\n    content: $setup.content,\n    \"onUpdate:content\": [_cache[0] || (_cache[0] = function ($event) {\n      return $setup.content = $event;\n    }), $setup.handleContentUpdate],\n    options: $setup.editorOption,\n    onBlur: $setup.handleBlur,\n    disabled: $props.disabled,\n    ref: \"quillEditor\"\n  }, null, 8 /* PROPS */, [\"content\", \"options\", \"onUpdate:content\", \"onBlur\", \"disabled\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","_component_quill_editor","content","$setup","$event","handleContentUpdate","options","editorOption","onBlur","handleBlur","disabled","$props","ref"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\components\\RichTextEditor.vue"],"sourcesContent":["<template>\n  <div class=\"rich-text-editor\">\n    <quill-editor\n      v-model:content=\"content\"\n      :options=\"editorOption\"\n      @update:content=\"handleContentUpdate\"\n      @blur=\"handleBlur\"\n      :disabled=\"disabled\"\n      ref=\"quillEditor\"\n    />\n  </div>\n</template>\n\n<script>\nimport { ref, watch, onMounted } from 'vue'\nimport { QuillEditor } from '@vueup/vue-quill'\nimport '@vueup/vue-quill/dist/vue-quill.snow.css'\nimport { defaultQuillOptions } from '@/utils/quill-config'\n\nexport default {\n  name: 'RichTextEditor',\n  components: {\n    QuillEditor\n  },\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'change'],\n  setup(props, { emit }) {\n    const content = ref(props.modelValue || '')\n    const quillEditor = ref(null)\n\n    const handleContentUpdate = (newContent) => {\n      console.log('RichTextEditor - handleContentUpdate:', newContent);\n      \n      if (quillEditor.value && quillEditor.value.getQuill) {\n        const quill = quillEditor.value.getQuill();\n        const text = quill.getText().trim();\n        \n        console.log('RichTextEditor - 内容更新:', {\n          content: newContent,\n          text: text,\n          isEmpty: !text\n        });\n\n        if (!text || text === '\\n') {\n          content.value = '';\n          emit('update:modelValue', '');\n          emit('change', '');\n        } else {\n          content.value = newContent;\n          emit('update:modelValue', newContent);\n          emit('change', newContent);\n        }\n      }\n    }\n\n    const handleBlur = () => {\n      if (quillEditor.value && quillEditor.value.getQuill) {\n        const quill = quillEditor.value.getQuill();\n        const text = quill.getText().trim();\n        const html = quill.root.innerHTML;\n        \n        console.log('RichTextEditor - 失去焦点:', {\n          html: html,\n          text: text,\n          isEmpty: !text\n        });\n\n        if (!text || text === '\\n') {\n          content.value = '';\n          emit('update:modelValue', '');\n          emit('change', '');\n        } else if (html !== content.value) {\n          content.value = html;\n          emit('update:modelValue', html);\n          emit('change', html);\n        }\n      }\n    }\n\n    // 监听 modelValue 变化\n    watch(() => props.modelValue, (newValue, oldValue) => {\n      console.log('RichTextEditor - modelValue变化:', { \n        newValue, \n        oldValue, \n        contentValue: content.value \n      });\n      \n      if (newValue !== content.value) {\n        content.value = newValue || '';\n        \n        // 如果编辑器已经初始化，手动更新内容\n        if (quillEditor.value && quillEditor.value.getQuill) {\n          console.log('手动更新Quill编辑器内容');\n          const quill = quillEditor.value.getQuill();\n          if (quill) {\n            // 清空当前内容\n            quill.setText('');\n            // 设置新内容（如果是HTML格式）\n            if (newValue && newValue.trim()) {\n              quill.clipboard.dangerouslyPasteHTML(0, newValue);\n            }\n          }\n        }\n      }\n    }, { immediate: true })\n\n    onMounted(() => {\n      console.log('RichTextEditor - 组件挂载，初始值:', props.modelValue);\n      \n      // 初始化时设置内容\n      if (quillEditor.value) {\n        console.log('RichTextEditor - 设置初始内容');\n        \n        try {\n          const quill = quillEditor.value.getQuill();\n          if (quill) {\n            // 确保使用现代 API\n            Object.assign(quill.options, {\n              experimental: {\n                useModernScrollingApi: true,\n                useMutationObserver: true\n              }\n            });\n\n            // 清空当前内容\n            quill.setText('');\n            // 设置新内容（如果是HTML格式）\n            if (props.modelValue && props.modelValue.trim()) {\n              quill.clipboard.dangerouslyPasteHTML(0, props.modelValue);\n              content.value = props.modelValue;\n              console.log('RichTextEditor - 初始内容设置成功');\n            }\n          }\n        } catch (error) {\n          console.error('RichTextEditor - 设置初始内容失败:', error);\n        }\n      }\n    })\n\n    return {\n      content,\n      editorOption: {\n        ...defaultQuillOptions,\n        readOnly: props.disabled\n      },\n      handleContentUpdate,\n      handleBlur,\n      quillEditor\n    }\n  }\n}\n</script>\n\n<style scoped>\n.rich-text-editor {\n  width: 100%;\n}\n\n:deep(.ql-container) {\n  min-height: 300px;\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n:deep(.ql-editor) {\n  min-height: 300px;\n  padding: 12px 15px;\n}\n\n:deep(.ql-toolbar) {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  background-color: #f8f9fa;\n}\n\n:deep(.ql-container) {\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n\n:deep(.ql-editor p) {\n  margin-bottom: 1em;\n}\n\n:deep(.ql-editor img) {\n  max-width: 100%;\n  height: auto;\n}\n\n:deep(.ql-editor blockquote) {\n  border-left: 4px solid #ccc;\n  margin: 0;\n  padding-left: 16px;\n}\n\n:deep(.ql-editor pre.ql-syntax) {\n  background-color: #f8f9fa;\n  border-radius: 4px;\n  padding: 12px;\n  margin: 8px 0;\n}\n</style> "],"mappings":";;EACO,SAAM;AAAkB;;;uBAA7BA,mBAAA,CASM,OATNC,UASM,GARJC,YAAA,CAOEC,uBAAA;IANQC,OAAO,EAAEC,MAAA,CAAAD,OAAO;IAH9B,qB;aAGuBC,MAAA,CAAAD,OAAO,GAAAE,MAAA;IAAA,IAEPD,MAAA,CAAAE,mBAAmB,C;IADnCC,OAAO,EAAEH,MAAA,CAAAI,YAAY;IAErBC,MAAI,EAAEL,MAAA,CAAAM,UAAU;IAChBC,QAAQ,EAAEC,MAAA,CAAAD,QAAQ;IACnBE,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}