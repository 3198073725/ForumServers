{"ast":null,"code":"import _classCallCheck from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport store from '@/store';\nimport { ElMessage } from 'element-plus';\n\n// WebSocket基础URL\nvar WS_BASE_URL = process.env.NODE_ENV === 'production' ? 'wss://yourserver.com/ws' : 'ws://localhost:8000/ws';\n\n/**\n * WebSocket管理类\n */\nvar WebSocketManager = /*#__PURE__*/function () {\n  function WebSocketManager() {\n    _classCallCheck(this, WebSocketManager);\n    this.notificationSocket = null;\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\n    this.token = null;\n  }\n\n  /**\n   * 初始化WebSocket连接\n   * @param {string} token - JWT令牌\n   */\n  return _createClass(WebSocketManager, [{\n    key: \"init\",\n    value: function init(token) {\n      var _this = this;\n      this.token = token;\n      if (token) {\n        // 检查后端是否支持通知功能\n        fetch('http://localhost:8000/api/v1/notifications/').then(function (response) {\n          // 如果通知接口存在，则连接WebSocket\n          if (response.status !== 404) {\n            _this.connectNotification(token);\n          } else {\n            console.log('通知接口不可用，不建立WebSocket连接');\n          }\n        })[\"catch\"](function (error) {\n          console.error('检查通知接口可用性失败:', error);\n        });\n      }\n    }\n\n    /**\n     * 连接到通知WebSocket\n     * @param {string} token - JWT令牌\n     */\n  }, {\n    key: \"connectNotification\",\n    value: function connectNotification(token) {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n        this.notificationSocket = null;\n      }\n\n      // 如果已经禁用了WebSocket功能，则不再尝试连接\n      if (window.webSocketEnabled === false) {\n        console.log('WebSocket功能已被禁用，不再尝试连接');\n        return;\n      }\n      try {\n        // 创建通知WebSocket连接\n        this.notificationSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/notifications/?token=\").concat(token), [], {\n          connectionTimeout: 3000,\n          maxRetries: 3,\n          // 最多重试3次\n          debug: false\n        });\n\n        // 连接打开时的处理\n        this.notificationSocket.onopen = function () {\n          console.log('通知WebSocket连接已建立');\n        };\n\n        // 接收消息的处理\n        this.notificationSocket.onmessage = function (event) {\n          try {\n            var data = JSON.parse(event.data);\n            switch (data.type) {\n              case 'connection_established':\n                console.log(data.message);\n                break;\n              case 'unread_count':\n                // 更新未读通知数量\n                store.commit('notifications/setUnreadCount', data.count);\n                break;\n              case 'notification':\n                // 处理新通知\n                store.commit('notifications/addNotification', data);\n                store.commit('notifications/incrementUnreadCount');\n\n                // 显示通知提示\n                ElMessage({\n                  message: data.title,\n                  type: 'info',\n                  duration: 3000\n                });\n                break;\n              case 'mark_read_response':\n              case 'mark_all_read_response':\n                // 标记通知已读的响应处理\n                break;\n              default:\n                console.log('未知的通知类型:', data.type);\n            }\n          } catch (error) {\n            console.error('解析通知消息失败:', error);\n          }\n        };\n\n        // 连接关闭时的处理\n        this.notificationSocket.onclose = function () {\n          console.log('通知WebSocket连接已关闭');\n        };\n\n        // 连接错误时的处理\n        this.notificationSocket.onerror = function (error) {\n          console.error('通知WebSocket连接错误:', error);\n          // 连接错误时，设置全局标志，避免反复尝试连接\n          window.webSocketEnabled = false;\n        };\n      } catch (error) {\n        console.error('创建通知WebSocket连接失败:', error);\n      }\n    }\n\n    /**\n     * 连接到聊天WebSocket\n     * @param {number} userId - 对方用户ID\n     */\n  }, {\n    key: \"connectChat\",\n    value: function connectChat(userId) {\n      var _this2 = this;\n      if (!this.token) {\n        console.error('未登录，无法建立聊天连接');\n        return;\n      }\n\n      // 如果已存在与该用户的连接，则返回\n      if (this.chatSockets[userId]) {\n        return;\n      }\n\n      // 创建聊天WebSocket连接\n      var chatSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/chat/\").concat(userId, \"/?token=\").concat(this.token));\n\n      // 连接打开时的处理\n      chatSocket.onopen = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB\"));\n      };\n\n      // 接收消息的处理\n      chatSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'connection_established':\n              console.log(data.message);\n              break;\n            case 'chat_message':\n              // 处理聊天消息\n              store.commit('chat/addMessage', {\n                userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\n                message: {\n                  id: data.id,\n                  senderId: data.sender_id,\n                  receiverId: data.receiver_id,\n                  content: data.content,\n                  timestamp: data.timestamp,\n                  isRead: data.is_read\n                }\n              });\n              break;\n            case 'history_messages':\n              // 处理历史消息\n              store.commit('chat/setMessages', {\n                userId: userId,\n                messages: data.messages.map(function (msg) {\n                  return {\n                    id: msg.id,\n                    senderId: msg.sender_id,\n                    receiverId: msg.receiver_id,\n                    content: msg.content,\n                    timestamp: msg.timestamp,\n                    isRead: msg.is_read\n                  };\n                }),\n                hasMore: data.has_more,\n                page: data.page\n              });\n              break;\n            default:\n              console.log('未知的聊天消息类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析聊天消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的处理\n      chatSocket.onclose = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED\"));\n        delete _this2.chatSockets[userId];\n      };\n\n      // 连接错误时的处理\n      chatSocket.onerror = function (error) {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u9519\\u8BEF:\"), error);\n      };\n\n      // 保存连接\n      this.chatSockets[userId] = chatSocket;\n    }\n\n    /**\n     * 断开与用户的聊天连接\n     * @param {number} userId - 用户ID\n     */\n  }, {\n    key: \"disconnectChat\",\n    value: function disconnectChat(userId) {\n      if (this.chatSockets[userId]) {\n        this.chatSockets[userId].close();\n        delete this.chatSockets[userId];\n      }\n    }\n\n    /**\n     * 发送聊天消息\n     * @param {number} userId - 接收者ID\n     * @param {string} content - 消息内容\n     */\n  }, {\n    key: \"sendChatMessage\",\n    value: function sendChatMessage(userId, content) {\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'chat_message',\n        content: content\n      }));\n    }\n\n    /**\n     * 加载历史消息\n     * @param {number} userId - 用户ID\n     * @param {number} page - 页码\n     * @param {number} pageSize - 每页大小\n     */\n  }, {\n    key: \"loadChatHistory\",\n    value: function loadChatHistory(userId) {\n      var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'load_history',\n        page: page,\n        page_size: pageSize\n      }));\n    }\n\n    /**\n     * 标记通知为已读\n     * @param {number} notificationId - 通知ID\n     */\n  }, {\n    key: \"markNotificationRead\",\n    value: function markNotificationRead(notificationId) {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_read',\n          id: notificationId\n        }));\n      }\n    }\n\n    /**\n     * 标记所有通知为已读\n     */\n  }, {\n    key: \"markAllNotificationsRead\",\n    value: function markAllNotificationsRead() {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_all_read'\n        }));\n      }\n    }\n\n    /**\n     * 关闭所有WebSocket连接\n     */\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n        this.notificationSocket = null;\n      }\n      Object.values(this.chatSockets).forEach(function (socket) {\n        socket.close();\n      });\n      this.chatSockets = {};\n      this.token = null;\n    }\n  }]);\n}(); // 创建单例\nvar wsManager = new WebSocketManager();\nexport default wsManager;","map":{"version":3,"names":["ReconnectingWebSocket","store","ElMessage","WS_BASE_URL","process","env","NODE_ENV","WebSocketManager","_classCallCheck","notificationSocket","chatSockets","token","_createClass","key","value","init","_this","fetch","then","response","status","connectNotification","console","log","error","close","window","webSocketEnabled","concat","connectionTimeout","maxRetries","debug","onopen","onmessage","event","data","JSON","parse","type","message","commit","count","title","duration","onclose","onerror","connectChat","userId","_this2","chatSocket","sender_id","state","user","currentUser","id","receiver_id","senderId","receiverId","content","timestamp","isRead","is_read","messages","map","msg","hasMore","has_more","page","disconnectChat","sendChatMessage","send","stringify","loadChatHistory","arguments","length","undefined","pageSize","page_size","markNotificationRead","notificationId","readyState","WebSocket","OPEN","markAllNotificationsRead","closeAll","Object","values","forEach","socket","wsManager"],"sources":["H:/ForumServers/ForumFrontend/src/utils/websocket.js"],"sourcesContent":["import ReconnectingWebSocket from 'reconnecting-websocket';\nimport store from '@/store';\nimport { ElMessage } from 'element-plus';\n\n// WebSocket基础URL\nconst WS_BASE_URL = process.env.NODE_ENV === 'production' \n  ? 'wss://yourserver.com/ws' \n  : 'ws://localhost:8000/ws';\n\n/**\n * WebSocket管理类\n */\nclass WebSocketManager {\n  constructor() {\n    this.notificationSocket = null;\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\n    this.token = null;\n  }\n\n  /**\n   * 初始化WebSocket连接\n   * @param {string} token - JWT令牌\n   */\n  init(token) {\n    this.token = token;\n    if (token) {\n      // 检查后端是否支持通知功能\n      fetch('http://localhost:8000/api/v1/notifications/')\n        .then(response => {\n          // 如果通知接口存在，则连接WebSocket\n          if (response.status !== 404) {\n            this.connectNotification(token);\n          } else {\n            console.log('通知接口不可用，不建立WebSocket连接');\n          }\n        })\n        .catch(error => {\n          console.error('检查通知接口可用性失败:', error);\n        });\n    }\n  }\n\n  /**\n   * 连接到通知WebSocket\n   * @param {string} token - JWT令牌\n   */\n  connectNotification(token) {\n    if (this.notificationSocket) {\n      this.notificationSocket.close();\n      this.notificationSocket = null;\n    }\n\n    // 如果已经禁用了WebSocket功能，则不再尝试连接\n    if (window.webSocketEnabled === false) {\n      console.log('WebSocket功能已被禁用，不再尝试连接');\n      return;\n    }\n\n    try {\n    // 创建通知WebSocket连接\n      this.notificationSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/notifications/?token=${token}`, [], {\n        connectionTimeout: 3000,\n        maxRetries: 3,  // 最多重试3次\n        debug: false\n      });\n\n    // 连接打开时的处理\n    this.notificationSocket.onopen = () => {\n      console.log('通知WebSocket连接已建立');\n    };\n\n    // 接收消息的处理\n    this.notificationSocket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        switch (data.type) {\n          case 'connection_established':\n            console.log(data.message);\n            break;\n          \n          case 'unread_count':\n            // 更新未读通知数量\n            store.commit('notifications/setUnreadCount', data.count);\n            break;\n          \n          case 'notification':\n            // 处理新通知\n            store.commit('notifications/addNotification', data);\n            store.commit('notifications/incrementUnreadCount');\n            \n            // 显示通知提示\n            ElMessage({\n              message: data.title,\n              type: 'info',\n              duration: 3000\n            });\n            break;\n          \n          case 'mark_read_response':\n          case 'mark_all_read_response':\n            // 标记通知已读的响应处理\n            break;\n          \n          default:\n            console.log('未知的通知类型:', data.type);\n        }\n      } catch (error) {\n        console.error('解析通知消息失败:', error);\n      }\n    };\n\n    // 连接关闭时的处理\n    this.notificationSocket.onclose = () => {\n      console.log('通知WebSocket连接已关闭');\n    };\n\n    // 连接错误时的处理\n    this.notificationSocket.onerror = (error) => {\n      console.error('通知WebSocket连接错误:', error);\n        // 连接错误时，设置全局标志，避免反复尝试连接\n        window.webSocketEnabled = false;\n    };\n    } catch (error) {\n      console.error('创建通知WebSocket连接失败:', error);\n    }\n  }\n\n  /**\n   * 连接到聊天WebSocket\n   * @param {number} userId - 对方用户ID\n   */\n  connectChat(userId) {\n    if (!this.token) {\n      console.error('未登录，无法建立聊天连接');\n      return;\n    }\n\n    // 如果已存在与该用户的连接，则返回\n    if (this.chatSockets[userId]) {\n      return;\n    }\n\n    // 创建聊天WebSocket连接\n    const chatSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/chat/${userId}/?token=${this.token}`);\n\n    // 连接打开时的处理\n    chatSocket.onopen = () => {\n      console.log(`与用户${userId}的聊天WebSocket连接已建立`);\n    };\n\n    // 接收消息的处理\n    chatSocket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        switch (data.type) {\n          case 'connection_established':\n            console.log(data.message);\n            break;\n          \n          case 'chat_message':\n            // 处理聊天消息\n            store.commit('chat/addMessage', {\n              userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\n              message: {\n                id: data.id,\n                senderId: data.sender_id,\n                receiverId: data.receiver_id,\n                content: data.content,\n                timestamp: data.timestamp,\n                isRead: data.is_read\n              }\n            });\n            break;\n          \n          case 'history_messages':\n            // 处理历史消息\n            store.commit('chat/setMessages', {\n              userId: userId,\n              messages: data.messages.map(msg => ({\n                id: msg.id,\n                senderId: msg.sender_id,\n                receiverId: msg.receiver_id,\n                content: msg.content,\n                timestamp: msg.timestamp,\n                isRead: msg.is_read\n              })),\n              hasMore: data.has_more,\n              page: data.page\n            });\n            break;\n          \n          default:\n            console.log('未知的聊天消息类型:', data.type);\n        }\n      } catch (error) {\n        console.error('解析聊天消息失败:', error);\n      }\n    };\n\n    // 连接关闭时的处理\n    chatSocket.onclose = () => {\n      console.log(`与用户${userId}的聊天WebSocket连接已关闭`);\n      delete this.chatSockets[userId];\n    };\n\n    // 连接错误时的处理\n    chatSocket.onerror = (error) => {\n      console.error(`与用户${userId}的聊天WebSocket连接错误:`, error);\n    };\n\n    // 保存连接\n    this.chatSockets[userId] = chatSocket;\n  }\n\n  /**\n   * 断开与用户的聊天连接\n   * @param {number} userId - 用户ID\n   */\n  disconnectChat(userId) {\n    if (this.chatSockets[userId]) {\n      this.chatSockets[userId].close();\n      delete this.chatSockets[userId];\n    }\n  }\n\n  /**\n   * 发送聊天消息\n   * @param {number} userId - 接收者ID\n   * @param {string} content - 消息内容\n   */\n  sendChatMessage(userId, content) {\n    if (!this.chatSockets[userId]) {\n      this.connectChat(userId);\n    }\n\n    this.chatSockets[userId].send(JSON.stringify({\n      type: 'chat_message',\n      content: content\n    }));\n  }\n\n  /**\n   * 加载历史消息\n   * @param {number} userId - 用户ID\n   * @param {number} page - 页码\n   * @param {number} pageSize - 每页大小\n   */\n  loadChatHistory(userId, page = 1, pageSize = 20) {\n    if (!this.chatSockets[userId]) {\n      this.connectChat(userId);\n    }\n\n    this.chatSockets[userId].send(JSON.stringify({\n      type: 'load_history',\n      page: page,\n      page_size: pageSize\n    }));\n  }\n\n  /**\n   * 标记通知为已读\n   * @param {number} notificationId - 通知ID\n   */\n  markNotificationRead(notificationId) {\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n      this.notificationSocket.send(JSON.stringify({\n        type: 'mark_read',\n        id: notificationId\n      }));\n    }\n  }\n\n  /**\n   * 标记所有通知为已读\n   */\n  markAllNotificationsRead() {\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n      this.notificationSocket.send(JSON.stringify({\n        type: 'mark_all_read'\n      }));\n    }\n  }\n\n  /**\n   * 关闭所有WebSocket连接\n   */\n  closeAll() {\n    if (this.notificationSocket) {\n      this.notificationSocket.close();\n      this.notificationSocket = null;\n    }\n\n    Object.values(this.chatSockets).forEach(socket => {\n      socket.close();\n    });\n    this.chatSockets = {};\n    this.token = null;\n  }\n}\n\n// 创建单例\nconst wsManager = new WebSocketManager();\n\nexport default wsManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}