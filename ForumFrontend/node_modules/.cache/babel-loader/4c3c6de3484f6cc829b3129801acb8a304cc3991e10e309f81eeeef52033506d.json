{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar tokens = require('./tokens.js');\nvar grid = require('./grid.js');\nvar utils = require('./utils.js');\nvar header = require('./components/header.js');\nvar dynamicSizeGrid = require('../../virtual-list/src/components/dynamic-size-grid.js');\nvar fixedSizeGrid = require('../../virtual-list/src/components/fixed-size-grid.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../utils/types.js');\nvar COMPONENT_NAME = \"ElTableV2Grid\";\nvar useTableGrid = function useTableGrid(props) {\n  var headerRef = vue.ref();\n  var bodyRef = vue.ref();\n  var scrollLeft = vue.ref(0);\n  var totalHeight = vue.computed(function () {\n    var data = props.data,\n      rowHeight = props.rowHeight,\n      estimatedRowHeight = props.estimatedRowHeight;\n    if (estimatedRowHeight) {\n      return;\n    }\n    return data.length * rowHeight;\n  });\n  var fixedRowHeight = vue.computed(function () {\n    var fixedData = props.fixedData,\n      rowHeight = props.rowHeight;\n    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;\n  });\n  var headerHeight = vue.computed(function () {\n    return utils.sum(props.headerHeight);\n  });\n  var gridHeight = vue.computed(function () {\n    var height = props.height;\n    return Math.max(0, height - vue.unref(headerHeight) - vue.unref(fixedRowHeight));\n  });\n  var hasHeader = vue.computed(function () {\n    return vue.unref(headerHeight) + vue.unref(fixedRowHeight) > 0;\n  });\n  var itemKey = function itemKey(_ref) {\n    var data = _ref.data,\n      rowIndex = _ref.rowIndex;\n    return data[rowIndex][props.rowKey];\n  };\n  function onItemRendered(_ref2) {\n    var rowCacheStart = _ref2.rowCacheStart,\n      rowCacheEnd = _ref2.rowCacheEnd,\n      rowVisibleStart = _ref2.rowVisibleStart,\n      rowVisibleEnd = _ref2.rowVisibleEnd;\n    var _a;\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {\n      rowCacheStart: rowCacheStart,\n      rowCacheEnd: rowCacheEnd,\n      rowVisibleStart: rowVisibleStart,\n      rowVisibleEnd: rowVisibleEnd\n    });\n  }\n  function resetAfterRowIndex(index, forceUpdate2) {\n    var _a;\n    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);\n  }\n  function scrollTo(leftOrOptions, top) {\n    var header$ = vue.unref(headerRef);\n    var body$ = vue.unref(bodyRef);\n    if (shared.isObject(leftOrOptions)) {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions.scrollLeft);\n      scrollLeft.value = leftOrOptions.scrollLeft;\n      body$ == null ? void 0 : body$.scrollTo(leftOrOptions);\n    } else {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions);\n      scrollLeft.value = leftOrOptions;\n      body$ == null ? void 0 : body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top\n      });\n    }\n  }\n  function scrollToTop(scrollTop) {\n    var _a;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.scrollTo({\n      scrollTop: scrollTop\n    });\n  }\n  function scrollToRow(row, strategy) {\n    var _a;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);\n  }\n  function forceUpdate() {\n    var _a, _b;\n    (_a = vue.unref(bodyRef)) == null ? void 0 : _a.$forceUpdate();\n    (_b = vue.unref(headerRef)) == null ? void 0 : _b.$forceUpdate();\n  }\n  vue.watch(function () {\n    return props.bodyWidth;\n  }, function () {\n    var _a;\n    if (types.isNumber(props.estimatedRowHeight)) (_a = bodyRef.value) == null ? void 0 : _a.resetAfter({\n      columnIndex: 0\n    }, false);\n  });\n  return {\n    bodyRef: bodyRef,\n    forceUpdate: forceUpdate,\n    fixedRowHeight: fixedRowHeight,\n    gridHeight: gridHeight,\n    hasHeader: hasHeader,\n    headerHeight: headerHeight,\n    headerRef: headerRef,\n    totalHeight: totalHeight,\n    itemKey: itemKey,\n    onItemRendered: onItemRendered,\n    resetAfterRowIndex: resetAfterRowIndex,\n    scrollTo: scrollTo,\n    scrollToTop: scrollToTop,\n    scrollToRow: scrollToRow,\n    scrollLeft: scrollLeft\n  };\n};\nvar TableGrid = vue.defineComponent({\n  name: COMPONENT_NAME,\n  props: grid.tableV2GridProps,\n  setup: function setup(props, _ref3) {\n    var slots = _ref3.slots,\n      expose = _ref3.expose;\n    var _vue$inject = vue.inject(tokens.TableV2InjectionKey),\n      ns = _vue$inject.ns;\n    var _useTableGrid = useTableGrid(props),\n      bodyRef = _useTableGrid.bodyRef,\n      fixedRowHeight = _useTableGrid.fixedRowHeight,\n      gridHeight = _useTableGrid.gridHeight,\n      hasHeader = _useTableGrid.hasHeader,\n      headerRef = _useTableGrid.headerRef,\n      headerHeight = _useTableGrid.headerHeight,\n      totalHeight = _useTableGrid.totalHeight,\n      forceUpdate = _useTableGrid.forceUpdate,\n      itemKey = _useTableGrid.itemKey,\n      onItemRendered = _useTableGrid.onItemRendered,\n      resetAfterRowIndex = _useTableGrid.resetAfterRowIndex,\n      scrollTo = _useTableGrid.scrollTo,\n      scrollToTop = _useTableGrid.scrollToTop,\n      scrollToRow = _useTableGrid.scrollToRow,\n      scrollLeft = _useTableGrid.scrollLeft;\n    vue.provide(\"tableV2GridScrollLeft\", scrollLeft);\n    expose({\n      forceUpdate: forceUpdate,\n      totalHeight: totalHeight,\n      scrollTo: scrollTo,\n      scrollToTop: scrollToTop,\n      scrollToRow: scrollToRow,\n      resetAfterRowIndex: resetAfterRowIndex\n    });\n    var getColumnWidth = function getColumnWidth() {\n      return props.bodyWidth;\n    };\n    return function () {\n      var cache = props.cache,\n        columns = props.columns,\n        data = props.data,\n        fixedData = props.fixedData,\n        useIsScrolling = props.useIsScrolling,\n        scrollbarAlwaysOn = props.scrollbarAlwaysOn,\n        scrollbarEndGap = props.scrollbarEndGap,\n        scrollbarStartGap = props.scrollbarStartGap,\n        style = props.style,\n        rowHeight = props.rowHeight,\n        bodyWidth = props.bodyWidth,\n        estimatedRowHeight = props.estimatedRowHeight,\n        headerWidth = props.headerWidth,\n        height = props.height,\n        width = props.width,\n        getRowHeight = props.getRowHeight,\n        onScroll = props.onScroll;\n      var isDynamicRowEnabled = types.isNumber(estimatedRowHeight);\n      var Grid = isDynamicRowEnabled ? dynamicSizeGrid[\"default\"] : fixedSizeGrid[\"default\"];\n      var _headerHeight = vue.unref(headerHeight);\n      return vue.createVNode(\"div\", {\n        \"role\": \"table\",\n        \"class\": [ns.e(\"table\"), props[\"class\"]],\n        \"style\": style\n      }, [vue.createVNode(Grid, {\n        \"ref\": bodyRef,\n        \"data\": data,\n        \"useIsScrolling\": useIsScrolling,\n        \"itemKey\": itemKey,\n        \"columnCache\": 0,\n        \"columnWidth\": isDynamicRowEnabled ? getColumnWidth : bodyWidth,\n        \"totalColumn\": 1,\n        \"totalRow\": data.length,\n        \"rowCache\": cache,\n        \"rowHeight\": isDynamicRowEnabled ? getRowHeight : rowHeight,\n        \"width\": width,\n        \"height\": vue.unref(gridHeight),\n        \"class\": ns.e(\"body\"),\n        \"role\": \"rowgroup\",\n        \"scrollbarStartGap\": scrollbarStartGap,\n        \"scrollbarEndGap\": scrollbarEndGap,\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"onScroll\": onScroll,\n        \"onItemRendered\": onItemRendered,\n        \"perfMode\": false\n      }, {\n        \"default\": function _default(params) {\n          var _a;\n          var rowData = data[params.rowIndex];\n          return (_a = slots.row) == null ? void 0 : _a.call(slots, _objectSpread(_objectSpread({}, params), {}, {\n            columns: columns,\n            rowData: rowData\n          }));\n        }\n      }), vue.unref(hasHeader) && vue.createVNode(header[\"default\"], {\n        \"ref\": headerRef,\n        \"class\": ns.e(\"header-wrapper\"),\n        \"columns\": columns,\n        \"headerData\": data,\n        \"headerHeight\": props.headerHeight,\n        \"fixedHeaderData\": fixedData,\n        \"rowWidth\": headerWidth,\n        \"rowHeight\": rowHeight,\n        \"width\": width,\n        \"height\": Math.min(_headerHeight + vue.unref(fixedRowHeight), height)\n      }, {\n        dynamic: slots.header,\n        fixed: slots.row\n      })]);\n    };\n  }\n});\nvar Table = TableGrid;\nexports[\"default\"] = Table;","map":{"version":3,"names":["COMPONENT_NAME","headerRef","vue","ref","bodyRef","scrollLeft","totalHeight","computed","data","props","rowHeight","estimatedRowHeight","length","fixedData","headerHeight","utils","sum","gridHeight","height","Math","max","unref","fixedRowHeight","hasHeader","itemKey","_ref","rowIndex","onItemRendered","_ref2","rowCacheStart","rowCacheEnd","rowVisibleStart","_a","onRowsRendered","call","rowVisibleEnd","resetAfterRowIndex","index","forceUpdate2","value","header$","body$","shared","isObject","leftOrOptions","scrollTo","scrollTop","top","scrollToTop","scrollToItem","row","strategy","forceUpdate","_b","$forceUpdate","watch","bodyWidth","types","isNumber","resetAfter","columnIndex","scrollToRow","TableGrid","defineComponent","grid","tableV2GridProps","setup","_ref3","slots","_vue$inject","ns","_useTableGrid","useTableGrid","getColumnWidth","cache","columns","useIsScrolling","scrollbarAlwaysOn","scrollbarEndGap","scrollbarStartGap","headerWidth","width","getRowHeight","onScroll","isDynamicRowEnabled","Grid","dynamicSizeGrid","fixedSizeGrid","createVNode","e","style","default","params","rowData","_objectSpread","header","min","_headerHeight","dynamic","fixed","Table"],"sources":["../../../../../../packages/components/table-v2/src/table-grid.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n  const scrollLeft = ref(0)\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (isObject(leftOrOptions)) {\n      header$?.scrollToLeft(leftOrOptions.scrollLeft)\n      scrollLeft.value = leftOrOptions.scrollLeft!\n      body$?.scrollTo(leftOrOptions)\n    } else {\n      header$?.scrollToLeft(leftOrOptions)\n      scrollLeft.value = leftOrOptions\n      body$?.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  watch(\n    () => props.bodyWidth,\n    () => {\n      if (isNumber(props.estimatedRowHeight))\n        bodyRef.value?.resetAfter({ columnIndex: 0 }, false)\n    }\n  )\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n    scrollLeft,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      scrollLeft,\n    } = useTableGrid(props)\n\n    provide('tableV2GridScrollLeft', scrollLeft)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            role=\"rowgroup\"\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}