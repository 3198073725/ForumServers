{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.symbol.js\");\nrequire(\"core-js/modules/es.symbol.description.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar types = require('../../utils/types.js');\nvar core = require('@vueuse/core');\nvar error = require('../../utils/error.js');\nvar initial = {\n  current: 0\n};\nvar zIndex = vue.ref(0);\nvar defaultInitialZIndex = 2e3;\nvar ZINDEX_INJECTION_KEY = Symbol(\"elZIndexContextKey\");\nvar zIndexContextKey = Symbol(\"zIndexContextKey\");\nvar useZIndex = function useZIndex(zIndexOverrides) {\n  var increasingInjection = vue.getCurrentInstance() ? vue.inject(ZINDEX_INJECTION_KEY, initial) : initial;\n  var zIndexInjection = zIndexOverrides || (vue.getCurrentInstance() ? vue.inject(zIndexContextKey, void 0) : void 0);\n  var initialZIndex = vue.computed(function () {\n    var zIndexFromInjection = vue.unref(zIndexInjection);\n    return types.isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;\n  });\n  var currentZIndex = vue.computed(function () {\n    return initialZIndex.value + zIndex.value;\n  });\n  var nextZIndex = function nextZIndex() {\n    increasingInjection.current++;\n    zIndex.value = increasingInjection.current;\n    return currentZIndex.value;\n  };\n  if (!core.isClient && !vue.inject(ZINDEX_INJECTION_KEY)) {\n    error.debugWarn(\"ZIndexInjection\", \"Looks like you are using server rendering, you must provide a z-index provider to ensure the hydration process to be succeed\\nusage: app.provide(ZINDEX_INJECTION_KEY, { current: 0 })\");\n  }\n  return {\n    initialZIndex: initialZIndex,\n    currentZIndex: currentZIndex,\n    nextZIndex: nextZIndex\n  };\n};\nexports.ZINDEX_INJECTION_KEY = ZINDEX_INJECTION_KEY;\nexports.defaultInitialZIndex = defaultInitialZIndex;\nexports.useZIndex = useZIndex;\nexports.zIndexContextKey = zIndexContextKey;","map":{"version":3,"names":["initial","current","zIndex","vue","ref","defaultInitialZIndex","ZINDEX_INJECTION_KEY","Symbol","zIndexContextKey","useZIndex","zIndexOverrides","increasingInjection","getCurrentInstance","inject","zIndexInjection","initialZIndex","computed","zIndexFromInjection","unref","types","isNumber","currentZIndex","value","nextZIndex","core","isClient","error","debugWarn"],"sources":["../../../../../packages/hooks/use-z-index/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, ref, unref } from 'vue'\nimport { debugWarn, isClient, isNumber } from '@element-plus/utils'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nexport interface ElZIndexInjectionContext {\n  current: number\n}\n\nconst initial: ElZIndexInjectionContext = {\n  current: 0,\n}\n\nconst zIndex = ref(0)\n\nexport const defaultInitialZIndex = 2000\n\n// For SSR\nexport const ZINDEX_INJECTION_KEY: InjectionKey<ElZIndexInjectionContext> =\n  Symbol('elZIndexContextKey')\n\nexport const zIndexContextKey: InjectionKey<Ref<number | undefined>> =\n  Symbol('zIndexContextKey')\n\nexport const useZIndex = (zIndexOverrides?: Ref<number>) => {\n  const increasingInjection = getCurrentInstance()\n    ? inject(ZINDEX_INJECTION_KEY, initial)\n    : initial\n\n  const zIndexInjection =\n    zIndexOverrides ||\n    (getCurrentInstance() ? inject(zIndexContextKey, undefined) : undefined)\n\n  const initialZIndex = computed(() => {\n    const zIndexFromInjection = unref(zIndexInjection)\n    return isNumber(zIndexFromInjection)\n      ? zIndexFromInjection\n      : defaultInitialZIndex\n  })\n\n  const currentZIndex = computed(() => initialZIndex.value + zIndex.value)\n\n  const nextZIndex = () => {\n    increasingInjection.current++\n    zIndex.value = increasingInjection.current\n    return currentZIndex.value\n  }\n\n  if (!isClient && !inject(ZINDEX_INJECTION_KEY)) {\n    debugWarn(\n      'ZIndexInjection',\n      `Looks like you are using server rendering, you must provide a z-index provider to ensure the hydration process to be succeed\nusage: app.provide(ZINDEX_INJECTION_KEY, { current: 0 })`\n    )\n  }\n\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex,\n  }\n}\n\nexport type UseZIndexReturn = ReturnType<typeof useZIndex>\n"],"mappings":";;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG;EACdC,OAAO,EAAE;AACX,CAAC;AACD,IAAMC,MAAM,GAAGC,GAAA,CAAAC,GAAG,CAAC,CAAC,CAAC;AACT,IAACC,oBAAoB,GAAG;AACxB,IAACC,oBAAoB,GAAGC,MAAM,CAAC,oBAAoB;AACnD,IAACC,gBAAgB,GAAGD,MAAM,CAAC,kBAAkB;AAC7C,IAACE,SAAS,GAAG,SAAZA,SAASA,CAAIC,eAAe,EAAK;EAC5C,IAAMC,mBAAmB,GAAGR,GAAA,CAAAS,kBAAkB,EAAE,GAAGT,GAAA,CAAAU,MAAM,CAACP,oBAAoB,EAAEN,OAAO,CAAC,GAAGA,OAAO;EAClG,IAAMc,eAAe,GAAGJ,eAAe,KAAKP,GAAA,CAAAS,kBAAkB,EAAE,GAAGT,GAAA,CAAAU,MAAM,CAACL,gBAAgB,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;EAC7G,IAAMO,aAAa,GAAGZ,GAAA,CAAAa,QAAQ,CAAC,YAAM;IACnC,IAAMC,mBAAmB,GAAGd,GAAA,CAAAe,KAAK,CAACJ,eAAe,CAAC;IAClD,OAAOK,KAAA,CAAAC,QAAQ,CAACH,mBAAmB,CAAC,GAAGA,mBAAmB,GAAGZ,oBAAoB;EACrF,CAAG,CAAC;EACF,IAAMgB,aAAa,GAAGlB,GAAA,CAAAa,QAAQ,CAAC;IAAA,OAAMD,aAAa,CAACO,KAAK,GAAGpB,MAAM,CAACoB,KAAK;EAAA,EAAC;EACxE,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBZ,mBAAmB,CAACV,OAAO,EAAE;IAC7BC,MAAM,CAACoB,KAAK,GAAGX,mBAAmB,CAACV,OAAO;IAC1C,OAAOoB,aAAa,CAACC,KAAK;EAC9B,CAAG;EACD,IAAI,CAACE,IAAA,CAAAC,QAAQ,IAAI,CAACtB,GAAA,CAAAU,MAAM,CAACP,oBAAoB,CAAC,EAAE;IAC9CoB,KAAA,CAAAC,SAAS,CAAC,iBAAiB,0LAC0B,CAAC;EAC1D;EACE,OAAO;IACLZ,aAAa,EAAbA,aAAa;IACbM,aAAa,EAAbA,aAAa;IACbE,UAAU,EAAVA;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}