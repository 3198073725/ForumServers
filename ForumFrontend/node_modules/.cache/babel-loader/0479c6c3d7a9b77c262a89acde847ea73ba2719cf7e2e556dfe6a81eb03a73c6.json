{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport request from '@/utils/request';\n\n// 模拟板块数据\nexport var mockBoards = [{\n  id: 1,\n  name: '公告板块',\n  description: '官方公告和重要信息',\n  posts_count: 25,\n  is_active: true\n}, {\n  id: 2,\n  name: '使用指南',\n  description: '论坛使用方法和常见问题解答',\n  posts_count: 18,\n  is_active: true\n}, {\n  id: 3,\n  name: '资源分享',\n  description: '分享各类学习和工作资源',\n  posts_count: 32,\n  is_active: true\n}, {\n  id: 4,\n  name: '前端开发',\n  description: '讨论前端技术和问题',\n  posts_count: 45,\n  is_active: true\n}, {\n  id: 5,\n  name: '后端开发',\n  description: '讨论后端技术和问题',\n  posts_count: 38,\n  is_active: true\n}];\n\n// 获取板块列表\nexport function getBoardList(params) {\n  return request({\n    url: '/api/v1/boards/',\n    method: 'get',\n    params: params\n  })[\"catch\"](function (error) {\n    console.error('获取板块列表失败，使用模拟数据', error);\n    // 返回模拟数据\n    return {\n      code: 0,\n      status: 0,\n      data: mockBoards,\n      count: mockBoards.length,\n      results: mockBoards\n    };\n  });\n}\n\n// 获取板块详情\nexport function getBoardDetail(id) {\n  return request({\n    url: \"/api/v1/boards/\".concat(id, \"/\"),\n    method: 'get'\n  })[\"catch\"](function (error) {\n    console.error(\"\\u83B7\\u53D6\\u677F\\u5757\\u8BE6\\u60C5(ID: \".concat(id, \")\\u5931\\u8D25\\uFF0C\\u4F7F\\u7528\\u6A21\\u62DF\\u6570\\u636E\"), error);\n    // 返回模拟数据\n    var mockBoard = mockBoards.find(function (b) {\n      return b.id === Number(id);\n    }) || {\n      id: Number(id),\n      name: '模拟板块',\n      description: '这是一个模拟的板块，用于API调用失败时显示',\n      posts_count: 10,\n      is_active: true\n    };\n    return {\n      code: 0,\n      status: 0,\n      data: mockBoard\n    };\n  });\n}\n\n// 获取热门板块\nexport function getHotBoards() {\n  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  return request({\n    url: '/api/v1/boards/hot/',\n    method: 'get',\n    params: {\n      limit: limit\n    }\n  })[\"catch\"](function (error) {\n    console.error('获取热门板块失败，使用模拟数据', error);\n    // 返回模拟数据，按帖子数量排序\n    var sortedBoards = [].concat(mockBoards).sort(function (a, b) {\n      return b.posts_count - a.posts_count;\n    }).slice(0, limit);\n    return {\n      code: 0,\n      status: 0,\n      data: sortedBoards\n    };\n  });\n}\n\n// 创建板块 (管理员)\nexport function createBoard(data) {\n  return request({\n    url: '/api/v1/boards/',\n    method: 'post',\n    data: data\n  });\n}\n\n// 更新板块 (管理员)\nexport function updateBoard(id, data) {\n  return request({\n    url: \"/api/v1/boards/\".concat(id, \"/\"),\n    method: 'put',\n    data: data\n  });\n}\n\n// 删除板块 (管理员)\nexport function deleteBoard(id) {\n  return request({\n    url: \"/api/v1/boards/\".concat(id, \"/\"),\n    method: 'delete'\n  });\n}\n\n// 重新排序板块 (管理员)\nexport function reorderBoards(data) {\n  return request({\n    url: '/api/v1/boards/reorder/',\n    method: 'post',\n    data: data\n  });\n}\n\n// 获取所有用户组 (管理员)\nexport function getGroups() {\n  return request({\n    url: '/api/v1/boards/groups/',\n    method: 'get'\n  });\n}\n\n// 获取所有用户 (管理员)\nexport function getUsers() {\n  return request({\n    url: '/api/v1/boards/users/',\n    method: 'get'\n  });\n}","map":{"version":3,"names":["request","mockBoards","id","name","description","posts_count","is_active","getBoardList","params","url","method","error","console","code","status","data","count","length","results","getBoardDetail","concat","mockBoard","find","b","Number","getHotBoards","limit","arguments","undefined","sortedBoards","sort","a","slice","createBoard","updateBoard","deleteBoard","reorderBoards","getGroups","getUsers"],"sources":["H:/ForumServers/ForumFrontend/src/api/board.js"],"sourcesContent":["import request from '@/utils/request'\n\n// 模拟板块数据\nexport const mockBoards = [\n  {\n    id: 1,\n    name: '公告板块',\n    description: '官方公告和重要信息',\n    posts_count: 25,\n    is_active: true\n  },\n  {\n    id: 2,\n    name: '使用指南',\n    description: '论坛使用方法和常见问题解答',\n    posts_count: 18,\n    is_active: true\n  },\n  {\n    id: 3,\n    name: '资源分享',\n    description: '分享各类学习和工作资源',\n    posts_count: 32,\n    is_active: true\n  },\n  {\n    id: 4,\n    name: '前端开发',\n    description: '讨论前端技术和问题',\n    posts_count: 45,\n    is_active: true\n  },\n  {\n    id: 5,\n    name: '后端开发',\n    description: '讨论后端技术和问题',\n    posts_count: 38,\n    is_active: true\n  }\n]\n\n// 获取板块列表\nexport function getBoardList(params) {\n  return request({\n    url: '/api/v1/boards/',\n    method: 'get',\n    params\n  }).catch(error => {\n    console.error('获取板块列表失败，使用模拟数据', error)\n    // 返回模拟数据\n    return {\n      code: 0,\n      status: 0,\n      data: mockBoards,\n      count: mockBoards.length,\n      results: mockBoards\n    }\n  })\n}\n\n// 获取板块详情\nexport function getBoardDetail(id) {\n  return request({\n    url: `/api/v1/boards/${id}/`,\n    method: 'get'\n  }).catch(error => {\n    console.error(`获取板块详情(ID: ${id})失败，使用模拟数据`, error)\n    // 返回模拟数据\n    const mockBoard = mockBoards.find(b => b.id === Number(id)) || {\n      id: Number(id),\n      name: '模拟板块',\n      description: '这是一个模拟的板块，用于API调用失败时显示',\n      posts_count: 10,\n      is_active: true\n    }\n    return {\n      code: 0,\n      status: 0,\n      data: mockBoard\n    }\n  })\n}\n\n// 获取热门板块\nexport function getHotBoards(limit = 5) {\n  return request({\n    url: '/api/v1/boards/hot/',\n    method: 'get',\n    params: { limit }\n  }).catch(error => {\n    console.error('获取热门板块失败，使用模拟数据', error)\n    // 返回模拟数据，按帖子数量排序\n    const sortedBoards = [...mockBoards].sort((a, b) => b.posts_count - a.posts_count).slice(0, limit)\n    return {\n      code: 0,\n      status: 0,\n      data: sortedBoards\n    }\n  })\n}\n\n// 创建板块 (管理员)\nexport function createBoard(data) {\n  return request({\n    url: '/api/v1/boards/',\n    method: 'post',\n    data\n  })\n}\n\n// 更新板块 (管理员)\nexport function updateBoard(id, data) {\n  return request({\n    url: `/api/v1/boards/${id}/`,\n    method: 'put',\n    data\n  })\n}\n\n// 删除板块 (管理员)\nexport function deleteBoard(id) {\n  return request({\n    url: `/api/v1/boards/${id}/`,\n    method: 'delete'\n  })\n}\n\n// 重新排序板块 (管理员)\nexport function reorderBoards(data) {\n  return request({\n    url: '/api/v1/boards/reorder/',\n    method: 'post',\n    data\n  })\n}\n\n// 获取所有用户组 (管理员)\nexport function getGroups() {\n  return request({\n    url: '/api/v1/boards/groups/',\n    method: 'get'\n  })\n}\n\n// 获取所有用户 (管理员)\nexport function getUsers() {\n  return request({\n    url: '/api/v1/boards/users/',\n    method: 'get'\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}