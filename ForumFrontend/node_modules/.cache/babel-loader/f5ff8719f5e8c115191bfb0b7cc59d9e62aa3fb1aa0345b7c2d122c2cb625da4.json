{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost } from '@/api/post';\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  data: function data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      forceRefresh: false,\n      // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false,\n      // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [{\n          required: true,\n          message: '请输入帖子标题',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 100,\n          message: '标题长度在2到100个字符之间',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入帖子内容',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: '内容至少5个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAuthenticated', 'isAdmin', 'userId'])), {}, {\n    isLogin: function isLogin() {\n      return this.isAuthenticated;\n    },\n    isPostAuthor: function isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId;\n    },\n    canManagePost: function canManagePost() {\n      return this.isLogin && (this.isAdmin || this.isPostAuthor);\n    }\n  }),\n  created: function created() {\n    var postId = this.$route.params.id;\n    if (postId) {\n      this.fetchPostDetail(postId);\n      this.fetchComments(postId);\n    } else {\n      this.$router.push({\n        name: 'PostList'\n      });\n    }\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取帖子详情\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              console.log('开始获取帖子详情, ID:', id);\n              _context.next = 5;\n              return getPostDetail(id);\n            case 5:\n              response = _context.sent;\n              console.log('帖子详情响应:', response);\n              if (response && response.code === 0 && response.data) {\n                console.log('使用code=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else if (response && response.status === 0 && response.data) {\n                console.log('使用status=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else {\n                console.error('获取帖子详情失败:', response ? response.msg : '未知错误');\n                _this.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '获取帖子详情失败');\n\n                // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n                // 添加延时重试\n                if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n                  console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情');\n                  setTimeout(function () {\n                    _this.fetchPostDetail(id);\n                  }, 1000);\n                } else {\n                  // 如果不是从发帖页面跳转，则返回帖子列表\n                  setTimeout(function () {\n                    _this.$router.push({\n                      name: 'PostList'\n                    });\n                  }, 1500);\n                }\n              }\n              _context.next = 15;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取帖子详情失败:', _context.t0);\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n\n              // 添加延时重试\n              if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n                console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情');\n                setTimeout(function () {\n                  _this.fetchPostDetail(id);\n                }, 1000);\n              } else {\n                // 如果不是从发帖页面跳转，则返回帖子列表\n                setTimeout(function () {\n                  _this.$router.push({\n                    name: 'PostList'\n                  });\n                }, 1500);\n              }\n            case 15:\n              _context.prev = 15;\n              _this.loading = false;\n              return _context.finish(15);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 10, 15, 18]]);\n      }))();\n    },\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite: function checkLikeAndFavorite() {\n      // 这里需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      this.isLiked = false;\n      this.isFavorited = false;\n    },\n    // 获取评论列表\n    fetchComments: function fetchComments(postId) {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this2.commentsLoading && !_this2.forceRefresh)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 2:\n              _this2.commentsLoading = true;\n              _context2.prev = 3;\n              _context2.next = 6;\n              return getPostComments(postId);\n            case 6:\n              response = _context2.sent;\n              if (response.code === 0) {\n                _this2.comments = response.data.results || [];\n                _this2.commentsTotal = response.data.count || 0;\n\n                // 更新帖子评论数，确保与后端同步\n                if (_this2.post && typeof response.data.count === 'number') {\n                  _this2.post.comments_count = response.data.count;\n                }\n              } else {\n                _this2.$message.error(response.msg || '获取评论列表失败');\n              }\n              _context2.next = 14;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.error('获取评论列表失败:', _context2.t0);\n              _this2.$message.error('获取评论列表失败');\n            case 14:\n              _context2.prev = 14;\n              _this2.commentsLoading = false;\n              _this2.forceRefresh = false; // 重置强制刷新标志\n              return _context2.finish(14);\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 10, 14, 18]]);\n      }))();\n    },\n    // 评论分页变化\n    handleCommentsPageChange: function handleCommentsPageChange(page) {\n      this.commentsQuery.page = page;\n      this.fetchComments(this.post.id);\n    },\n    // 前往板块页面\n    goToBoard: function goToBoard() {\n      if (this.post.board) {\n        this.$router.push({\n          name: 'BoardDetail',\n          params: {\n            id: this.post.board.id\n          }\n        });\n      }\n    },\n    // 点赞帖子\n    handleLike: function handleLike() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this3.isLogin) {\n                _context3.next = 4;\n                break;\n              }\n              _this3.$message.warning('请先登录');\n              _this3.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this3.$route.fullPath\n                }\n              });\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return likePost(_this3.post.id);\n            case 7:\n              response = _context3.sent;\n              if (response.code === 0) {\n                _this3.isLiked = !_this3.isLiked;\n                // 更新点赞数\n                if (_this3.isLiked) {\n                  _this3.post.likes_count++;\n                } else {\n                  _this3.post.likes_count--;\n                }\n                _this3.$message.success(response.msg || (_this3.isLiked ? '点赞成功' : '取消点赞成功'));\n              } else {\n                _this3.$message.error(response.msg || '操作失败');\n              }\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('点赞操作失败:', _context3.t0);\n              _this3.$message.error('点赞操作失败');\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 11]]);\n      }))();\n    },\n    // 收藏帖子\n    handleFavorite: function handleFavorite() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this4.isLogin) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请先登录');\n              _this4.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this4.$route.fullPath\n                }\n              });\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return favoritePost(_this4.post.id);\n            case 7:\n              response = _context4.sent;\n              if (response.code === 0) {\n                _this4.isFavorited = !_this4.isFavorited;\n                _this4.$message.success(response.msg || (_this4.isFavorited ? '收藏成功' : '取消收藏成功'));\n              } else {\n                _this4.$message.error(response.msg || '操作失败');\n              }\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('收藏操作失败:', _context4.t0);\n              _this4.$message.error('收藏操作失败');\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 11]]);\n      }))();\n    },\n    // 帖子管理操作\n    handleCommand: function handleCommand(command) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = command;\n              _context5.next = _context5.t0 === 'pin' ? 3 : _context5.t0 === 'feature' ? 5 : 7;\n              break;\n            case 3:\n              _this5.handlePinPost();\n              return _context5.abrupt(\"break\", 7);\n            case 5:\n              _this5.handleFeaturePost();\n              return _context5.abrupt(\"break\", 7);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // 编辑帖子\n    handleEditPost: function handleEditPost() {\n      // 初始化编辑表单数据\n      this.editPostForm.title = this.post.title;\n      this.editPostForm.content = this.post.content;\n      // 进入编辑状态\n      this.isEditing = true;\n    },\n    // 取消编辑\n    cancelEdit: function cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false;\n      // 重置表单数据\n      this.editPostForm.title = this.post.title;\n      this.editPostForm.content = this.post.content;\n    },\n    // 提交编辑\n    submitEdit: function submitEdit() {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var postData, response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (_this6.editPostForm.title.trim()) {\n                _context6.next = 3;\n                break;\n              }\n              _this6.$message.warning('标题不能为空');\n              return _context6.abrupt(\"return\");\n            case 3:\n              if (_this6.editPostForm.content.trim()) {\n                _context6.next = 6;\n                break;\n              }\n              _this6.$message.warning('内容不能为空');\n              return _context6.abrupt(\"return\");\n            case 6:\n              _this6.editPostSubmitting = true;\n              _context6.prev = 7;\n              // 确保发送正确的数据格式\n              postData = {\n                title: _this6.editPostForm.title.trim(),\n                content: _this6.editPostForm.content.trim(),\n                board: _this6.post.board.id // 需要包含板块ID\n              };\n              console.log('提交更新帖子数据:', postData);\n              _context6.next = 12;\n              return updatePost(_this6.post.id, postData);\n            case 12:\n              response = _context6.sent;\n              if (response && response.code === 0) {\n                // 更新成功\n                _this6.$message.success('帖子更新成功');\n\n                // 更新当前页面的帖子数据\n                _this6.post.title = _this6.editPostForm.title;\n                _this6.post.content = _this6.editPostForm.content;\n                // 更新帖子的更新时间\n                if (response.data && response.data.updated_at) {\n                  _this6.post.updated_at = response.data.updated_at;\n                }\n\n                // 强制退出编辑状态\n                console.log('强制退出编辑状态');\n                // 使用直接赋值和延时双重保险确保状态更新\n                _this6.isEditing = false;\n\n                // 如果直接赋值不起作用，使用延时函数再次尝试\n                setTimeout(function () {\n                  if (_this6.isEditing) {\n                    console.log('使用setTimeout再次尝试退出编辑状态');\n                    _this6.isEditing = false;\n                  }\n                  console.log('编辑状态最终设置为:', _this6.isEditing);\n                }, 100);\n              } else {\n                _this6.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '更新失败，请稍后重试');\n                // 失败时也退出编辑状态\n                _this6.isEditing = false;\n                setTimeout(function () {\n                  if (_this6.isEditing) {\n                    _this6.isEditing = false;\n                  }\n                }, 100);\n              }\n              _context6.next = 22;\n              break;\n            case 16:\n              _context6.prev = 16;\n              _context6.t0 = _context6[\"catch\"](7);\n              console.error('更新帖子失败:', _context6.t0);\n              _this6.$message.error('更新帖子失败，请检查网络连接');\n\n              // 出错时也退出编辑状态\n              _this6.isEditing = false;\n              setTimeout(function () {\n                if (_this6.isEditing) {\n                  _this6.isEditing = false;\n                }\n              }, 100);\n            case 22:\n              _context6.prev = 22;\n              _this6.editPostSubmitting = false;\n              return _context6.finish(22);\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[7, 16, 22, 25]]);\n      }))();\n    },\n    // 删除帖子\n    handleDeletePost: function handleDeletePost() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var loading, response;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return _this7.$confirm('确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。', '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 3:\n              // 显示加载状态\n              loading = _this7.$loading({\n                lock: true,\n                text: '正在删除帖子...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context7.prev = 4;\n              _context7.next = 7;\n              return deletePost(_this7.post.id);\n            case 7:\n              response = _context7.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，直接返回上一级路由\n                console.log('帖子删除成功，正在返回上一级路由...');\n                // 返回上一级路由\n                _this7.$router.go(-1);\n              } else {\n                _this7.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context7.next = 17;\n              break;\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](4);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除帖子请求失败:', _context7.t0);\n              _this7.$message.error('删除帖子失败，请检查网络连接');\n            case 17:\n              _context7.next = 22;\n              break;\n            case 19:\n              _context7.prev = 19;\n              _context7.t1 = _context7[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context7.t1 !== 'cancel') {\n                console.error('删除帖子操作异常:', _context7.t1);\n                _this7.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 22:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 19], [4, 12]]);\n      }))();\n    },\n    // 置顶/取消置顶帖子\n    handlePinPost: function handlePinPost() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return pinPost(_this8.post.id);\n            case 3:\n              response = _context8.sent;\n              if (response.code === 0) {\n                _this8.post.is_pinned = !_this8.post.is_pinned;\n                _this8.$message.success(response.msg || (_this8.post.is_pinned ? '置顶成功' : '取消置顶成功'));\n              } else {\n                _this8.$message.error(response.msg || '操作失败');\n              }\n              _context8.next = 11;\n              break;\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('置顶操作失败:', _context8.t0);\n              _this8.$message.error('置顶操作失败');\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 7]]);\n      }))();\n    },\n    // 加精/取消加精帖子\n    handleFeaturePost: function handleFeaturePost() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return featurePost(_this9.post.id);\n            case 3:\n              response = _context9.sent;\n              if (response.code === 0) {\n                _this9.post.is_featured = !_this9.post.is_featured;\n                _this9.$message.success(response.msg || (_this9.post.is_featured ? '加精成功' : '取消加精成功'));\n              } else {\n                _this9.$message.error(response.msg || '操作失败');\n              }\n              _context9.next = 11;\n              break;\n            case 7:\n              _context9.prev = 7;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error('加精操作失败:', _context9.t0);\n              _this9.$message.error('加精操作失败');\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[0, 7]]);\n      }))();\n    },\n    // 提交评论\n    submitComment: function submitComment() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var response, userInfo, newComment;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              if (_this0.isLogin) {\n                _context0.next = 4;\n                break;\n              }\n              _this0.$message.warning('请先登录');\n              _this0.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this0.$route.fullPath\n                }\n              });\n              return _context0.abrupt(\"return\");\n            case 4:\n              if (_this0.commentContent.trim()) {\n                _context0.next = 7;\n                break;\n              }\n              _this0.$message.warning('评论内容不能为空');\n              return _context0.abrupt(\"return\");\n            case 7:\n              _context0.prev = 7;\n              console.log('提交评论数据:', {\n                post: _this0.post.id,\n                content: _this0.commentContent\n              });\n              _context0.next = 11;\n              return createComment({\n                post: _this0.post.id,\n                content: _this0.commentContent\n              });\n            case 11:\n              response = _context0.sent;\n              console.log('评论提交响应:', response);\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 不显示成功消息\n                console.log('评论发表成功，不显示成功消息');\n\n                // 清空评论内容\n                _this0.commentContent = '';\n\n                // 获取新评论数据并直接添加到评论列表\n                if (response.data) {\n                  console.log('获取到新评论数据:', response.data);\n\n                  // 获取当前用户信息\n                  userInfo = _this0.$store.getters.userInfo;\n                  console.log('当前用户信息:', userInfo);\n\n                  // 构建评论对象\n                  newComment = _objectSpread(_objectSpread({}, response.data), {}, {\n                    user: userInfo,\n                    // 使用当前用户信息\n                    replies: [],\n                    // 初始化回复列表为空\n                    created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n                  });\n                  console.log('构建的新评论对象:', newComment);\n\n                  // 将新评论添加到评论列表的开头\n                  _this0.comments.unshift(newComment);\n                  console.log('更新后的评论列表:', _this0.comments);\n\n                  // 更新评论总数\n                  _this0.commentsTotal++;\n\n                  // 更新帖子评论数\n                  _this0.post.comments_count = (_this0.post.comments_count || 0) + 1;\n                } else {\n                  // 如果没有返回评论数据，则刷新评论列表\n                  console.log('未获取到评论数据，刷新评论列表');\n                  _this0.fetchComments(_this0.post.id);\n                }\n              } else {\n                console.error('评论发表失败，响应:', response);\n                _this0.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '评论发表失败');\n              }\n              _context0.next = 20;\n              break;\n            case 16:\n              _context0.prev = 16;\n              _context0.t0 = _context0[\"catch\"](7);\n              console.error('评论发表失败:', _context0.t0);\n              _this0.$message.error('评论发表失败，请检查网络连接');\n            case 20:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, null, [[7, 16]]);\n      }))();\n    },\n    // 回复评论\n    handleReply: function handleReply(comment) {\n      var reply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!this.isLogin) {\n        this.$message.warning('请先登录');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: this.$route.fullPath\n          }\n        });\n        return;\n      }\n      this.replyingTo = comment.id;\n      this.replyContent = reply ? \"@\".concat(reply.user.nickname || reply.user.username, \" \") : '';\n    },\n    // 取消回复\n    cancelReply: function cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    // 提交回复\n    submitReply: function submitReply(comment) {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        var response, userInfo, newReply;\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              if (_this1.isLogin) {\n                _context1.next = 4;\n                break;\n              }\n              _this1.$message.warning('请先登录');\n              _this1.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this1.$route.fullPath\n                }\n              });\n              return _context1.abrupt(\"return\");\n            case 4:\n              if (_this1.replyContent.trim()) {\n                _context1.next = 7;\n                break;\n              }\n              _this1.$message.warning('回复内容不能为空');\n              return _context1.abrupt(\"return\");\n            case 7:\n              _context1.prev = 7;\n              console.log('提交回复数据:', {\n                post: _this1.post.id,\n                parent: comment.id,\n                content: _this1.replyContent\n              });\n              _context1.next = 11;\n              return replyComment(_this1.post.id, comment.id, _this1.replyContent);\n            case 11:\n              response = _context1.sent;\n              console.log('回复提交响应:', response);\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 不显示成功消息\n                console.log('回复发表成功，不显示成功消息');\n\n                // 清空回复状态\n                _this1.replyingTo = null;\n                _this1.replyContent = '';\n\n                // 获取新回复数据并直接添加到回复列表\n                if (response.data) {\n                  console.log('获取到新回复数据:', response.data);\n\n                  // 获取当前用户信息\n                  userInfo = _this1.$store.getters.userInfo;\n                  console.log('当前用户信息:', userInfo);\n\n                  // 构建回复对象\n                  newReply = _objectSpread(_objectSpread({}, response.data), {}, {\n                    user: userInfo,\n                    // 使用当前用户信息\n                    created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n                  });\n                  console.log('构建的新回复对象:', newReply);\n\n                  // 将新回复添加到对应评论的回复列表\n                  if (!comment.replies) {\n                    comment.replies = [];\n                  }\n                  comment.replies.push(newReply);\n                  console.log('更新后的回复列表:', comment.replies);\n\n                  // 更新帖子评论数\n                  _this1.post.comments_count = (_this1.post.comments_count || 0) + 1;\n                } else {\n                  // 如果没有返回回复数据，则刷新评论列表\n                  console.log('未获取到回复数据，刷新评论列表');\n                  _this1.fetchComments(_this1.post.id);\n                }\n              } else {\n                console.error('回复发表失败，响应:', response);\n                _this1.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '回复发表失败');\n              }\n              _context1.next = 20;\n              break;\n            case 16:\n              _context1.prev = 16;\n              _context1.t0 = _context1[\"catch\"](7);\n              console.error('回复发表失败:', _context1.t0);\n              _this1.$message.error('回复发表失败，请检查网络连接');\n            case 20:\n            case \"end\":\n              return _context1.stop();\n          }\n        }, _callee1, null, [[7, 16]]);\n      }))();\n    },\n    // 判断是否可以管理评论\n    canManageComment: function canManageComment(comment) {\n      return this.isLogin && (this.isAdmin || comment.user && comment.user.id === this.userId);\n    },\n    // 删除评论\n    handleDeleteComment: function handleDeleteComment(comment) {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _error$response$data;\n        var hasReplies, confirmMessage, loading, commentId, response, commentsToDecrease;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              // 打印评论对象，用于调试\n              console.log('要删除的评论对象:', comment);\n\n              // 确保评论对象和ID存在\n              if (!(!comment || typeof comment.id === 'undefined')) {\n                _context10.next = 5;\n                break;\n              }\n              _this10.$message.error('评论数据无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 5:\n              // 判断是否有回复，提供更详细的确认信息\n              hasReplies = comment.replies && comment.replies.length > 0;\n              confirmMessage = hasReplies ? \"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u8FD9\\u6761\\u8BC4\\u8BBA\\u5417\\uFF1F\\u5220\\u9664\\u540E\\u5C06\\u540C\\u65F6\\u5220\\u9664\\u8BE5\\u8BC4\\u8BBA\\u4E0B\\u7684 \".concat(comment.replies.length, \" \\u6761\\u56DE\\u590D\\uFF0C\\u4E14\\u65E0\\u6CD5\\u6062\\u590D\\u3002\") : '确定要删除这条评论吗？删除后将无法恢复。';\n              _context10.next = 9;\n              return _this10.$confirm(confirmMessage, '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 9:\n              // 显示加载状态\n              loading = _this10.$loading({\n                lock: true,\n                text: '正在删除评论...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context10.prev = 10;\n              // 再次确认评论ID\n              commentId = parseInt(comment.id);\n              if (!isNaN(commentId)) {\n                _context10.next = 16;\n                break;\n              }\n              loading.close();\n              _this10.$message.error('评论ID格式无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 16:\n              console.log('正在删除评论，ID:', commentId, '是否为回复:', !!comment.parent);\n              _context10.next = 19;\n              return deleteComment(commentId);\n            case 19:\n              response = _context10.sent;\n              loading.close(); // 关闭加载状态\n              if (!(response.code === 0)) {\n                _context10.next = 31;\n                break;\n              }\n              // 计算需要减少的评论数\n              commentsToDecrease = hasReplies ? 1 + comment.replies.length : 1; // 更新帖子评论数\n              _this10.post.comments_count = Math.max(0, _this10.post.comments_count - commentsToDecrease);\n\n              // 标记为加载中，防止用户重复操作\n              _this10.commentsLoading = true;\n\n              // 强制刷新评论列表\n              _this10.forceRefresh = true;\n              _context10.next = 28;\n              return _this10.fetchComments(_this10.post.id);\n            case 28:\n              // 显示成功提示\n              _this10.$message.success('评论删除成功');\n              _context10.next = 32;\n              break;\n            case 31:\n              _this10.$message.error(response.msg || '删除失败，请稍后重试');\n            case 32:\n              _context10.next = 50;\n              break;\n            case 34:\n              _context10.prev = 34;\n              _context10.t0 = _context10[\"catch\"](10);\n              loading.close();\n              console.error('删除评论失败:', _context10.t0);\n\n              // 根据错误类型显示不同的错误信息\n              if (!_context10.t0.response) {\n                _context10.next = 49;\n                break;\n              }\n              _context10.t1 = _context10.t0.response.status;\n              _context10.next = _context10.t1 === 403 ? 42 : _context10.t1 === 404 ? 44 : 46;\n              break;\n            case 42:\n              _this10.$message.error('您没有权限删除此评论');\n              return _context10.abrupt(\"break\", 47);\n            case 44:\n              _this10.$message.error('评论不存在或已被删除');\n              return _context10.abrupt(\"break\", 47);\n            case 46:\n              _this10.$message.error(((_error$response$data = _context10.t0.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || '删除失败，请稍后重试');\n            case 47:\n              _context10.next = 50;\n              break;\n            case 49:\n              if (_context10.t0.request) {\n                _this10.$message.error('网络连接失败，请检查网络后重试');\n              } else {\n                _this10.$message.error('删除失败，请稍后重试');\n              }\n            case 50:\n              _context10.next = 58;\n              break;\n            case 52:\n              _context10.prev = 52;\n              _context10.t2 = _context10[\"catch\"](0);\n              if (!(_context10.t2 === 'cancel')) {\n                _context10.next = 56;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 56:\n              console.error('删除评论操作失败:', _context10.t2);\n              _this10.$message.error('操作失败，请稍后重试');\n            case 58:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[0, 52], [10, 34]]);\n      }))();\n    },\n    handleContentChange: function handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n};","map":{"version":3,"names":["getPostDetail","likePost","favoritePost","pinPost","featurePost","deletePost","updatePost","getPostComments","createComment","replyComment","deleteComment","formatDateTime","mapGetters","RichTextEditor","formatDate","date","name","components","data","loading","commentsLoading","post","isLiked","isFavorited","comments","commentsTotal","commentsQuery","page","limit","commentContent","replyingTo","replyContent","forceRefresh","isEditing","editPostSubmitting","editPostForm","title","content","postRules","required","message","trigger","min","max","computed","_objectSpread","isLogin","isAuthenticated","isPostAuthor","user","id","userId","canManagePost","isAdmin","created","postId","$route","params","fetchPostDetail","fetchComments","$router","push","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","console","log","sent","code","checkLikeAndFavorite","status","error","msg","$message","document","referrer","includes","setTimeout","t0","finish","stop","_this2","_callee2","_callee2$","_context2","abrupt","Promise","resolve","results","count","comments_count","handleCommentsPageChange","goToBoard","board","handleLike","_this3","_callee3","_callee3$","_context3","warning","query","redirect","fullPath","likes_count","success","handleFavorite","_this4","_callee4","_callee4$","_context4","handleCommand","command","_this5","_callee5","_callee5$","_context5","handlePinPost","handleFeaturePost","handleEditPost","cancelEdit","submitEdit","_this6","_callee6","postData","_callee6$","_context6","trim","updated_at","handleDeletePost","_this7","_callee7","_callee7$","_context7","$confirm","confirmButtonText","cancelButtonText","type","distinguishCancelAndClose","closeOnClickModal","$loading","lock","text","spinner","background","close","go","t1","_this8","_callee8","_callee8$","_context8","is_pinned","_this9","_callee9","_callee9$","_context9","is_featured","submitComment","_this0","_callee0","userInfo","newComment","_callee0$","_context0","$store","getters","replies","created_at","Date","toISOString","unshift","handleReply","comment","reply","arguments","length","undefined","concat","nickname","username","cancelReply","submitReply","_this1","_callee1","newReply","_callee1$","_context1","parent","canManageComment","handleDeleteComment","_this10","_callee10","_error$response$data","hasReplies","confirmMessage","commentId","commentsToDecrease","_callee10$","_context10","parseInt","isNaN","Math","request","t2","handleContentChange","value"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <!-- 非编辑状态下的标题 -->\n          <h1 v-if=\"!isEditing\" class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <!-- 编辑状态下的标题输入框 -->\n          <div v-else class=\"post-title-edit\">\n            <el-input v-model=\"editPostForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n          </div>\n\n          <div class=\"post-meta\">\n            <div class=\"post-author\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <i class=\"el-icon-s-grid\"></i>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 非编辑状态下的内容 -->\n        <div v-if=\"!isEditing\" class=\"post-content\" v-html=\"post.content\"></div>\n\n        <!-- 编辑状态下的内容输入框 -->\n        <div v-else class=\"post-content-edit\">\n          <el-input\n            v-model=\"editPostForm.title\"\n            placeholder=\"请输入帖子标题\"\n          ></el-input>\n          <rich-text-editor\n            v-model=\"editPostForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n          <!-- 编辑状态下的操作按钮 -->\n          <div class=\"edit-actions\">\n            <el-button @click=\"cancelEdit\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitEdit\" :loading=\"editPostSubmitting\">提交</el-button>\n          </div>\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n            <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n            <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditPost\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeletePost\"\n              >\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-star-on\"\n                @click=\"handleLike\"\n              >\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-collection-tag\"\n                @click=\"handleFavorite\"\n              >\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\" icon=\"el-icon-setting\">\n                管理\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <i class=\"el-icon-chat-dot-round\"></i>\n        <p>暂无评论，快来发表第一条评论吧！</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div\n          v-for=\"comment in comments\"\n          :key=\"comment.id\"\n          class=\"comment-item\"\n        >\n          <div class=\"comment-header\">\n            <div class=\"comment-author\">\n              <el-avatar :size=\"32\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ comment.user?.nickname || comment.user?.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\">\n              <el-button text size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n              <!-- 删除评论按钮 -->\n              <el-button\n                v-if=\"canManageComment(comment)\"\n                text\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeleteComment(comment)\"\n              >删除</el-button>\n            </div>\n          </div>\n\n          <div class=\"comment-content\">\n            {{ comment.content }}\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                :disabled=\"!replyContent.trim()\"\n                @click=\"submitReply(comment)\"\n              >\n                回复\n              </el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div\n              v-for=\"reply in comment.replies\"\n              :key=\"reply.id\"\n              class=\"reply-item\"\n            >\n              <div class=\"reply-header\">\n                <div class=\"reply-author\">\n                  <el-avatar :size=\"24\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"author-info\">\n                    <div class=\"author-name\">{{ reply.user?.nickname || reply.user?.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\">\n                  <el-button text size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n                  <!-- 删除回复按钮 -->\n                  <el-button\n                    v-if=\"canManageComment(reply)\"\n                    text\n                    type=\"danger\"\n                    size=\"small\"\n                    icon=\"el-icon-delete\"\n                    @click=\"handleDeleteComment(reply)\"\n                  >删除</el-button>\n                </div>\n              </div>\n\n              <div class=\"reply-content\">\n                {{ reply.content }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论分页 -->\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          :current-page=\"commentsQuery.page\"\n          @update:current-page=\"val => commentsQuery.page = val\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost } from '@/api/post'\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n\n      forceRefresh: false, // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false, // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '标题长度在2到100个字符之间', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 5, message: '内容至少5个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    const postId = this.$route.params.id\n    if (postId) {\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        console.log('开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        console.log('帖子详情响应:', response)\n\n        if (response && response.code === 0 && response.data) {\n          console.log('使用code=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else if (response && response.status === 0 && response.data) {\n          console.log('使用status=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else {\n          console.error('获取帖子详情失败:', response ? response.msg : '未知错误')\n          this.$message.error(response?.msg || '获取帖子详情失败')\n\n          // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n          // 添加延时重试\n          if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n            console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情')\n            setTimeout(() => {\n              this.fetchPostDetail(id)\n            }, 1000)\n          } else {\n            // 如果不是从发帖页面跳转，则返回帖子列表\n            setTimeout(() => {\n              this.$router.push({ name: 'PostList' })\n            }, 1500)\n          }\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败，请稍后再试')\n\n        // 添加延时重试\n        if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n          console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情')\n          setTimeout(() => {\n            this.fetchPostDetail(id)\n          }, 1000)\n        } else {\n          // 如果不是从发帖页面跳转，则返回帖子列表\n          setTimeout(() => {\n            this.$router.push({ name: 'PostList' })\n          }, 1500)\n        }\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite() {\n      // 这里需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      this.isLiked = false\n      this.isFavorited = false\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n\n      try {\n        const response = await getPostComments(postId)\n        if (response.code === 0) {\n          this.comments = response.data.results || []\n          this.commentsTotal = response.data.count || 0\n\n          // 更新帖子评论数，确保与后端同步\n          if (this.post && typeof response.data.count === 'number') {\n            this.post.comments_count = response.data.count\n          }\n        } else {\n          this.$message.error(response.msg || '获取评论列表失败')\n        }\n      } catch (error) {\n        console.error('获取评论列表失败:', error)\n        this.$message.error('获取评论列表失败')\n      } finally {\n        this.commentsLoading = false\n        this.forceRefresh = false // 重置强制刷新标志\n      }\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        if (response.code === 0) {\n          this.isLiked = !this.isLiked\n          // 更新点赞数\n          if (this.isLiked) {\n            this.post.likes_count++\n          } else {\n            this.post.likes_count--\n          }\n          this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('点赞操作失败:', error)\n        this.$message.error('点赞操作失败')\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await favoritePost(this.post.id)\n        if (response.code === 0) {\n          this.isFavorited = !this.isFavorited\n          this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        this.$message.error('收藏操作失败')\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    },\n\n    // 编辑帖子\n    handleEditPost() {\n      // 初始化编辑表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n      // 进入编辑状态\n      this.isEditing = true\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false\n      // 重置表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n    },\n\n    // 提交编辑\n    async submitEdit() {\n      // 表单验证\n      if (!this.editPostForm.title.trim()) {\n        this.$message.warning('标题不能为空')\n        return\n      }\n\n      if (!this.editPostForm.content.trim()) {\n        this.$message.warning('内容不能为空')\n        return\n      }\n\n      this.editPostSubmitting = true\n      try {\n        // 确保发送正确的数据格式\n        const postData = {\n          title: this.editPostForm.title.trim(),\n          content: this.editPostForm.content.trim(),\n          board: this.post.board.id // 需要包含板块ID\n        }\n\n        console.log('提交更新帖子数据:', postData)\n\n        const response = await updatePost(this.post.id, postData)\n\n        if (response && response.code === 0) {\n          // 更新成功\n          this.$message.success('帖子更新成功')\n\n          // 更新当前页面的帖子数据\n          this.post.title = this.editPostForm.title\n          this.post.content = this.editPostForm.content\n          // 更新帖子的更新时间\n          if (response.data && response.data.updated_at) {\n            this.post.updated_at = response.data.updated_at\n          }\n\n          // 强制退出编辑状态\n          console.log('强制退出编辑状态')\n          // 使用直接赋值和延时双重保险确保状态更新\n          this.isEditing = false\n\n          // 如果直接赋值不起作用，使用延时函数再次尝试\n          setTimeout(() => {\n            if (this.isEditing) {\n              console.log('使用setTimeout再次尝试退出编辑状态')\n              this.isEditing = false\n            }\n            console.log('编辑状态最终设置为:', this.isEditing)\n          }, 100)\n        } else {\n          this.$message.error(response?.msg || '更新失败，请稍后重试')\n          // 失败时也退出编辑状态\n          this.isEditing = false\n          setTimeout(() => {\n            if (this.isEditing) {\n              this.isEditing = false\n            }\n          }, 100)\n        }\n      } catch (error) {\n        console.error('更新帖子失败:', error)\n        this.$message.error('更新帖子失败，请检查网络连接')\n\n        // 出错时也退出编辑状态\n        this.isEditing = false\n        setTimeout(() => {\n          if (this.isEditing) {\n            this.isEditing = false\n          }\n        }, 100)\n      } finally {\n        this.editPostSubmitting = false\n      }\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回上一级路由\n            console.log('帖子删除成功，正在返回上一级路由...')\n            // 返回上一级路由\n            this.$router.go(-1)\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        console.log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 获取新评论数据并直接添加到评论列表\n          if (response.data) {\n            console.log('获取到新评论数据:', response.data)\n\n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            console.log('当前用户信息:', userInfo)\n\n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              user: userInfo, // 使用当前用户信息\n              replies: [], // 初始化回复列表为空\n              created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n            };\n\n            console.log('构建的新评论对象:', newComment)\n\n            // 将新评论添加到评论列表的开头\n            this.comments.unshift(newComment);\n            console.log('更新后的评论列表:', this.comments)\n\n            // 更新评论总数\n            this.commentsTotal++;\n\n            // 更新帖子评论数\n            this.post.comments_count = (this.post.comments_count || 0) + 1;\n          } else {\n            // 如果没有返回评论数据，则刷新评论列表\n            console.log('未获取到评论数据，刷新评论列表')\n            this.fetchComments(this.post.id);\n          }\n        } else {\n          console.error('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        console.error('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        console.log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('回复发表成功，不显示成功消息')\n\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 获取新回复数据并直接添加到回复列表\n          if (response.data) {\n            console.log('获取到新回复数据:', response.data)\n\n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            console.log('当前用户信息:', userInfo)\n\n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              user: userInfo, // 使用当前用户信息\n              created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n            };\n\n            console.log('构建的新回复对象:', newReply)\n\n            // 将新回复添加到对应评论的回复列表\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            comment.replies.push(newReply);\n            console.log('更新后的回复列表:', comment.replies)\n\n            // 更新帖子评论数\n            this.post.comments_count = (this.post.comments_count || 0) + 1;\n          } else {\n            // 如果没有返回回复数据，则刷新评论列表\n            console.log('未获取到回复数据，刷新评论列表')\n            this.fetchComments(this.post.id);\n          }\n        } else {\n          console.error('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        console.error('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 打印评论对象，用于调试\n        console.log('要删除的评论对象:', comment)\n\n        // 确保评论对象和ID存在\n        if (!comment || typeof comment.id === 'undefined') {\n          this.$message.error('评论数据无效，无法删除')\n          return\n        }\n\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          // 再次确认评论ID\n          const commentId = parseInt(comment.id)\n          if (isNaN(commentId)) {\n            loading.close()\n            this.$message.error('评论ID格式无效，无法删除')\n            return\n          }\n\n          console.log('正在删除评论，ID:', commentId, '是否为回复:', !!comment.parent)\n\n          const response = await deleteComment(commentId)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 计算需要减少的评论数\n            const commentsToDecrease = hasReplies ? (1 + comment.replies.length) : 1\n\n            // 更新帖子评论数\n            this.post.comments_count = Math.max(0, this.post.comments_count - commentsToDecrease)\n\n            // 标记为加载中，防止用户重复操作\n            this.commentsLoading = true\n\n            // 强制刷新评论列表\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n\n            // 显示成功提示\n            this.$message.success('评论删除成功')\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (error) {\n          loading.close()\n          console.error('删除评论失败:', error)\n          \n          // 根据错误类型显示不同的错误信息\n          if (error.response) {\n            switch (error.response.status) {\n              case 403:\n                this.$message.error('您没有权限删除此评论')\n                break\n              case 404:\n                this.$message.error('评论不存在或已被删除')\n                break\n              default:\n                this.$message.error(error.response.data?.msg || '删除失败，请稍后重试')\n            }\n          } else if (error.request) {\n            this.$message.error('网络连接失败，请检查网络后重试')\n          } else {\n            this.$message.error('删除失败，请稍后重试')\n          }\n        }\n      } catch (error) {\n        // 用户取消删除操作\n        if (error === 'cancel') {\n          return\n        }\n        console.error('删除评论操作失败:', error)\n        this.$message.error('操作失败，请稍后重试')\n      }\n    },\n\n    handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  margin-top: 20px;\n  line-height: 1.6;\n  word-break: break-word;\n}\n\n.post-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  margin: 10px 0;\n}\n\n.post-content :deep(p) {\n  margin: 10px 0;\n}\n\n.post-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 10px 0;\n}\n\n.post-content :deep(th),\n.post-content :deep(td) {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\n.post-content :deep(th) {\n  background-color: #f5f5f5;\n}\n\n.post-content :deep(blockquote) {\n  margin: 10px 0;\n  padding: 10px 20px;\n  border-left: 4px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.post-content :deep(pre) {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n}\n\n.post-content :deep(code) {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  font-size: 14px;\n  color: #909399;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-author {\n  display: flex;\n  align-items: center;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-author {\n  display: flex;\n  align-items: center;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n/* 编辑相关样式 */\n.post-title-edit {\n  margin-bottom: 15px;\n}\n\n.post-content-edit {\n  margin-bottom: 20px;\n}\n\n.edit-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 15px;\n  gap: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}