{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/defineProperty.js\")[\"default\"];\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar useTree = require('./composables/useTree.js');\nvar treeNode = require('./tree-node.js');\nvar virtualTree = require('./virtual-tree.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar fixedSizeList = require('../../virtual-list/src/components/fixed-size-list.js');\nvar constants = require('../../form/src/constants.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElTreeV2\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: virtualTree.treeProps,\n  emits: virtualTree.treeEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var slots = vue.useSlots();\n    var treeNodeSize = vue.computed(function () {\n      return props.itemSize;\n    });\n    vue.provide(virtualTree.ROOT_TREE_INJECTION_KEY, {\n      ctx: {\n        emit: emit,\n        slots: slots\n      },\n      props: props,\n      instance: vue.getCurrentInstance()\n    });\n    vue.provide(constants.formItemContextKey, void 0);\n    var _index$useLocale = index.useLocale(),\n      t = _index$useLocale.t;\n    var ns = index$1.useNamespace(\"tree\");\n    var _useTree$useTree = useTree.useTree(props, emit),\n      flattenTree = _useTree$useTree.flattenTree,\n      isNotEmpty = _useTree$useTree.isNotEmpty,\n      listRef = _useTree$useTree.listRef,\n      toggleExpand = _useTree$useTree.toggleExpand,\n      isExpanded = _useTree$useTree.isExpanded,\n      isIndeterminate = _useTree$useTree.isIndeterminate,\n      isChecked = _useTree$useTree.isChecked,\n      isDisabled = _useTree$useTree.isDisabled,\n      isCurrent = _useTree$useTree.isCurrent,\n      isForceHiddenExpandIcon = _useTree$useTree.isForceHiddenExpandIcon,\n      handleNodeClick = _useTree$useTree.handleNodeClick,\n      handleNodeDrop = _useTree$useTree.handleNodeDrop,\n      handleNodeCheck = _useTree$useTree.handleNodeCheck,\n      toggleCheckbox = _useTree$useTree.toggleCheckbox,\n      getCurrentNode = _useTree$useTree.getCurrentNode,\n      getCurrentKey = _useTree$useTree.getCurrentKey,\n      setCurrentKey = _useTree$useTree.setCurrentKey,\n      getCheckedKeys = _useTree$useTree.getCheckedKeys,\n      getCheckedNodes = _useTree$useTree.getCheckedNodes,\n      getHalfCheckedKeys = _useTree$useTree.getHalfCheckedKeys,\n      getHalfCheckedNodes = _useTree$useTree.getHalfCheckedNodes,\n      setChecked = _useTree$useTree.setChecked,\n      setCheckedKeys = _useTree$useTree.setCheckedKeys,\n      filter = _useTree$useTree.filter,\n      setData = _useTree$useTree.setData,\n      getNode = _useTree$useTree.getNode,\n      expandNode = _useTree$useTree.expandNode,\n      collapseNode = _useTree$useTree.collapseNode,\n      setExpandedKeys = _useTree$useTree.setExpandedKeys,\n      scrollToNode = _useTree$useTree.scrollToNode,\n      scrollTo = _useTree$useTree.scrollTo;\n    expose({\n      toggleCheckbox: toggleCheckbox,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCurrentKey: setCurrentKey,\n      getCheckedKeys: getCheckedKeys,\n      getCheckedNodes: getCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      setChecked: setChecked,\n      setCheckedKeys: setCheckedKeys,\n      filter: filter,\n      setData: setData,\n      getNode: getNode,\n      expandNode: expandNode,\n      collapseNode: collapseNode,\n      setExpandedKeys: setExpandedKeys,\n      scrollToNode: scrollToNode,\n      scrollTo: scrollTo\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        \"class\": vue.normalizeClass([vue.unref(ns).b(), _defineProperty({}, vue.unref(ns).m(\"highlight-current\"), _ctx.highlightCurrent)]),\n        role: \"tree\"\n      }, [vue.unref(isNotEmpty) ? (vue.openBlock(), vue.createBlock(vue.unref(fixedSizeList[\"default\"]), {\n        key: 0,\n        ref_key: \"listRef\",\n        ref: listRef,\n        \"class-name\": vue.unref(ns).b(\"virtual-list\"),\n        data: vue.unref(flattenTree),\n        total: vue.unref(flattenTree).length,\n        height: _ctx.height,\n        \"item-size\": vue.unref(treeNodeSize),\n        \"perf-mode\": _ctx.perfMode\n      }, {\n        \"default\": vue.withCtx(function (_ref3) {\n          var data = _ref3.data,\n            index = _ref3.index,\n            style = _ref3.style;\n          return [(vue.openBlock(), vue.createBlock(treeNode[\"default\"], {\n            key: data[index].key,\n            style: vue.normalizeStyle(style),\n            node: data[index],\n            expanded: vue.unref(isExpanded)(data[index]),\n            \"show-checkbox\": _ctx.showCheckbox,\n            checked: vue.unref(isChecked)(data[index]),\n            indeterminate: vue.unref(isIndeterminate)(data[index]),\n            \"item-size\": vue.unref(treeNodeSize),\n            disabled: vue.unref(isDisabled)(data[index]),\n            current: vue.unref(isCurrent)(data[index]),\n            \"hidden-expand-icon\": vue.unref(isForceHiddenExpandIcon)(data[index]),\n            onClick: vue.unref(handleNodeClick),\n            onToggle: vue.unref(toggleExpand),\n            onCheck: vue.unref(handleNodeCheck),\n            onDrop: vue.unref(handleNodeDrop)\n          }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"item-size\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\", \"onDrop\"]))];\n        }),\n        _: 1\n      }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"empty-block\"))\n      }, [vue.renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        var _a;\n        return [vue.createElementVNode(\"span\", {\n          \"class\": vue.normalizeClass(vue.unref(ns).e(\"empty-text\"))\n        }, vue.toDisplayString((_a = _ctx.emptyText) != null ? _a : vue.unref(t)(\"el.tree.emptyText\")), 3)];\n      })], 2))], 2);\n    };\n  }\n}));\nvar TreeV2 = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"tree.vue\"]]);\nexports[\"default\"] = TreeV2;","map":{"version":3,"names":["name","slots","vue","useSlots","treeNodeSize","computed","props","itemSize","provide","virtualTree","ROOT_TREE_INJECTION_KEY","ctx","emit","instance","getCurrentInstance","constants","formItemContextKey","_index$useLocale","index","useLocale","t","ns","index$1","useNamespace","_useTree$useTree","useTree","flattenTree","isNotEmpty","listRef","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","handleNodeClick","handleNodeDrop","handleNodeCheck","toggleCheckbox","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","getNode","expandNode","collapseNode","setExpandedKeys","scrollToNode","scrollTo","expose","_ctx","_cache"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), { [ns.m('highlight-current')]: highlightCurrent }]\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      ref=\"listRef\"\n      :class-name=\"ns.b('virtual-list')\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"treeNodeSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :item-size=\"treeNodeSize\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n          @drop=\"handleNodeDrop\"\n        />\n      </template>\n    </fixed-size-list>\n    <div v-else :class=\"ns.e('empty-block')\">\n      <slot name=\"empty\">\n        <span :class=\"ns.e('empty-text')\">\n          {{ emptyText ?? t('el.tree.emptyText') }}\n        </span>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, getCurrentInstance, provide, useSlots } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/components/form'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\n\ndefineOptions({\n  name: 'ElTreeV2',\n})\n\nconst props = defineProps(treeProps)\nconst emit = defineEmits(treeEmits)\n\nconst slots = useSlots()\n\nconst treeNodeSize = computed(() => props.itemSize)\n\nprovide(ROOT_TREE_INJECTION_KEY, {\n  ctx: {\n    emit,\n    slots,\n  },\n  props,\n  instance: getCurrentInstance()!,\n})\nprovide(formItemContextKey, undefined)\nconst { t } = useLocale()\nconst ns = useNamespace('tree')\nconst {\n  flattenTree,\n  isNotEmpty,\n  listRef,\n  toggleExpand,\n  isExpanded,\n  isIndeterminate,\n  isChecked,\n  isDisabled,\n  isCurrent,\n  isForceHiddenExpandIcon,\n  handleNodeClick,\n  handleNodeDrop,\n  handleNodeCheck,\n  // expose\n  toggleCheckbox,\n  getCurrentNode,\n  getCurrentKey,\n  setCurrentKey,\n  getCheckedKeys,\n  getCheckedNodes,\n  getHalfCheckedKeys,\n  getHalfCheckedNodes,\n  setChecked,\n  setCheckedKeys,\n  filter,\n  setData,\n  getNode,\n  expandNode,\n  collapseNode,\n  setExpandedKeys,\n  scrollToNode,\n  scrollTo,\n} = useTree(props, emit)\n\ndefineExpose({\n  toggleCheckbox,\n  getCurrentNode,\n  getCurrentKey,\n  setCurrentKey,\n  getCheckedKeys,\n  getCheckedNodes,\n  getHalfCheckedKeys,\n  getHalfCheckedNodes,\n  setChecked,\n  setCheckedKeys,\n  filter,\n  setData,\n  getNode,\n  expandNode,\n  collapseNode,\n  setExpandedKeys,\n  scrollToNode,\n  scrollTo,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}