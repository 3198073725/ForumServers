{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.includes.js\");\nrequire(\"core-js/modules/es.array.join.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar constants = require('../constants.js');\nvar _private = require('../private.js');\nvar utils = require('../utils.js');\nvar cell = require('../components/cell.js');\nvar expandIcon = require('../components/expand-icon.js');\nvar shared = require('@vue/shared');\nvar CellRenderer = function CellRenderer(_ref, _ref2) {\n  var columns = _ref.columns,\n    column = _ref.column,\n    columnIndex = _ref.columnIndex,\n    depth = _ref.depth,\n    expandIconProps = _ref.expandIconProps,\n    isScrolling = _ref.isScrolling,\n    rowData = _ref.rowData,\n    rowIndex = _ref.rowIndex,\n    style = _ref.style,\n    expandedRowKeys = _ref.expandedRowKeys,\n    ns = _ref.ns,\n    _cellProps = _ref.cellProps,\n    expandColumnKey = _ref.expandColumnKey,\n    indentSize = _ref.indentSize,\n    iconSize = _ref.iconSize,\n    rowKey = _ref.rowKey;\n  var slots = _ref2.slots;\n  var cellStyle = utils.enforceUnit(style);\n  if (column.placeholderSign === _private.placeholderSign) {\n    return vue.createVNode(\"div\", {\n      \"class\": ns.em(\"row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n  var cellRenderer = column.cellRenderer,\n    dataKey = column.dataKey,\n    dataGetter = column.dataGetter;\n  var cellData = shared.isFunction(dataGetter) ? dataGetter({\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowData: rowData,\n    rowIndex: rowIndex\n  }) : lodashUnified.get(rowData, dataKey != null ? dataKey : \"\");\n  var extraCellProps = utils.tryCall(_cellProps, {\n    cellData: cellData,\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowIndex: rowIndex,\n    rowData: rowData\n  });\n  var cellProps = {\n    \"class\": ns.e(\"cell-text\"),\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    cellData: cellData,\n    isScrolling: isScrolling,\n    rowData: rowData,\n    rowIndex: rowIndex\n  };\n  var columnCellRenderer = utils.componentToSlot(cellRenderer);\n  var Cell = columnCellRenderer ? columnCellRenderer(cellProps) : vue.renderSlot(slots, \"default\", cellProps, function () {\n    return [vue.createVNode(cell[\"default\"], cellProps, null)];\n  });\n  var kls = [ns.e(\"row-cell\"), column[\"class\"], column.align === constants.Alignment.CENTER && ns.is(\"align-center\"), column.align === constants.Alignment.RIGHT && ns.is(\"align-right\")];\n  var expandable = rowIndex >= 0 && expandColumnKey && column.key === expandColumnKey;\n  var expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);\n  var IconOrPlaceholder;\n  var iconStyle = \"margin-inline-start: \".concat(depth * indentSize, \"px;\");\n  if (expandable) {\n    if (shared.isObject(expandIconProps)) {\n      IconOrPlaceholder = vue.createVNode(expandIcon[\"default\"], vue.mergeProps(expandIconProps, {\n        \"class\": [ns.e(\"expand-icon\"), ns.is(\"expanded\", expanded)],\n        \"size\": iconSize,\n        \"expanded\": expanded,\n        \"style\": iconStyle,\n        \"expandable\": true\n      }), null);\n    } else {\n      IconOrPlaceholder = vue.createVNode(\"div\", {\n        \"style\": [iconStyle, \"width: \".concat(iconSize, \"px; height: \").concat(iconSize, \"px;\")].join(\" \")\n      }, null);\n    }\n  }\n  return vue.createVNode(\"div\", vue.mergeProps({\n    \"class\": kls,\n    \"style\": cellStyle\n  }, extraCellProps, {\n    \"role\": \"cell\"\n  }), [IconOrPlaceholder, Cell]);\n};\nCellRenderer.inheritAttrs = false;\nvar Cell = CellRenderer;\nexports[\"default\"] = Cell;","map":{"version":3,"names":["columns","_ref","column","columnIndex","depth","expandIconProps","isScrolling","rowData","rowIndex","style","expandedRowKeys","ns","_cellProps","cellProps","expandColumnKey","indentSize","iconSize","rowKey","slots","_ref2","cellStyle","utils","enforceUnit","placeholderSign","_private","vue","createVNode","em","cellRenderer","dataGetter","lodashUnified","get","dataKey","extraCellProps","tryCall","cellData","e","columnCellRenderer","componentToSlot","Cell","renderSlot","cell","kls","align","constants","Alignment","CENTER","is","RIGHT","expandable","key","expanded","includes","IconOrPlaceholder","iconStyle","concat","shared","isObject","expandIcon","mergeProps","join","CellRenderer"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/cell.tsx"],"sourcesContent":["import { renderSlot } from 'vue'\nimport { get } from 'lodash-unified'\nimport { isFunction, isObject } from '@element-plus/utils'\nimport { ExpandIcon, TableCell } from '../components'\nimport { Alignment } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs, VNode } from 'vue'\nimport type { TableV2RowCellRenderParam } from '../components'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\ntype CellRendererProps = TableV2RowCellRenderParam &\n  Pick<\n    TableV2Props,\n    'cellProps' | 'expandColumnKey' | 'indentSize' | 'iconSize' | 'rowKey'\n  > &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'expandedRowKeys'>> & {\n    ns: UseNamespaceReturn\n  }\n\nconst CellRenderer: FunctionalComponent<CellRendererProps> = (\n  {\n    // renderer props\n    columns,\n    column,\n    columnIndex,\n    depth,\n    expandIconProps,\n    isScrolling,\n    rowData,\n    rowIndex,\n    // from use-table\n    style,\n    expandedRowKeys,\n    ns,\n    // derived props\n    cellProps: _cellProps,\n    expandColumnKey,\n    indentSize,\n    iconSize,\n    rowKey,\n  },\n  { slots }\n) => {\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return <div class={ns.em('row-cell', 'placeholder')} style={cellStyle} />\n  }\n  const { cellRenderer, dataKey, dataGetter } = column\n\n  const cellData = isFunction(dataGetter)\n    ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n    : get(rowData, dataKey ?? '')\n\n  const extraCellProps = tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData,\n  })\n\n  const cellProps = {\n    class: ns.e('cell-text'),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex,\n  }\n  const columnCellRenderer = componentToSlot<typeof cellProps>(cellRenderer)\n  const Cell = columnCellRenderer\n    ? columnCellRenderer(cellProps)\n    : renderSlot(slots, 'default', cellProps, () => [\n        <TableCell {...cellProps}></TableCell>,\n      ])\n\n  const kls = [\n    ns.e('row-cell'),\n    column.class,\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n  ]\n\n  const expandable =\n    rowIndex >= 0 && expandColumnKey && column.key === expandColumnKey\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey])\n\n  let IconOrPlaceholder: VNode | undefined\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = (\n        <ExpandIcon\n          {...expandIconProps}\n          class={[ns.e('expand-icon'), ns.is('expanded', expanded)]}\n          size={iconSize}\n          expanded={expanded}\n          style={iconStyle}\n          expandable\n        />\n      )\n    } else {\n      IconOrPlaceholder = (\n        <div\n          style={[\n            iconStyle,\n            `width: ${iconSize}px; height: ${iconSize}px;`,\n          ].join(' ')}\n        />\n      )\n    }\n  }\n\n  return (\n    <div class={kls} style={cellStyle} {...extraCellProps} role=\"cell\">\n      {IconOrPlaceholder}\n      {Cell}\n    </div>\n  )\n}\n\nCellRenderer.inheritAttrs = false\n\nexport default CellRenderer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}