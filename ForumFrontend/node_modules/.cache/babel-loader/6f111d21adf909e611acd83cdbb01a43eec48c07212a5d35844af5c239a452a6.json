{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.reduce.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.iterator.reduce.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.keys.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar util = require('../util.js');\nvar shared = require('@vue/shared');\nfunction getAllAliases(props, aliases) {\n  return props.reduce(function (prev, cur) {\n    prev[cur] = cur;\n    return prev;\n  }, aliases);\n}\nfunction useWatcher(owner, props_) {\n  var instance = vue.getCurrentInstance();\n  var registerComplexWatchers = function registerComplexWatchers() {\n    var props = [\"fixed\"];\n    var aliases = {\n      realWidth: \"width\",\n      realMinWidth: \"minWidth\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n      if (shared.hasOwn(props_, columnKey)) {\n        vue.watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          var value = newVal;\n          if (columnKey === \"width\" && key === \"realWidth\") {\n            value = util.parseWidth(newVal);\n          }\n          if (columnKey === \"minWidth\" && key === \"realMinWidth\") {\n            value = util.parseMinWidth(newVal);\n          }\n          instance.columnConfig.value[columnKey] = value;\n          instance.columnConfig.value[key] = value;\n          var updateColumns = columnKey === \"fixed\";\n          owner.value.store.scheduleLayout(updateColumns);\n        });\n      }\n    });\n  };\n  var registerNormalWatchers = function registerNormalWatchers() {\n    var props = [\"label\", \"filters\", \"filterMultiple\", \"filteredValue\", \"sortable\", \"index\", \"formatter\", \"className\", \"labelClassName\", \"filterClassName\", \"showOverflowTooltip\", \"tooltipFormatter\"];\n    var aliases = {\n      property: \"prop\",\n      align: \"realAlign\",\n      headerAlign: \"realHeaderAlign\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n      if (shared.hasOwn(props_, columnKey)) {\n        vue.watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          instance.columnConfig.value[key] = newVal;\n        });\n      }\n    });\n  };\n  return {\n    registerComplexWatchers: registerComplexWatchers,\n    registerNormalWatchers: registerNormalWatchers\n  };\n}\nexports[\"default\"] = useWatcher;","map":{"version":3,"names":["getAllAliases","props","aliases","reduce","prev","cur","useWatcher","owner","props_","instance","vue","getCurrentInstance","registerComplexWatchers","realWidth","realMinWidth","allAliases","Object","keys","forEach","key","columnKey","shared","hasOwn","watch","newVal","value","util","parseWidth","parseMinWidth","columnConfig","updateColumns","store","scheduleLayout","registerNormalWatchers","property","align","headerAlign"],"sources":["../../../../../../../packages/components/table/src/table-column/watcher-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { getCurrentInstance, watch } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport { parseMinWidth, parseWidth } from '../util'\n\nimport type { ComputedRef } from 'vue'\nimport type { TableColumn, TableColumnCtx, ValueOf } from './defaults'\n\nfunction getAllAliases(props, aliases) {\n  return props.reduce((prev, cur) => {\n    prev[cur] = cur\n    return prev\n  }, aliases)\n}\nfunction useWatcher<T>(\n  owner: ComputedRef<any>,\n  props_: Partial<TableColumnCtx<T>>\n) {\n  const instance = getCurrentInstance() as TableColumn<T>\n  const registerComplexWatchers = () => {\n    const props = ['fixed']\n    const aliases = {\n      realWidth: 'width',\n      realMinWidth: 'minWidth',\n    }\n    const allAliases = getAllAliases(props, aliases)\n    Object.keys(allAliases).forEach((key) => {\n      const columnKey = aliases[key]\n      if (hasOwn(props_, columnKey)) {\n        watch(\n          () => props_[columnKey],\n          (newVal) => {\n            let value: ValueOf<TableColumnCtx<T>> = newVal\n            if (columnKey === 'width' && key === 'realWidth') {\n              value = parseWidth(newVal)\n            }\n            if (columnKey === 'minWidth' && key === 'realMinWidth') {\n              value = parseMinWidth(newVal)\n            }\n            instance.columnConfig.value[columnKey as any] = value\n            instance.columnConfig.value[key] = value\n            const updateColumns = columnKey === 'fixed'\n            owner.value.store.scheduleLayout(updateColumns)\n          }\n        )\n      }\n    })\n  }\n  const registerNormalWatchers = () => {\n    const props = [\n      'label',\n      'filters',\n      'filterMultiple',\n      'filteredValue',\n      'sortable',\n      'index',\n      'formatter',\n      'className',\n      'labelClassName',\n      'filterClassName',\n      'showOverflowTooltip',\n      'tooltipFormatter',\n    ]\n    const aliases = {\n      property: 'prop',\n      align: 'realAlign',\n      headerAlign: 'realHeaderAlign',\n    }\n    const allAliases = getAllAliases(props, aliases)\n    Object.keys(allAliases).forEach((key) => {\n      const columnKey = aliases[key]\n      if (hasOwn(props_, columnKey)) {\n        watch(\n          () => props_[columnKey],\n          (newVal) => {\n            instance.columnConfig.value[key] = newVal\n          }\n        )\n      }\n    })\n  }\n\n  return {\n    registerComplexWatchers,\n    registerNormalWatchers,\n  }\n}\n\nexport default useWatcher\n"],"mappings":";;;;;;;;;;;;;;;;;AAGA,SAASA,aAAaA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrC,OAAOD,KAAK,CAACE,MAAM,CAAC,UAACC,IAAI,EAAEC,GAAG,EAAK;IACjCD,IAAI,CAACC,GAAG,CAAC,GAAGA,GAAG;IACf,OAAOD,IAAI;EACf,CAAG,EAAEF,OAAO,CAAC;AACb;AACA,SAASI,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACjC,IAAMC,QAAQ,GAAGC,GAAA,CAAAC,kBAAkB,EAAE;EACrC,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAS;IACpC,IAAMX,KAAK,GAAG,CAAC,OAAO,CAAC;IACvB,IAAMC,OAAO,GAAG;MACdW,SAAS,EAAE,OAAO;MAClBC,YAAY,EAAE;IACpB,CAAK;IACD,IAAMC,UAAU,GAAGf,aAAa,CAACC,KAAK,EAAEC,OAAO,CAAC;IAChDc,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,OAAO,CAAC,UAACC,GAAG,EAAK;MACvC,IAAMC,SAAS,GAAGlB,OAAO,CAACiB,GAAG,CAAC;MAC9B,IAAIE,MAAA,CAAAC,MAAM,CAACd,MAAM,EAAEY,SAAS,CAAC,EAAE;QAC7BV,GAAA,CAAAa,KAAK,CAAC;UAAA,OAAMf,MAAM,CAACY,SAAS,CAAC;QAAA,GAAE,UAACI,MAAM,EAAK;UACzC,IAAIC,KAAK,GAAGD,MAAM;UAClB,IAAIJ,SAAS,KAAK,OAAO,IAAID,GAAG,KAAK,WAAW,EAAE;YAChDM,KAAK,GAAGC,IAAA,CAAAC,UAAU,CAACH,MAAM,CAAC;UACtC;UACU,IAAIJ,SAAS,KAAK,UAAU,IAAID,GAAG,KAAK,cAAc,EAAE;YACtDM,KAAK,GAAGC,IAAA,CAAAE,aAAa,CAACJ,MAAM,CAAC;UACzC;UACUf,QAAQ,CAACoB,YAAY,CAACJ,KAAK,CAACL,SAAS,CAAC,GAAGK,KAAK;UAC9ChB,QAAQ,CAACoB,YAAY,CAACJ,KAAK,CAACN,GAAG,CAAC,GAAGM,KAAK;UACxC,IAAMK,aAAa,GAAGV,SAAS,KAAK,OAAO;UAC3Cb,KAAK,CAACkB,KAAK,CAACM,KAAK,CAACC,cAAc,CAACF,aAAa,CAAC;QACzD,CAAS,CAAC;MACV;IACA,CAAK,CAAC;EACN,CAAG;EACD,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;IACnC,IAAMhC,KAAK,GAAG,CACZ,OAAO,EACP,SAAS,EACT,gBAAgB,EAChB,eAAe,EACf,UAAU,EACV,OAAO,EACP,WAAW,EACX,WAAW,EACX,gBAAgB,EAChB,iBAAiB,EACjB,qBAAqB,EACrB,kBAAkB,CACnB;IACD,IAAMC,OAAO,GAAG;MACdgC,QAAQ,EAAE,MAAM;MAChBC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE;IACnB,CAAK;IACD,IAAMrB,UAAU,GAAGf,aAAa,CAACC,KAAK,EAAEC,OAAO,CAAC;IAChDc,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,OAAO,CAAC,UAACC,GAAG,EAAK;MACvC,IAAMC,SAAS,GAAGlB,OAAO,CAACiB,GAAG,CAAC;MAC9B,IAAIE,MAAA,CAAAC,MAAM,CAACd,MAAM,EAAEY,SAAS,CAAC,EAAE;QAC7BV,GAAA,CAAAa,KAAK,CAAC;UAAA,OAAMf,MAAM,CAACY,SAAS,CAAC;QAAA,GAAE,UAACI,MAAM,EAAK;UACzCf,QAAQ,CAACoB,YAAY,CAACJ,KAAK,CAACN,GAAG,CAAC,GAAGK,MAAM;QACnD,CAAS,CAAC;MACV;IACA,CAAK,CAAC;EACN,CAAG;EACD,OAAO;IACLZ,uBAAuB,EAAvBA,uBAAuB;IACvBqB,sBAAsB,EAAtBA;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}