{"ast":null,"code":"import _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, inject, computed, onBeforeUnmount, unref, watch, openBlock, createBlock, withCtx, createVNode, Transition, withDirectives, mergeProps, renderSlot, vShow, createCommentVNode } from 'vue';\nimport { computedEager, onClickOutside } from '@vueuse/core';\nimport '../../popper/index.mjs';\nimport { ElTeleport } from '../../teleport/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipContentProps } from './content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContainerId } from '../../../hooks/use-popper-container/index.mjs';\nimport ElPopperContent from '../../popper/src/content2.mjs';\nimport { tryFocus } from '../../focus-trap/src/utils.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTooltipContent\",\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: useTooltipContentProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var _usePopperContainerId = usePopperContainerId(),\n      selector = _usePopperContainerId.selector;\n    var ns = useNamespace(\"tooltip\");\n    var contentRef = ref();\n    var popperContentRef = computedEager(function () {\n      var _a;\n      return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n    });\n    var stopHandle;\n    var _inject = inject(TOOLTIP_INJECTION_KEY, void 0),\n      controlled = _inject.controlled,\n      id = _inject.id,\n      open = _inject.open,\n      trigger = _inject.trigger,\n      onClose = _inject.onClose,\n      onOpen = _inject.onOpen,\n      onShow = _inject.onShow,\n      onHide = _inject.onHide,\n      onBeforeShow = _inject.onBeforeShow,\n      onBeforeHide = _inject.onBeforeHide;\n    var transitionClass = computed(function () {\n      return props.transition || \"\".concat(ns.namespace.value, \"-fade-in-linear\");\n    });\n    var persistentRef = computed(function () {\n      if (process.env.NODE_ENV === \"test\") {\n        return true;\n      }\n      return props.persistent;\n    });\n    onBeforeUnmount(function () {\n      stopHandle == null ? void 0 : stopHandle();\n    });\n    var shouldRender = computed(function () {\n      return unref(persistentRef) ? true : unref(open);\n    });\n    var shouldShow = computed(function () {\n      return props.disabled ? false : unref(open);\n    });\n    var appendTo = computed(function () {\n      return props.appendTo || selector.value;\n    });\n    var contentStyle = computed(function () {\n      var _a;\n      return (_a = props.style) != null ? _a : {};\n    });\n    var ariaHidden = ref(true);\n    var onTransitionLeave = function onTransitionLeave() {\n      onHide();\n      isFocusInsideContent() && tryFocus(document.body);\n      ariaHidden.value = true;\n    };\n    var stopWhenControlled = function stopWhenControlled() {\n      if (unref(controlled)) return true;\n    };\n    var onContentEnter = composeEventHandlers(stopWhenControlled, function () {\n      if (props.enterable && unref(trigger) === \"hover\") {\n        onOpen();\n      }\n    });\n    var onContentLeave = composeEventHandlers(stopWhenControlled, function () {\n      if (unref(trigger) === \"hover\") {\n        onClose();\n      }\n    });\n    var onBeforeEnter = function onBeforeEnter() {\n      var _a, _b;\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow == null ? void 0 : onBeforeShow();\n    };\n    var onBeforeLeave = function onBeforeLeave() {\n      onBeforeHide == null ? void 0 : onBeforeHide();\n    };\n    var onAfterShow = function onAfterShow() {\n      onShow();\n    };\n    var onBlur = function onBlur() {\n      if (!props.virtualTriggering) {\n        onClose();\n      }\n    };\n    var isFocusInsideContent = function isFocusInsideContent(event) {\n      var _a;\n      var popperContent = (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n      var activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;\n      return popperContent == null ? void 0 : popperContent.contains(activeElement);\n    };\n    watch(function () {\n      return unref(open);\n    }, function (val) {\n      if (!val) {\n        stopHandle == null ? void 0 : stopHandle();\n      } else {\n        ariaHidden.value = false;\n        stopHandle = onClickOutside(popperContentRef, function () {\n          if (unref(controlled)) return;\n          var $trigger = unref(trigger);\n          if ($trigger !== \"hover\") {\n            onClose();\n          }\n        });\n      }\n    }, {\n      flush: \"post\"\n    });\n    watch(function () {\n      return props.content;\n    }, function () {\n      var _a, _b;\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    expose({\n      contentRef: contentRef,\n      isFocusInsideContent: isFocusInsideContent\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTeleport), {\n        disabled: !_ctx.teleported,\n        to: unref(appendTo)\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(Transition, {\n            name: unref(transitionClass),\n            onAfterLeave: onTransitionLeave,\n            onBeforeEnter: onBeforeEnter,\n            onAfterEnter: onAfterShow,\n            onBeforeLeave: onBeforeLeave\n          }, {\n            \"default\": withCtx(function () {\n              return [unref(shouldRender) ? withDirectives((openBlock(), createBlock(unref(ElPopperContent), mergeProps({\n                key: 0,\n                id: unref(id),\n                ref_key: \"contentRef\",\n                ref: contentRef\n              }, _ctx.$attrs, {\n                \"aria-label\": _ctx.ariaLabel,\n                \"aria-hidden\": ariaHidden.value,\n                \"boundaries-padding\": _ctx.boundariesPadding,\n                \"fallback-placements\": _ctx.fallbackPlacements,\n                \"gpu-acceleration\": _ctx.gpuAcceleration,\n                offset: _ctx.offset,\n                placement: _ctx.placement,\n                \"popper-options\": _ctx.popperOptions,\n                \"arrow-offset\": _ctx.arrowOffset,\n                strategy: _ctx.strategy,\n                effect: _ctx.effect,\n                enterable: _ctx.enterable,\n                pure: _ctx.pure,\n                \"popper-class\": _ctx.popperClass,\n                \"popper-style\": [_ctx.popperStyle, unref(contentStyle)],\n                \"reference-el\": _ctx.referenceEl,\n                \"trigger-target-el\": _ctx.triggerTargetEl,\n                visible: unref(shouldShow),\n                \"z-index\": _ctx.zIndex,\n                onMouseenter: unref(onContentEnter),\n                onMouseleave: unref(onContentLeave),\n                onBlur: onBlur,\n                onClose: unref(onClose)\n              }), {\n                \"default\": withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"default\")];\n                }),\n                _: 3\n              }, 16, [\"id\", \"aria-label\", \"aria-hidden\", \"boundaries-padding\", \"fallback-placements\", \"gpu-acceleration\", \"offset\", \"placement\", \"popper-options\", \"arrow-offset\", \"strategy\", \"effect\", \"enterable\", \"pure\", \"popper-class\", \"popper-style\", \"reference-el\", \"trigger-target-el\", \"visible\", \"z-index\", \"onMouseenter\", \"onMouseleave\", \"onClose\"])), [[vShow, unref(shouldShow)]]) : createCommentVNode(\"v-if\", true)];\n            }),\n            _: 3\n          }, 8, [\"name\"])];\n        }),\n        _: 3\n      }, 8, [\"disabled\", \"to\"]);\n    };\n  }\n}));\nvar ElTooltipContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"content.vue\"]]);\nexport { ElTooltipContent as default };","map":{"version":3,"names":["name","inheritAttrs","_usePopperContainerId","usePopperContainerId","selector","ns","useNamespace","contentRef","ref","popperContentRef","computedEager","_a","value","stopHandle","_inject","inject","TOOLTIP_INJECTION_KEY","controlled","id","open","trigger","onClose","onOpen","onShow","onHide","onBeforeShow","onBeforeHide","transitionClass","computed","props","transition","concat","namespace","persistentRef","process","env","NODE_ENV","persistent","onBeforeUnmount","shouldRender","unref","shouldShow","disabled","appendTo","contentStyle","style","ariaHidden","onTransitionLeave","isFocusInsideContent","tryFocus","document","body","stopWhenControlled","onContentEnter","composeEventHandlers","enterable","onContentLeave","onBeforeEnter","_b","updatePopper","call","onBeforeLeave","onAfterShow","onBlur","virtualTriggering","event","popperContent","activeElement","relatedTarget","contains","watch","val","onClickOutside","$trigger","flush","content","expose","_ctx","_cache","openBlock","createBlock","ElTeleport"],"sources":["../../../../../../packages/components/tooltip/src/content.vue"],"sourcesContent":["<template>\n  <el-teleport :disabled=\"!teleported\" :to=\"appendTo\">\n    <transition\n      :name=\"transitionClass\"\n      @after-leave=\"onTransitionLeave\"\n      @before-enter=\"onBeforeEnter\"\n      @after-enter=\"onAfterShow\"\n      @before-leave=\"onBeforeLeave\"\n    >\n      <el-popper-content\n        v-if=\"shouldRender\"\n        v-show=\"shouldShow\"\n        :id=\"id\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-label=\"ariaLabel\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :arrow-offset=\"arrowOffset\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :trigger-target-el=\"triggerTargetEl\"\n        :visible=\"shouldShow\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n        @blur=\"onBlur\"\n        @close=\"onClose\"\n      >\n        <slot />\n      </el-popper-content>\n    </transition>\n  </el-teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, onBeforeUnmount, ref, unref, watch } from 'vue'\nimport { computedEager, onClickOutside } from '@vueuse/core'\nimport { useNamespace, usePopperContainerId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport ElTeleport from '@element-plus/components/teleport'\nimport { tryFocus } from '@element-plus/components/focus-trap'\nimport { TOOLTIP_INJECTION_KEY } from './constants'\nimport { useTooltipContentProps } from './content'\nimport type { PopperContentInstance } from '@element-plus/components/popper'\n\ndefineOptions({\n  name: 'ElTooltipContent',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(useTooltipContentProps)\n\nconst { selector } = usePopperContainerId()\nconst ns = useNamespace('tooltip')\n\nconst contentRef = ref<PopperContentInstance>()\nconst popperContentRef = computedEager(() => contentRef.value?.popperContentRef)\nlet stopHandle: ReturnType<typeof onClickOutside>\nconst {\n  controlled,\n  id,\n  open,\n  trigger,\n  onClose,\n  onOpen,\n  onShow,\n  onHide,\n  onBeforeShow,\n  onBeforeHide,\n} = inject(TOOLTIP_INJECTION_KEY, undefined)!\nconst transitionClass = computed(() => {\n  return props.transition || `${ns.namespace.value}-fade-in-linear`\n})\nconst persistentRef = computed(() => {\n  // For testing, we would always want the content to be rendered\n  // to the DOM, so we need to return true here.\n  if (process.env.NODE_ENV === 'test') {\n    return true\n  }\n  return props.persistent\n})\n\nonBeforeUnmount(() => {\n  stopHandle?.()\n})\n\nconst shouldRender = computed(() => {\n  return unref(persistentRef) ? true : unref(open)\n})\n\nconst shouldShow = computed(() => {\n  return props.disabled ? false : unref(open)\n})\n\nconst appendTo = computed(() => {\n  return props.appendTo || selector.value\n})\n\nconst contentStyle = computed(() => (props.style ?? {}) as any)\n\nconst ariaHidden = ref(true)\n\nconst onTransitionLeave = () => {\n  onHide()\n  isFocusInsideContent() && tryFocus(document.body)\n  ariaHidden.value = true\n}\n\nconst stopWhenControlled = () => {\n  if (unref(controlled)) return true\n}\n\nconst onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n  if (props.enterable && unref(trigger) === 'hover') {\n    onOpen()\n  }\n})\n\nconst onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n  if (unref(trigger) === 'hover') {\n    onClose()\n  }\n})\n\nconst onBeforeEnter = () => {\n  contentRef.value?.updatePopper?.()\n  onBeforeShow?.()\n}\n\nconst onBeforeLeave = () => {\n  onBeforeHide?.()\n}\n\nconst onAfterShow = () => {\n  onShow()\n}\n\nconst onBlur = () => {\n  if (!props.virtualTriggering) {\n    onClose()\n  }\n}\n\nconst isFocusInsideContent = (event?: FocusEvent) => {\n  const popperContent: HTMLElement | undefined =\n    contentRef.value?.popperContentRef\n  const activeElement = (event?.relatedTarget as Node) || document.activeElement\n\n  return popperContent?.contains(activeElement)\n}\n\nwatch(\n  () => unref(open),\n  (val) => {\n    if (!val) {\n      stopHandle?.()\n    } else {\n      ariaHidden.value = false\n      stopHandle = onClickOutside(popperContentRef, () => {\n        if (unref(controlled)) return\n        const $trigger = unref(trigger)\n        if ($trigger !== 'hover') {\n          onClose()\n        }\n      })\n    }\n  },\n  {\n    flush: 'post',\n  }\n)\n\nwatch(\n  () => props.content,\n  () => {\n    contentRef.value?.updatePopper?.()\n  }\n)\n\ndefineExpose({\n  /**\n   * @description el-popper-content component instance\n   */\n  contentRef,\n  /**\n   * @description validate current focus event is trigger inside el-popper-content\n   */\n  isFocusInsideContent,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}