{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nfunction useNodeExpandEventBroadcast(props) {\n  var parentNodeMap = vue.inject(\"TreeNodeMap\", null);\n  var currentNodeMap = {\n    treeNodeExpand: function treeNodeExpand(node) {\n      if (props.node !== node) {\n        props.node.collapse();\n      }\n    },\n    children: []\n  };\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n  vue.provide(\"TreeNodeMap\", currentNodeMap);\n  return {\n    broadcastExpanded: function broadcastExpanded(node) {\n      if (!props.accordion) return;\n      var _iterator = _createForOfIteratorHelper(currentNodeMap.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var childNode = _step.value;\n          childNode.treeNodeExpand(node);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  };\n}\nexports.useNodeExpandEventBroadcast = useNodeExpandEventBroadcast;","map":{"version":3,"names":["useNodeExpandEventBroadcast","props","parentNodeMap","vue","inject","currentNodeMap","treeNodeExpand","node","collapse","children","push","provide","broadcastExpanded","accordion","_iterator","_createForOfIteratorHelper","_step","s","n","done","childNode","value","err","e","f"],"sources":["../../../../../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts"],"sourcesContent":["// @ts-nocheck\nimport { inject, provide } from 'vue'\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node: Node): void\n  children: NodeMap[]\n}\n\nexport function useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject<NodeMap>('TreeNodeMap', null)\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide('TreeNodeMap', currentNodeMap)\n\n  return {\n    broadcastExpanded: (node: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n"],"mappings":";;;;;;;;;AACO,SAASA,2BAA2BA,CAACC,KAAK,EAAE;EACjD,IAAMC,aAAa,GAAGC,GAAA,CAAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;EACjD,IAAMC,cAAc,GAAG;IACrBC,cAAc,EAAE,SAAhBA,cAAcA,CAAGC,IAAI,EAAK;MACxB,IAAIN,KAAK,CAACM,IAAI,KAAKA,IAAI,EAAE;QACvBN,KAAK,CAACM,IAAI,CAACC,QAAQ,EAAE;MAC7B;IACA,CAAK;IACDC,QAAQ,EAAE;EACd,CAAG;EACD,IAAIP,aAAa,EAAE;IACjBA,aAAa,CAACO,QAAQ,CAACC,IAAI,CAACL,cAAc,CAAC;EAC/C;EACEF,GAAA,CAAAQ,OAAO,CAAC,aAAa,EAAEN,cAAc,CAAC;EACtC,OAAO;IACLO,iBAAiB,EAAE,SAAnBA,iBAAiBA,CAAGL,IAAI,EAAK;MAC3B,IAAI,CAACN,KAAK,CAACY,SAAS,EAClB;MAAO,IAAAC,SAAA,GAAAC,0BAAA,CACeV,cAAc,CAACI,QAAQ;QAAAO,KAAA;MAAA;QAA/C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAiD;UAAA,IAAtCC,SAAS,GAAAJ,KAAA,CAAAK,KAAA;UAClBD,SAAS,CAACd,cAAc,CAACC,IAAI,CAAC;QACtC;MAAO,SAAAe,GAAA;QAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;MAAA;QAAAR,SAAA,CAAAU,CAAA;MAAA;IACP;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}