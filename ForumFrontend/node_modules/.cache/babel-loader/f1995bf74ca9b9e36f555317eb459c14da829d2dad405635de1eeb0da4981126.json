{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"post-create-container\"\n};\nvar _hoisted_2 = {\n  \"class\": \"clearfix\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_option = _resolveComponent(\"el-option\");\n  var _component_el_select = _resolveComponent(\"el-select\");\n  var _component_rich_text_editor = _resolveComponent(\"rich-text-editor\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    \"class\": \"post-form-card\"\n  }, {\n    header: _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"span\", null, _toDisplayString($setup.isEdit ? '编辑帖子' : '发布新帖'), 1 /* TEXT */)])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, {\n        ref: \"formRef\",\n        model: $setup.postForm,\n        rules: $setup.rules,\n        \"label-width\": \"80px\",\n        \"validate-on-rule-change\": false,\n        onSubmit: _cache[3] || (_cache[3] = _withModifiers(function () {}, [\"prevent\"]))\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"标题\",\n            prop: \"title\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $setup.postForm.title,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n                  return $setup.postForm.title = $event;\n                }),\n                placeholder: \"请输入帖子标题\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"板块\",\n            prop: \"board\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_select, {\n                modelValue: $setup.postForm.board,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $setup.postForm.board = $event;\n                }),\n                placeholder: \"请选择板块\",\n                style: {\n                  \"width\": \"100%\"\n                },\n                disabled: $setup.isEdit && !_ctx.isAdmin\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.boardOptions, function (board) {\n                    return _openBlock(), _createBlock(_component_el_option, {\n                      key: board.value,\n                      label: board.label,\n                      value: board.value\n                    }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\", \"disabled\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"内容\",\n            prop: \"content\",\n            \"show-message\": false\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_rich_text_editor, {\n                modelValue: $setup.postForm.content,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $setup.postForm.content = $event;\n                }),\n                disabled: false,\n                onChange: $setup.handleContentChange\n              }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_button, {\n                onClick: $setup.goBack\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[4] || (_cache[4] = [_createTextVNode(\"取消\")]);\n                }),\n                _: 1 /* STABLE */,\n                __: [4]\n              }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n                type: \"primary\",\n                onClick: $setup.submitForm,\n                loading: $setup.loading\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($setup.isEdit ? '保存修改' : '发布帖子'), 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\", \"loading\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\", \"rules\"])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_withCtx","_createElementVNode","_hoisted_2","_toDisplayString","$setup","isEdit","_component_el_form","ref","model","postForm","rules","onSubmit","_cache","_withModifiers","_component_el_form_item","label","prop","_component_el_input","modelValue","title","$event","placeholder","_","_component_el_select","board","style","disabled","_ctx","isAdmin","_Fragment","_renderList","boardOptions","_createBlock","_component_el_option","key","value","_component_rich_text_editor","content","onChange","handleContentChange","_component_el_button","onClick","goBack","_createTextVNode","__","type","submitForm","loading"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostCreate.vue"],"sourcesContent":["<template>\n  <div class=\"post-create-container\">\n    <el-card class=\"post-form-card\">\n      <template #header>\n        <div class=\"clearfix\">\n        <span>{{ isEdit ? '编辑帖子' : '发布新帖' }}</span>\n      </div>\n      </template>\n\n      <el-form\n        ref=\"formRef\"\n        :model=\"postForm\"\n        :rules=\"rules\"\n        label-width=\"80px\"\n        :validate-on-rule-change=\"false\"\n        @submit.prevent\n      >\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"postForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"板块\" prop=\"board\">\n          <el-select\n            v-model=\"postForm.board\"\n            placeholder=\"请选择板块\"\n            style=\"width: 100%\"\n            :disabled=\"isEdit && !isAdmin\"\n          >\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.value\"\n              :label=\"board.label\"\n              :value=\"board.value\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\" :show-message=\"false\">\n          <rich-text-editor\n            v-model=\"postForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button @click=\"goBack\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"loading\">\n            {{ isEdit ? '保存修改' : '发布帖子' }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted, inject } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\nimport { createPost, updatePost, getPostDetail } from '@/api/post'\nimport { getBoardList } from '@/api/board'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor\n  },\n  setup() {\n    const router = useRouter()\n    const route = useRoute()\n    const store = useStore()\n    const formRef = ref(null)\n    const loading = ref(false)\n    const isEdit = ref(false)\n    const postId = ref(null)\n    const boardOptions = ref([])\n    const refreshLatestPosts = inject('refreshLatestPosts', null)\n\n    // 表单数据\n    const postForm = reactive({\n        title: '',\n      content: '',\n      board: ''\n    })\n\n    // 表单验证规则\n    const rules = {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n        { min: 3, max: 100, message: '标题长度应在3-100个字符之间', trigger: 'blur' }\n      ],\n      content: [\n        { required: true, message: '请输入帖子内容', trigger: 'blur' }\n        ],\n        board: [\n          { required: true, message: '请选择板块', trigger: 'change' }\n      ]\n    }\n\n    // 计算属性：是否已登录\n    const isLoggedIn = computed(() => store.getters.isLoggedIn)\n    \n    // 计算属性：是否为管理员\n    const isAdmin = computed(() => {\n      const user = store.state.user\n      return user && user.role === 'admin'\n    })\n\n    // 刷新最新帖子列表\n    const refreshPosts = () => {\n      if (refreshLatestPosts) {\n        refreshLatestPosts()\n      } else {\n        log('未找到刷新函数')\n    }\n    }\n\n    // 初始化\n    onMounted(async () => {\n      log('发帖页面创建, 登录状态:', isLoggedIn.value, '认证状态:', isLoggedIn.value)\n\n      // 检查是否已登录\n      if (!isLoggedIn.value) {\n        log('发帖页面检测到未登录，跳转到登录页面')\n        ElMessage.warning('请先登录才能发布帖子')\n        router.push({ name: 'Login', query: { redirect: '/post/create' } })\n      return\n    }\n\n      log('发帖页面检测到已登录，继续加载页面')\n\n    // 清除可能的成功消息提示\n      ElMessage.closeAll()\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(() => {\n        log('组件内延时清除消息')\n        ElMessage.closeAll()\n      }, 100)\n\n      // 获取板块列表\n      await fetchBoardList()\n\n      // 检查是否为编辑模式\n      if (route.params.id) {\n        isEdit.value = true\n        postId.value = route.params.id\n        await fetchPostDetail(postId.value)\n      }\n    })\n\n    // 获取板块列表\n    const fetchBoardList = async () => {\n      try {\n        log('开始获取板块列表...')\n        const response = await getBoardList()\n        \n        log('板块列表响应:', response)\n\n        let boards = []\n        if (response && response.status === 0 && response.data) {\n          log('使用status=0格式处理板块列表数据')\n          boards = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          log('使用code=0格式处理板块列表数据')\n          boards = response.data || []\n        } else if (response && Array.isArray(response)) {\n          log('使用数组格式处理板块列表数据')\n          boards = response\n        } else {\n          boards = []\n        }\n        \n        // 如果不是管理员，过滤掉一些特殊板块\n        if (!isAdmin.value) {\n          log('非管理员用户，过滤掉推荐和精选板块')\n          boards = boards.filter(board => {\n            return !board.name.includes('推荐') && \n                   !board.name.includes('精选') && \n                   board.status !== 'hidden'\n          })\n        }\n        \n        // 转换为选项格式\n        boardOptions.value = boards.map(board => ({\n          value: board.id,\n          label: board.name\n        }))\n        \n        log('获取到的板块选项:', boardOptions.value)\n        \n        // 清除可能的成功消息提示\n        setTimeout(() => {\n          log('获取板块列表后延时清除消息')\n          ElMessage.closeAll()\n        }, 100)\n        \n      } catch (error) {\n        console.error('获取板块列表失败:', error)\n        ElMessage.error('获取板块列表失败，请稍后再试')\n      }\n    }\n\n    // 获取帖子详情（编辑模式）\n    const fetchPostDetail = async (id) => {\n      try {\n        loading.value = true\n        const response = await getPostDetail(id)\n        \n        if (response && response.data) {\n          const post = response.data\n          postForm.title = post.title\n          postForm.content = post.content\n          postForm.board = post.board?.id || ''\n        } else {\n          ElMessage.error('获取帖子详情失败')\n          router.push('/posts')\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        ElMessage.error('获取帖子详情失败，请稍后再试')\n        router.push('/posts')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    // 提交表单\n    const submitForm = async () => {\n      log('开始提交表单，当前表单数据:', postForm);\n      \n      if (!formRef.value) {\n        ElMessage.error('表单引用不存在')\n        return\n      }\n      \n      try {\n        // 表单验证\n        await formRef.value.validate((valid, fields) => {\n          log('表单验证结果:', valid, '验证失败字段:', fields);\n        \n          if (!valid) {\n            throw new Error('表单验证失败')\n          }\n        })\n        \n        // 显示加载状态\n        loading.value = true\n        \n        // 准备提交数据\n        const postData = {\n          title: postForm.title,\n          content: postForm.content,\n          board: postForm.board\n        }\n        \n        // 根据是否为编辑模式调用不同API\n        let response\n        if (isEdit.value) {\n          response = await updatePost(postId.value, postData)\n              } else {\n          response = await createPost(postData)\n              }\n              \n        log('提交帖子响应:', response);\n\n        // 处理响应\n        if (response && (response.status === 0 || response.code === 0 || response.id)) {\n          log('发布成功，完整响应对象:', {\n                  response,\n            status: response.status,\n            code: response.code,\n            id: response.id,\n            data: response.data\n                });\n          \n          // 显示成功消息\n          ElMessage({\n            message: isEdit.value ? '编辑帖子成功' : '发布帖子成功',\n            type: 'success'\n          })\n\n                // 获取帖子ID\n          let newPostId\n          if (isEdit.value) {\n            newPostId = postId.value\n          } else if (response.data && response.data.id) {\n            newPostId = response.data.id\n          } else if (response.id) {\n            newPostId = response.id\n          } else if (typeof response === 'object') {\n            // 尝试从响应对象中找到id字段\n            for (const key in response) {\n              if (key === 'id' && response[key]) {\n                newPostId = response[key]\n                break\n              } else if (response[key] && typeof response[key] === 'object' && response[key].id) {\n                newPostId = response[key].id\n                break\n                    }\n                  }\n                }\n\n          log('解析后的帖子ID:', newPostId);\n          \n          // 刷新首页最新帖子列表\n          try {\n            refreshPosts()\n            log('已刷新最新帖子列表');\n          } catch (error) {\n            console.error('刷新帖子列表失败:', error)\n          }\n          \n          // 跳转到帖子详情页或板块页面\n          if (newPostId) {\n            router.push(`/posts/${newPostId}`)\n          } else if (postForm.board) {\n            const boardId = postForm.board\n            log('跳转到板块详情页，板块ID:', boardId);\n            router.push(`/boards/${boardId}`)\n                } else {\n            router.push('/posts')\n                }\n              } else {\n          throw new Error(response?.msg || '操作失败')\n              }\n            } catch (error) {\n        console.error('提交表单失败:', error)\n        \n        if (error.message === '表单验证失败') {\n          log('表单验证失败');\n          ElMessage.error('请检查表单填写是否正确')\n        } else {\n          ElMessage.error(error.message || '操作失败，请稍后再试')\n        }\n      } finally {\n        loading.value = false\n        }\n    }\n\n    // 处理内容变化\n    const handleContentChange = (content) => {\n      log('内容变化:', content);\n      postForm.content = content\n    }\n\n    // 返回上一页\n    const goBack = () => {\n      router.back()\n    }\n\n    return {\n      formRef,\n      postForm,\n      rules,\n      loading,\n      isEdit,\n      boardOptions,\n      submitForm,\n      handleContentChange,\n      goBack\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-create-container {\n  max-width: 1200px;\n  margin: 20px auto;\n  padding: 0 20px;\n}\n\n.post-form-card {\n  margin-bottom: 20px;\n}\n\n:deep(.el-form-item__content) {\n  line-height: normal;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}