{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n  console.log('发送请求:', config.url, '是否有token:', !!token);\n\n  // 设置Authorization头\n  if (token) {\n    // 确保token格式正确\n    var formattedToken = token.startsWith('Bearer ') ? token : \"Bearer \".concat(token);\n    config.headers.Authorization = formattedToken;\n    console.log('设置Authorization头:', formattedToken);\n  } else {\n    console.log('没有token，不设置Authorization头');\n  }\n\n  // 设置Content-Type头（如果没有设置）\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n      console.log('设置Content-Type头: application/json');\n    }\n  }\n\n  // 对于热门板块API，特别处理\n  if (config.url.includes('/api/v1/boards/hot/')) {\n    console.log('热门板块API请求，确保正确设置参数:', config.params);\n  }\n  console.log('请求头部:', config.headers);\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  // 检查是否有明确的错误状态\n  if (res.status && res.status !== 0 && res.status !== 200) {\n    ElMessage({\n      message: res.msg || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.status === 401) {\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    // 返回整个响应数据，让调用者决定如何处理\n    // 不自动显示成功消息，由具体组件决定是否显示\n\n    // 如果是“操作成功”消息，则不显示\n    if (res.msg === '操作成功') {\n      console.log('拦截到“操作成功”消息，不显示');\n      // 清除所有消息，确保不显示“操作成功”\n      ElMessage.closeAll();\n\n      // 修改响应中的消息，避免其他地方显示\n      res.msg = '';\n    }\n\n    // 如果当前路径是发帖页面，则清除所有消息\n    var currentPath = window.location.pathname;\n    if (currentPath.includes('/post/create') || currentPath.includes('/post/edit')) {\n      console.log('当前路径是发帖页面，清除所有消息');\n      ElMessage.closeAll();\n    }\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n    if (status === 401) {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else {\n      ElMessage({\n        message: error.response.data.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n  } else {\n    ElMessage({\n      message: '网络错误，请检查您的网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","console","log","url","formattedToken","startsWith","concat","headers","Authorization","method","data","FormData","includes","params","error","Promise","reject","response","res","status","message","msg","type","duration","removeItem","push","Error","closeAll","currentPath","window","location","pathname"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    console.log('发送请求:', config.url, '是否有token:', !!token)\n\n    // 设置Authorization头\n    if (token) {\n      // 确保token格式正确\n      const formattedToken = token.startsWith('Bearer ') ? token : `Bearer ${token}`\n      config.headers.Authorization = formattedToken\n      console.log('设置Authorization头:', formattedToken)\n    } else {\n      console.log('没有token，不设置Authorization头')\n    }\n\n    // 设置Content-Type头（如果没有设置）\n    if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n      if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n        config.headers['Content-Type'] = 'application/json'\n        console.log('设置Content-Type头: application/json')\n      }\n    }\n\n    // 对于热门板块API，特别处理\n    if (config.url.includes('/api/v1/boards/hot/')) {\n      console.log('热门板块API请求，确保正确设置参数:', config.params)\n    }\n\n    console.log('请求头部:', config.headers)\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    // 检查是否有明确的错误状态\n    if (res.status && res.status !== 0 && res.status !== 200) {\n      ElMessage({\n        message: res.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      // 401: 未登录或token过期\n      if (res.status === 401) {\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      }\n\n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      // 返回整个响应数据，让调用者决定如何处理\n      // 不自动显示成功消息，由具体组件决定是否显示\n\n      // 如果是“操作成功”消息，则不显示\n      if (res.msg === '操作成功') {\n        console.log('拦截到“操作成功”消息，不显示')\n        // 清除所有消息，确保不显示“操作成功”\n        ElMessage.closeAll()\n\n        // 修改响应中的消息，避免其他地方显示\n        res.msg = ''\n      }\n\n      // 如果当前路径是发帖页面，则清除所有消息\n      const currentPath = window.location.pathname\n      if (currentPath.includes('/post/create') || currentPath.includes('/post/edit')) {\n        console.log('当前路径是发帖页面，清除所有消息')\n        ElMessage.closeAll()\n      }\n\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n\n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n\n      if (status === 401) {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'error',\n          duration: 5 * 1000\n        })\n\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      } else {\n        ElMessage({\n          message: error.response.data.msg || '请求失败',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    } else {\n      ElMessage({\n        message: '网络错误，请检查您的网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    }\n\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}