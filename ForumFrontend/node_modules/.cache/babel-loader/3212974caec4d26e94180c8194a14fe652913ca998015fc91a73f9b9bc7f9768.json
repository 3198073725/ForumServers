{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createTextVNode as _createTextVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"post-create-container\"\n};\nvar _hoisted_2 = {\n  slot: \"header\",\n  \"class\": \"clearfix\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_option = _resolveComponent(\"el-option\");\n  var _component_el_select = _resolveComponent(\"el-select\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    \"class\": \"post-form-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"span\", null, _toDisplayString($data.isEdit ? '编辑帖子' : '发布新帖'), 1 /* TEXT */)]), _createVNode(_component_el_form, {\n        ref: \"postForm\",\n        model: $data.postForm,\n        rules: $data.postRules,\n        \"label-width\": \"80px\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"标题\",\n            prop: \"title\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $data.postForm.title,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n                  return $data.postForm.title = $event;\n                }),\n                placeholder: \"请输入帖子标题\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"板块\",\n            prop: \"board\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_select, {\n                modelValue: $data.postForm.board,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $data.postForm.board = $event;\n                }),\n                placeholder: \"请选择板块\",\n                style: {\n                  \"width\": \"100%\"\n                },\n                disabled: $data.isEdit && !_ctx.isAdmin\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boardOptions, function (board) {\n                    return _openBlock(), _createBlock(_component_el_option, {\n                      key: board.id,\n                      label: board.name,\n                      value: board.id\n                    }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\", \"disabled\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"内容\",\n            prop: \"content\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $data.postForm.content,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $data.postForm.content = $event;\n                }),\n                type: \"textarea\",\n                rows: 15,\n                placeholder: \"请输入帖子内容\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_button, {\n                onClick: $options.cancel\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[3] || (_cache[3] = [_createTextVNode(\"取消\")]);\n                }),\n                _: 1 /* STABLE */,\n                __: [3]\n              }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n                type: \"primary\",\n                onClick: $options.submitForm,\n                loading: $data.submitting\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($data.isEdit ? '保存修改' : '发布帖子'), 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\", \"loading\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\", \"rules\"])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["slot","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","_withCtx","_createElementVNode","_hoisted_2","_toDisplayString","$data","isEdit","_component_el_form","ref","model","postForm","rules","postRules","_component_el_form_item","label","prop","_component_el_input","modelValue","title","_cache","$event","placeholder","_","_component_el_select","board","style","disabled","_ctx","isAdmin","_Fragment","_renderList","boardOptions","_createBlock","_component_el_option","key","id","name","value","content","type","rows","_component_el_button","onClick","$options","cancel","_createTextVNode","__","submitForm","loading","submitting"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostCreate.vue"],"sourcesContent":["<template>\n  <div class=\"post-create-container\">\n    <el-card class=\"post-form-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>{{ isEdit ? '编辑帖子' : '发布新帖' }}</span>\n      </div>\n\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"postRules\"\n        label-width=\"80px\"\n      >\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"postForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"板块\" prop=\"board\">\n          <el-select\n            v-model=\"postForm.board\"\n            placeholder=\"请选择板块\"\n            style=\"width: 100%\"\n            :disabled=\"isEdit && !isAdmin\"\n          >\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.id\"\n              :label=\"board.name\"\n              :value=\"board.id\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input\n            v-model=\"postForm.content\"\n            type=\"textarea\"\n            :rows=\"15\"\n            placeholder=\"请输入帖子内容\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button @click=\"cancel\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\n            {{ isEdit ? '保存修改' : '发布帖子' }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { getBoardList } from '@/api/board'\nimport { createPost, getPostDetail, updatePost } from '@/api/post'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'PostCreate',\n  data() {\n    return {\n      isEdit: false,\n      postId: null,\n      submitting: false,\n      boardOptions: [],\n      postForm: {\n        title: '',\n        board: null,\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }\n        ],\n        board: [\n          { required: true, message: '请选择板块', trigger: 'change' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 10, message: '内容不能少于 10 个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAdmin',\n      'isAuthenticated'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    }\n  },\n  created() {\n    console.log('发帖页面创建, 登录状态:', this.isLogin, '认证状态:', this.isAuthenticated)\n\n    // 检查是否登录\n    if (!this.isLogin) {\n      console.log('发帖页面检测到未登录，跳转到登录页面')\n      this.$message.warning('请先登录')\n      this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n      return\n    }\n\n    console.log('发帖页面检测到已登录，继续加载页面')\n\n    // 清除可能的成功消息提示\n    this.$message.closeAll()\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(() => {\n      console.log('组件内延时清除消息')\n      this.$message.closeAll()\n    }, 200)\n\n    // 获取板块选项\n    this.fetchBoardOptions()\n\n    // 检查是否是编辑模式\n    const id = this.$route.params.id\n    if (id) {\n      this.isEdit = true\n      this.postId = id\n      this.fetchPostDetail(id)\n    } else {\n      // 如果是从板块详情页跳转过来，预设板块\n      const boardId = this.$route.params.boardId\n      if (boardId) {\n        this.postForm.board = parseInt(boardId)\n      }\n    }\n  },\n  methods: {\n    // 获取板块选项\n    async fetchBoardOptions() {\n      try {\n        // 清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n\n        console.log('开始获取板块列表...')\n        const response = await getBoardList()\n        console.log('板块列表响应:', response)\n\n        let boardsData = []\n        if (response && response.status === 0 && response.data) {\n          // 处理Django REST framework自定义响应格式\n          console.log('使用status=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          // 处理另一种自定义响应格式\n          console.log('使用code=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          console.log('使用数组格式处理板块列表数据')\n          boardsData = response\n        } else {\n          console.error('获取板块列表失败:', response ? response.msg : '未知错误')\n          boardsData = [] // 如果获取失败，设置为空数组\n          this.$message.error(response?.msg || '获取板块列表失败')\n        }\n        \n        // 过滤板块列表，如果不是管理员，则过滤掉\"推荐\"和\"精选\"板块\n        if (!this.isAdmin) {\n          console.log('非管理员用户，过滤掉推荐和精选板块')\n          boardsData = boardsData.filter(board => \n            board.name !== '推荐' && board.name !== '精选'\n          )\n        }\n        \n        this.boardOptions = boardsData\n        \n        // 再次清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n        \n        console.log('获取到的板块选项:', this.boardOptions)\n      } catch (error) {\n        console.error('获取板块列表失败:', error)\n        this.$message.error('获取板块列表失败')\n      }\n\n      // 添加延时清除，确保异步请求完成后也不会显示消息\n      setTimeout(() => {\n        console.log('获取板块列表后延时清除消息')\n        this.$message.closeAll()\n      }, 300)\n    },\n\n    // 获取帖子详情（编辑模式）\n    async fetchPostDetail(id) {\n      try {\n        const response = await getPostDetail(id)\n        if (response.code === 0) {\n          const post = response.data\n          this.postForm = {\n            title: post.title,\n            board: post.board.id,\n            content: post.content\n          }\n\n          // 检查是否有权限编辑\n          if (!this.isAdmin && post.user.id !== this.$store.getters.userId) {\n            this.$message.error('您没有权限编辑该帖子')\n            this.$router.push({ name: 'PostDetail', params: { id } })\n          }\n        } else {\n          this.$message.error(response.msg || '获取帖子详情失败')\n          this.$router.push({ name: 'PostList' })\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败')\n        this.$router.push({ name: 'PostList' })\n      }\n    },\n\n    // 取消\n    cancel() {\n      // 使用router.back()返回上一页\n      this.$router.back()\n    },\n\n    // 提交表单\n    submitForm() {\n      this.$refs.postForm.validate(async (valid) => {\n        if (valid) {\n          this.submitting = true\n          try {\n            let response\n            if (this.isEdit) {\n              response = await updatePost(this.postId, this.postForm)\n            } else {\n              response = await createPost(this.postForm)\n            }\n\n            if (response.code === 0) {\n              // 不显示成功消息\n              // this.$message.success(response.msg || (this.isEdit ? '更新成功' : '发布成功'))\n\n              // 跳转到帖子详情页\n              const postId = this.isEdit ? this.postId : response.data.id\n              this.$router.push({ name: 'PostDetail', params: { id: postId } })\n            } else {\n              this.$message.error(response.msg || (this.isEdit ? '更新失败' : '发布失败'))\n            }\n          } catch (error) {\n            console.error(this.isEdit ? '更新帖子失败:' : '发布帖子失败:', error)\n            this.$message.error(this.isEdit ? '更新帖子失败' : '发布帖子失败')\n          } finally {\n            this.submitting = false\n          }\n        } else {\n          return false\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-create-container {\n  padding: 20px;\n}\n\n.post-form-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}