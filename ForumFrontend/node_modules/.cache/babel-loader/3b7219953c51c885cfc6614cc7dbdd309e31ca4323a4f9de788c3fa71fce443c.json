{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nvar aria = require('../../constants/aria.js');\nvar registeredEscapeHandlers = [];\nvar cachedHandler = function cachedHandler(event) {\n  if (event.code === aria.EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach(function (registeredHandler) {\n      return registeredHandler(event);\n    });\n  }\n};\nvar useEscapeKeydown = function useEscapeKeydown(handler) {\n  vue.onMounted(function () {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener(\"keydown\", cachedHandler);\n    }\n    if (core.isClient) registeredEscapeHandlers.push(handler);\n  });\n  vue.onBeforeUnmount(function () {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(function (registeredHandler) {\n      return registeredHandler !== handler;\n    });\n    if (registeredEscapeHandlers.length === 0) {\n      if (core.isClient) document.removeEventListener(\"keydown\", cachedHandler);\n    }\n  });\n};\nexports.useEscapeKeydown = useEscapeKeydown;","map":{"version":3,"names":["registeredEscapeHandlers","cachedHandler","event","code","aria","EVENT_CODE","esc","forEach","registeredHandler","useEscapeKeydown","handler","vue","onMounted","length","document","addEventListener","core","isClient","push","onBeforeUnmount","filter","removeEventListener"],"sources":["../../../../../packages/hooks/use-escape-keydown/index.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted } from 'vue'\nimport { isClient } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\n\nlet registeredEscapeHandlers: ((e: KeyboardEvent) => void)[] = []\n\nconst cachedHandler = (event: KeyboardEvent) => {\n  if (event.code === EVENT_CODE.esc) {\n    registeredEscapeHandlers.forEach((registeredHandler) =>\n      registeredHandler(event)\n    )\n  }\n}\n\nexport const useEscapeKeydown = (handler: (e: KeyboardEvent) => void) => {\n  onMounted(() => {\n    if (registeredEscapeHandlers.length === 0) {\n      document.addEventListener('keydown', cachedHandler)\n    }\n    if (isClient) registeredEscapeHandlers.push(handler)\n  })\n\n  onBeforeUnmount(() => {\n    registeredEscapeHandlers = registeredEscapeHandlers.filter(\n      (registeredHandler) => registeredHandler !== handler\n    )\n    if (registeredEscapeHandlers.length === 0) {\n      if (isClient) document.removeEventListener('keydown', cachedHandler)\n    }\n  })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAGA,IAAIA,wBAAwB,GAAG,EAAE;AACjC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAK;EAC/B,IAAIA,KAAK,CAACC,IAAI,KAAKC,IAAA,CAAAC,UAAU,CAACC,GAAG,EAAE;IACjCN,wBAAwB,CAACO,OAAO,CAAC,UAACC,iBAAiB;MAAA,OAAKA,iBAAiB,CAACN,KAAK,CAAC;IAAA,EAAC;EACrF;AACA,CAAC;AACW,IAACO,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,OAAO,EAAK;EAC3CC,GAAA,CAAAC,SAAS,CAAC,YAAM;IACd,IAAIZ,wBAAwB,CAACa,MAAM,KAAK,CAAC,EAAE;MACzCC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEd,aAAa,CAAC;IACzD;IACI,IAAIe,IAAA,CAAAC,QAAQ,EACVjB,wBAAwB,CAACkB,IAAI,CAACR,OAAO,CAAC;EAC5C,CAAG,CAAC;EACFC,GAAA,CAAAQ,eAAe,CAAC,YAAM;IACpBnB,wBAAwB,GAAGA,wBAAwB,CAACoB,MAAM,CAAC,UAACZ,iBAAiB;MAAA,OAAKA,iBAAiB,KAAKE,OAAO;IAAA,EAAC;IAChH,IAAIV,wBAAwB,CAACa,MAAM,KAAK,CAAC,EAAE;MACzC,IAAIG,IAAA,CAAAC,QAAQ,EACVH,QAAQ,CAACO,mBAAmB,CAAC,SAAS,EAAEpB,aAAa,CAAC;IAC9D;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}