{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"rich-text-editor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Editor = _resolveComponent(\"Editor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Editor, {\n    modelValue: $setup.content,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $setup.content = $event;\n    }),\n    init: $setup.init,\n    disabled: $props.disabled,\n    onOnChange: $setup.handleChange\n  }, null, 8 /* PROPS */, [\"modelValue\", \"init\", \"disabled\", \"onOnChange\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","_component_Editor","modelValue","$setup","content","_cache","$event","init","disabled","$props","onOnChange","handleChange"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\components\\RichTextEditor.vue"],"sourcesContent":["<template>\r\n  <div class=\"rich-text-editor\">\r\n    <Editor\r\n      v-model=\"content\"\r\n      :init=\"init\"\r\n      :disabled=\"disabled\"\r\n      @onChange=\"handleChange\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Editor from '@tinymce/tinymce-vue'\r\nimport { ref, watch } from 'vue'\r\n\r\nexport default {\r\n  name: 'RichTextEditor',\r\n  components: {\r\n    Editor\r\n  },\r\n  props: {\r\n    modelValue: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  emits: ['update:modelValue', 'change'],\r\n  setup(props, { emit }) {\r\n    const content = ref(props.modelValue)\r\n\r\n    watch(() => props.modelValue, (newValue) => {\r\n      content.value = newValue\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n      emit('update:modelValue', e.target.getContent())\r\n      emit('change', e.target.getContent())\r\n    }\r\n\r\n    const init = {\r\n      height: 500,\r\n      menubar: true,\r\n      plugins: [\r\n        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\r\n        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\r\n        'insertdatetime', 'media', 'table', 'help', 'wordcount'\r\n      ],\r\n      toolbar: 'undo redo | blocks | ' +\r\n        'bold italic backcolor | alignleft aligncenter ' +\r\n        'alignright alignjustify | bullist numlist outdent indent | ' +\r\n        'removeformat | help',\r\n      content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\r\n      images_upload_handler: async (blobInfo, progress) => {\r\n        try {\r\n          // 这里需要实现图片上传到后端的逻辑\r\n          const formData = new FormData()\r\n          formData.append('image', blobInfo.blob(), blobInfo.filename())\r\n          \r\n          // 调用后端上传接口\r\n          const response = await fetch('/api/posts/upload-image/', {\r\n            method: 'POST',\r\n            body: formData\r\n          })\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('图片上传失败')\r\n          }\r\n          \r\n          const data = await response.json()\r\n          return data.url // 返回图片URL\r\n        } catch (error) {\r\n          console.error('图片上传失败:', error)\r\n          throw error\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      content,\r\n      init,\r\n      handleChange\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.rich-text-editor {\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":";;EACO,SAAM;AAAkB;;;uBAA7BA,mBAAA,CAOM,OAPNC,UAOM,GANJC,YAAA,CAKEC,iBAAA;IAPNC,UAAA,EAGeC,MAAA,CAAAC,OAAO;IAHtB,uBAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAGeH,MAAA,CAAAC,OAAO,GAAAE,MAAA;IAAA;IACfC,IAAI,EAAEJ,MAAA,CAAAI,IAAI;IACVC,QAAQ,EAAEC,MAAA,CAAAD,QAAQ;IAClBE,UAAQ,EAAEP,MAAA,CAAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}