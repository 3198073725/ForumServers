{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/defineProperty.js\")[\"default\"];\nvar _regeneratorRuntime = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\")[\"default\"];\nvar _asyncToGenerator = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\")[\"default\"];\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.from.js\");\nrequire(\"core-js/modules/es.array.includes.js\");\nrequire(\"core-js/modules/es.function.name.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nrequire(\"core-js/modules/es.string.iterator.js\");\nrequire(\"core-js/modules/web.timers.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index$6 = require('../../input/index.js');\nvar index$4 = require('../../scrollbar/index.js');\nvar index$3 = require('../../tooltip/index.js');\nvar index$5 = require('../../icon/index.js');\nvar autocomplete = require('./autocomplete.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-attrs/index.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-id/index.js');\nvar shared = require('@vue/shared');\nvar event = require('../../../constants/event.js');\nvar error = require('../../../utils/error.js');\nvar COMPONENT_NAME = \"ElAutocomplete\";\nvar __default__ = vue.defineComponent({\n  name: COMPONENT_NAME,\n  inheritAttrs: false\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: autocomplete.autocompleteProps,\n  emits: autocomplete.autocompleteEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var attrs = index.useAttrs();\n    var rawAttrs = vue.useAttrs();\n    var disabled = useFormCommonProps.useFormDisabled();\n    var ns = index$1.useNamespace(\"autocomplete\");\n    var inputRef = vue.ref();\n    var regionRef = vue.ref();\n    var popperRef = vue.ref();\n    var listboxRef = vue.ref();\n    var readonly = false;\n    var ignoreFocusEvent = false;\n    var suggestions = vue.ref([]);\n    var highlightedIndex = vue.ref(-1);\n    var dropdownWidth = vue.ref(\"\");\n    var activated = vue.ref(false);\n    var suggestionDisabled = vue.ref(false);\n    var loading = vue.ref(false);\n    var listboxId = index$2.useId();\n    var styles = vue.computed(function () {\n      return rawAttrs.style;\n    });\n    var suggestionVisible = vue.computed(function () {\n      var isValidData = suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    var suggestionLoading = vue.computed(function () {\n      return !props.hideLoading && loading.value;\n    });\n    var refInput = vue.computed(function () {\n      if (inputRef.value) {\n        return Array.from(inputRef.value.$el.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    var onSuggestionShow = function onSuggestionShow() {\n      if (suggestionVisible.value) {\n        dropdownWidth.value = \"\".concat(inputRef.value.$el.offsetWidth, \"px\");\n      }\n    };\n    var onHide = function onHide() {\n      highlightedIndex.value = -1;\n    };\n    var getData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryString) {\n        var cb, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!suggestionDisabled.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              cb = function cb(suggestionList) {\n                loading.value = false;\n                if (suggestionDisabled.value) return;\n                if (shared.isArray(suggestionList)) {\n                  suggestions.value = suggestionList;\n                  highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n                } else {\n                  error.throwError(COMPONENT_NAME, \"autocomplete suggestions must be an array\");\n                }\n              };\n              loading.value = true;\n              if (!shared.isArray(props.fetchSuggestions)) {\n                _context.next = 8;\n                break;\n              }\n              cb(props.fetchSuggestions);\n              _context.next = 12;\n              break;\n            case 8:\n              _context.next = 10;\n              return props.fetchSuggestions(queryString, cb);\n            case 10:\n              result = _context.sent;\n              if (shared.isArray(result)) cb(result);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function getData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var debouncedGetData = lodashUnified.debounce(getData, props.debounce);\n    var handleInput = function handleInput(value) {\n      var valuePresented = !!value;\n      emit(event.INPUT_EVENT, value);\n      emit(event.UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      activated.value || (activated.value = valuePresented);\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n      debouncedGetData(value);\n    };\n    var handleMouseDown = function handleMouseDown(event) {\n      var _a;\n      if (disabled.value) return;\n      if (((_a = event.target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        activated.value = true;\n      }\n    };\n    var handleChange = function handleChange(value) {\n      emit(event.CHANGE_EVENT, value);\n    };\n    var handleFocus = function handleFocus(evt) {\n      var _a;\n      if (!ignoreFocusEvent) {\n        activated.value = true;\n        emit(\"focus\", evt);\n        var queryString = (_a = props.modelValue) != null ? _a : \"\";\n        if (props.triggerOnFocus && !readonly) {\n          debouncedGetData(String(queryString));\n        }\n      } else {\n        ignoreFocusEvent = false;\n      }\n    };\n    var handleBlur = function handleBlur(evt) {\n      setTimeout(function () {\n        var _a;\n        if ((_a = popperRef.value) == null ? void 0 : _a.isFocusInsideContent()) {\n          ignoreFocusEvent = true;\n          return;\n        }\n        activated.value && close();\n        emit(\"blur\", evt);\n      });\n    };\n    var handleClear = function handleClear() {\n      activated.value = false;\n      emit(event.UPDATE_MODEL_EVENT, \"\");\n      emit(\"clear\");\n    };\n    var handleKeyEnter = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n                handleSelect(suggestions.value[highlightedIndex.value]);\n              } else if (props.selectWhenUnmatched) {\n                emit(\"select\", {\n                  value: props.modelValue\n                });\n                suggestions.value = [];\n                highlightedIndex.value = -1;\n              }\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function handleKeyEnter() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var handleKeyEscape = function handleKeyEscape(evt) {\n      if (suggestionVisible.value) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        close();\n      }\n    };\n    var close = function close() {\n      activated.value = false;\n    };\n    var focus = function focus() {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.focus();\n    };\n    var blur = function blur() {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.blur();\n    };\n    var handleSelect = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(item) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              emit(event.INPUT_EVENT, item[props.valueKey]);\n              emit(event.UPDATE_MODEL_EVENT, item[props.valueKey]);\n              emit(\"select\", item);\n              suggestions.value = [];\n              highlightedIndex.value = -1;\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function handleSelect(_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var highlight = function highlight(index) {\n      if (!suggestionVisible.value || loading.value) return;\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n      var suggestion = regionRef.value.querySelector(\".\".concat(ns.be(\"suggestion\", \"wrap\")));\n      var suggestionList = suggestion.querySelectorAll(\".\".concat(ns.be(\"suggestion\", \"list\"), \" li\"));\n      var highlightItem = suggestionList[index];\n      var scrollTop = suggestion.scrollTop;\n      var offsetTop = highlightItem.offsetTop,\n        scrollHeight = highlightItem.scrollHeight;\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n      highlightedIndex.value = index;\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", \"\".concat(listboxId.value, \"-item-\").concat(highlightedIndex.value));\n    };\n    var stopHandle = core.onClickOutside(listboxRef, function () {\n      var _a;\n      if ((_a = popperRef.value) == null ? void 0 : _a.isFocusInsideContent()) return;\n      suggestionVisible.value && close();\n    });\n    vue.onBeforeUnmount(function () {\n      stopHandle == null ? void 0 : stopHandle();\n    });\n    vue.onMounted(function () {\n      inputRef.value.ref.setAttribute(\"role\", \"textbox\");\n      inputRef.value.ref.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.ref.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", \"\".concat(listboxId.value, \"-item-\").concat(highlightedIndex.value));\n      readonly = inputRef.value.ref.hasAttribute(\"readonly\");\n    });\n    expose({\n      highlightedIndex: highlightedIndex,\n      activated: activated,\n      loading: loading,\n      inputRef: inputRef,\n      popperRef: popperRef,\n      suggestions: suggestions,\n      handleSelect: handleSelect,\n      handleKeyEnter: handleKeyEnter,\n      focus: focus,\n      blur: blur,\n      close: close,\n      highlight: highlight,\n      getData: getData\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$3.ElTooltip), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        visible: vue.unref(suggestionVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n        \"popper-class\": [vue.unref(ns).e(\"popper\"), _ctx.popperClass],\n        teleported: _ctx.teleported,\n        \"append-to\": _ctx.appendTo,\n        \"gpu-acceleration\": false,\n        pure: \"\",\n        \"manual-mode\": \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        transition: \"\".concat(vue.unref(ns).namespace.value, \"-zoom-in-top\"),\n        persistent: \"\",\n        role: \"listbox\",\n        onBeforeShow: onSuggestionShow,\n        onHide: onHide\n      }, {\n        content: vue.withCtx(function () {\n          return [vue.createElementVNode(\"div\", {\n            ref_key: \"regionRef\",\n            ref: regionRef,\n            \"class\": vue.normalizeClass([vue.unref(ns).b(\"suggestion\"), vue.unref(ns).is(\"loading\", vue.unref(suggestionLoading))]),\n            style: vue.normalizeStyle(_defineProperty(_defineProperty({}, _ctx.fitInputWidth ? \"width\" : \"minWidth\", dropdownWidth.value), \"outline\", \"none\")),\n            role: \"region\"\n          }, [vue.createVNode(vue.unref(index$4.ElScrollbar), {\n            id: vue.unref(listboxId),\n            tag: \"ul\",\n            \"wrap-class\": vue.unref(ns).be(\"suggestion\", \"wrap\"),\n            \"view-class\": vue.unref(ns).be(\"suggestion\", \"list\"),\n            role: \"listbox\"\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.unref(suggestionLoading) ? (vue.openBlock(), vue.createElementBlock(\"li\", {\n                key: 0\n              }, [vue.renderSlot(_ctx.$slots, \"loading\", {}, function () {\n                return [vue.createVNode(vue.unref(index$5.ElIcon), {\n                  \"class\": vue.normalizeClass(vue.unref(ns).is(\"loading\"))\n                }, {\n                  \"default\": vue.withCtx(function () {\n                    return [vue.createVNode(vue.unref(iconsVue.Loading))];\n                  }),\n                  _: 1\n                }, 8, [\"class\"])];\n              })])) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, {\n                key: 1\n              }, vue.renderList(suggestions.value, function (item, index) {\n                return vue.openBlock(), vue.createElementBlock(\"li\", {\n                  id: \"\".concat(vue.unref(listboxId), \"-item-\").concat(index),\n                  key: index,\n                  \"class\": vue.normalizeClass({\n                    highlighted: highlightedIndex.value === index\n                  }),\n                  role: \"option\",\n                  \"aria-selected\": highlightedIndex.value === index,\n                  onClick: function onClick($event) {\n                    return handleSelect(item);\n                  }\n                }, [vue.renderSlot(_ctx.$slots, \"default\", {\n                  item: item\n                }, function () {\n                  return [vue.createTextVNode(vue.toDisplayString(item[_ctx.valueKey]), 1)];\n                })], 10, [\"id\", \"aria-selected\", \"onClick\"]);\n              }), 128))];\n            }),\n            _: 3\n          }, 8, [\"id\", \"wrap-class\", \"view-class\"])], 6)];\n        }),\n        \"default\": vue.withCtx(function () {\n          return [vue.createElementVNode(\"div\", {\n            ref_key: \"listboxRef\",\n            ref: listboxRef,\n            \"class\": vue.normalizeClass([vue.unref(ns).b(), _ctx.$attrs[\"class\"]]),\n            style: vue.normalizeStyle(vue.unref(styles)),\n            role: \"combobox\",\n            \"aria-haspopup\": \"listbox\",\n            \"aria-expanded\": vue.unref(suggestionVisible),\n            \"aria-owns\": vue.unref(listboxId)\n          }, [vue.createVNode(vue.unref(index$6.ElInput), vue.mergeProps({\n            ref_key: \"inputRef\",\n            ref: inputRef\n          }, vue.unref(attrs), {\n            clearable: _ctx.clearable,\n            disabled: vue.unref(disabled),\n            name: _ctx.name,\n            \"model-value\": _ctx.modelValue,\n            \"aria-label\": _ctx.ariaLabel,\n            onInput: handleInput,\n            onChange: handleChange,\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n            onClear: handleClear,\n            onKeydown: [vue.withKeys(vue.withModifiers(function ($event) {\n              return highlight(highlightedIndex.value - 1);\n            }, [\"prevent\"]), [\"up\"]), vue.withKeys(vue.withModifiers(function ($event) {\n              return highlight(highlightedIndex.value + 1);\n            }, [\"prevent\"]), [\"down\"]), vue.withKeys(handleKeyEnter, [\"enter\"]), vue.withKeys(close, [\"tab\"]), vue.withKeys(handleKeyEscape, [\"esc\"])],\n            onMousedown: handleMouseDown\n          }), vue.createSlots({\n            _: 2\n          }, [_ctx.$slots.prepend ? {\n            name: \"prepend\",\n            fn: vue.withCtx(function () {\n              return [vue.renderSlot(_ctx.$slots, \"prepend\")];\n            })\n          } : void 0, _ctx.$slots.append ? {\n            name: \"append\",\n            fn: vue.withCtx(function () {\n              return [vue.renderSlot(_ctx.$slots, \"append\")];\n            })\n          } : void 0, _ctx.$slots.prefix ? {\n            name: \"prefix\",\n            fn: vue.withCtx(function () {\n              return [vue.renderSlot(_ctx.$slots, \"prefix\")];\n            })\n          } : void 0, _ctx.$slots.suffix ? {\n            name: \"suffix\",\n            fn: vue.withCtx(function () {\n              return [vue.renderSlot(_ctx.$slots, \"suffix\")];\n            })\n          } : void 0]), 1040, [\"clearable\", \"disabled\", \"name\", \"model-value\", \"aria-label\", \"onKeydown\"])], 14, [\"aria-expanded\", \"aria-owns\"])];\n        }),\n        _: 3\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"teleported\", \"append-to\", \"transition\"]);\n    };\n  }\n}));\nvar Autocomplete = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"autocomplete.vue\"]]);\nexports[\"default\"] = Autocomplete;","map":{"version":3,"names":["name","COMPONENT_NAME","inheritAttrs","attrs","index","useAttrs","rawAttrs","vue","disabled","useFormCommonProps","useFormDisabled","ns","index$1","useNamespace","inputRef","ref","regionRef","popperRef","listboxRef","readonly","ignoreFocusEvent","suggestions","highlightedIndex","dropdownWidth","activated","suggestionDisabled","loading","listboxId","index$2","useId","styles","computed","style","suggestionVisible","isValidData","value","length","suggestionLoading","props","hideLoading","refInput","Array","from","$el","querySelectorAll","onSuggestionShow","concat","offsetWidth","onHide","getData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","queryString","cb","result","wrap","_callee$","_context","prev","next","abrupt","suggestionList","shared","isArray","highlightFirstItem","error","throwError","fetchSuggestions","sent","stop","_x","apply","arguments","debouncedGetData","lodashUnified","debounce","handleInput","valuePresented","emit","event","INPUT_EVENT","UPDATE_MODEL_EVENT","triggerOnFocus","handleMouseDown","_a","target","tagName","includes","document","activeElement","handleChange","CHANGE_EVENT","handleFocus","evt","modelValue","String","handleBlur","setTimeout","isFocusInsideContent","close","handleClear","handleKeyEnter","_ref3","_callee2","_callee2$","_context2","handleSelect","selectWhenUnmatched","handleKeyEscape","preventDefault","stopPropagation","focus","blur","_ref4","_callee3","item","_callee3$","_context3","valueKey","_x2","highlight","suggestion","querySelector","be","highlightItem","scrollTop","offsetTop","scrollHeight","clientHeight","setAttribute","stopHandle","core","onClickOutside","onBeforeUnmount","onMounted","hasAttribute","expose","_ctx","_cache","openBlock","createBlock","unref","index$3","ElTooltip","ref_key","visible","placement","e","popperClass","teleported","appendTo","pure"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popperRef\"\n    :visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"[ns.e('popper'), popperClass]\"\n    :teleported=\"teleported\"\n    :append-to=\"appendTo\"\n    :gpu-acceleration=\"false\"\n    pure\n    manual-mode\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    role=\"listbox\"\n    @before-show=\"onSuggestionShow\"\n    @hide=\"onHide\"\n  >\n    <div\n      ref=\"listboxRef\"\n      :class=\"[ns.b(), $attrs.class]\"\n      :style=\"styles\"\n      role=\"combobox\"\n      aria-haspopup=\"listbox\"\n      :aria-expanded=\"suggestionVisible\"\n      :aria-owns=\"listboxId\"\n    >\n      <el-input\n        ref=\"inputRef\"\n        v-bind=\"attrs\"\n        :clearable=\"clearable\"\n        :disabled=\"disabled\"\n        :name=\"name\"\n        :model-value=\"modelValue\"\n        :aria-label=\"ariaLabel\"\n        @input=\"handleInput\"\n        @change=\"handleChange\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @clear=\"handleClear\"\n        @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n        @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n        @keydown.enter=\"handleKeyEnter\"\n        @keydown.tab=\"close\"\n        @keydown.esc=\"handleKeyEscape\"\n        @mousedown=\"handleMouseDown\"\n      >\n        <template v-if=\"$slots.prepend\" #prepend>\n          <slot name=\"prepend\" />\n        </template>\n        <template v-if=\"$slots.append\" #append>\n          <slot name=\"append\" />\n        </template>\n        <template v-if=\"$slots.prefix\" #prefix>\n          <slot name=\"prefix\" />\n        </template>\n        <template v-if=\"$slots.suffix\" #suffix>\n          <slot name=\"suffix\" />\n        </template>\n      </el-input>\n    </div>\n    <template #content>\n      <div\n        ref=\"regionRef\"\n        :class=\"[ns.b('suggestion'), ns.is('loading', suggestionLoading)]\"\n        :style=\"{\n          [fitInputWidth ? 'width' : 'minWidth']: dropdownWidth,\n          outline: 'none',\n        }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          :id=\"listboxId\"\n          tag=\"ul\"\n          :wrap-class=\"ns.be('suggestion', 'wrap')\"\n          :view-class=\"ns.be('suggestion', 'list')\"\n          role=\"listbox\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <slot name=\"loading\">\n              <el-icon :class=\"ns.is('loading')\">\n                <Loading />\n              </el-icon>\n            </slot>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${listboxId}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"handleSelect(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  useAttrs as useRawAttrs,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { Loading } from '@element-plus/icons-vue'\nimport { useAttrs, useId, useNamespace } from '@element-plus/hooks'\nimport { isArray, throwError } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { autocompleteEmits, autocompleteProps } from './autocomplete'\nimport type { AutocompleteData } from './autocomplete'\n\nimport type { StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\n\nconst COMPONENT_NAME = 'ElAutocomplete'\ndefineOptions({\n  name: COMPONENT_NAME,\n  inheritAttrs: false,\n})\n\nconst props = defineProps(autocompleteProps)\nconst emit = defineEmits(autocompleteEmits)\n\nconst attrs = useAttrs()\nconst rawAttrs = useRawAttrs()\nconst disabled = useFormDisabled()\nconst ns = useNamespace('autocomplete')\n\nconst inputRef = ref<InputInstance>()\nconst regionRef = ref<HTMLElement>()\nconst popperRef = ref<TooltipInstance>()\nconst listboxRef = ref<HTMLElement>()\n\nlet readonly = false\nlet ignoreFocusEvent = false\nconst suggestions = ref<AutocompleteData>([])\nconst highlightedIndex = ref(-1)\nconst dropdownWidth = ref('')\nconst activated = ref(false)\nconst suggestionDisabled = ref(false)\nconst loading = ref(false)\n\nconst listboxId = useId()\nconst styles = computed(() => rawAttrs.style as StyleValue)\n\nconst suggestionVisible = computed(() => {\n  const isValidData = suggestions.value.length > 0\n  return (isValidData || loading.value) && activated.value\n})\n\nconst suggestionLoading = computed(() => !props.hideLoading && loading.value)\n\nconst refInput = computed<HTMLInputElement[]>(() => {\n  if (inputRef.value) {\n    return Array.from<HTMLInputElement>(\n      inputRef.value.$el.querySelectorAll('input')\n    )\n  }\n  return []\n})\n\nconst onSuggestionShow = () => {\n  if (suggestionVisible.value) {\n    dropdownWidth.value = `${inputRef.value!.$el.offsetWidth}px`\n  }\n}\n\nconst onHide = () => {\n  highlightedIndex.value = -1\n}\n\nconst getData = async (queryString: string) => {\n  if (suggestionDisabled.value) return\n\n  const cb = (suggestionList: AutocompleteData) => {\n    loading.value = false\n    if (suggestionDisabled.value) return\n\n    if (isArray(suggestionList)) {\n      suggestions.value = suggestionList\n      highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n    } else {\n      throwError(COMPONENT_NAME, 'autocomplete suggestions must be an array')\n    }\n  }\n\n  loading.value = true\n  if (isArray(props.fetchSuggestions)) {\n    cb(props.fetchSuggestions)\n  } else {\n    const result = await props.fetchSuggestions(queryString, cb)\n    if (isArray(result)) cb(result)\n  }\n}\nconst debouncedGetData = debounce(getData, props.debounce)\n\nconst handleInput = (value: string) => {\n  const valuePresented = !!value\n\n  emit(INPUT_EVENT, value)\n  emit(UPDATE_MODEL_EVENT, value)\n\n  suggestionDisabled.value = false\n  activated.value ||= valuePresented\n\n  if (!props.triggerOnFocus && !value) {\n    suggestionDisabled.value = true\n    suggestions.value = []\n    return\n  }\n\n  debouncedGetData(value)\n}\n\nconst handleMouseDown = (event: MouseEvent) => {\n  if (disabled.value) return\n  if (\n    (event.target as HTMLElement)?.tagName !== 'INPUT' ||\n    refInput.value.includes(document.activeElement as HTMLInputElement)\n  ) {\n    activated.value = true\n  }\n}\n\nconst handleChange = (value: string) => {\n  emit(CHANGE_EVENT, value)\n}\n\nconst handleFocus = (evt: FocusEvent) => {\n  if (!ignoreFocusEvent) {\n    activated.value = true\n    emit('focus', evt)\n    const queryString = props.modelValue ?? ''\n    if (props.triggerOnFocus && !readonly) {\n      debouncedGetData(String(queryString))\n    }\n  } else {\n    ignoreFocusEvent = false\n  }\n}\n\nconst handleBlur = (evt: FocusEvent) => {\n  setTimeout(() => {\n    // validate current focus event is inside el-tooltip-content\n    // if so, ignore the blur event and the next focus event\n    if (popperRef.value?.isFocusInsideContent()) {\n      ignoreFocusEvent = true\n      return\n    }\n    activated.value && close()\n    emit('blur', evt)\n  })\n}\n\nconst handleClear = () => {\n  activated.value = false\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('clear')\n}\n\nconst handleKeyEnter = async () => {\n  if (\n    suggestionVisible.value &&\n    highlightedIndex.value >= 0 &&\n    highlightedIndex.value < suggestions.value.length\n  ) {\n    handleSelect(suggestions.value[highlightedIndex.value])\n  } else if (props.selectWhenUnmatched) {\n    emit('select', { value: props.modelValue })\n    suggestions.value = []\n    highlightedIndex.value = -1\n  }\n}\n\nconst handleKeyEscape = (evt: Event) => {\n  if (suggestionVisible.value) {\n    evt.preventDefault()\n    evt.stopPropagation()\n    close()\n  }\n}\n\nconst close = () => {\n  activated.value = false\n}\n\nconst focus = () => {\n  inputRef.value?.focus()\n}\n\nconst blur = () => {\n  inputRef.value?.blur()\n}\n\nconst handleSelect = async (item: any) => {\n  emit(INPUT_EVENT, item[props.valueKey])\n  emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n  emit('select', item)\n  suggestions.value = []\n  highlightedIndex.value = -1\n}\n\nconst highlight = (index: number) => {\n  if (!suggestionVisible.value || loading.value) return\n\n  if (index < 0) {\n    highlightedIndex.value = -1\n    return\n  }\n\n  if (index >= suggestions.value.length) {\n    index = suggestions.value.length - 1\n  }\n  const suggestion = regionRef.value!.querySelector(\n    `.${ns.be('suggestion', 'wrap')}`\n  )!\n  const suggestionList = suggestion.querySelectorAll<HTMLElement>(\n    `.${ns.be('suggestion', 'list')} li`\n  )!\n  const highlightItem = suggestionList[index]\n  const scrollTop = suggestion.scrollTop\n  const { offsetTop, scrollHeight } = highlightItem\n\n  if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n    suggestion.scrollTop += scrollHeight\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= scrollHeight\n  }\n  highlightedIndex.value = index\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n}\n\nconst stopHandle = onClickOutside(listboxRef, () => {\n  // Prevent closing if focus is inside popper content\n  if (popperRef.value?.isFocusInsideContent()) return\n  suggestionVisible.value && close()\n})\n\nonBeforeUnmount(() => {\n  stopHandle?.()\n})\n\nonMounted(() => {\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute('role', 'textbox')\n  ;(inputRef.value as any).ref!.setAttribute('aria-autocomplete', 'list')\n  ;(inputRef.value as any).ref!.setAttribute('aria-controls', 'id')\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n  // get readonly attr\n  readonly = (inputRef.value as any).ref!.hasAttribute('readonly')\n})\n\ndefineExpose({\n  /** @description the index of the currently highlighted item */\n  highlightedIndex,\n  /** @description autocomplete whether activated */\n  activated,\n  /** @description remote search loading status */\n  loading,\n  /** @description el-input component instance */\n  inputRef,\n  /** @description el-tooltip component instance */\n  popperRef,\n  /** @description fetch suggestions result */\n  suggestions,\n  /** @description triggers when a suggestion is clicked */\n  handleSelect,\n  /** @description handle keyboard enter event */\n  handleKeyEnter,\n  /** @description focus the input element */\n  focus,\n  /** @description blur the input element */\n  blur,\n  /** @description close suggestion */\n  close,\n  /** @description highlight an item in a suggestion */\n  highlight,\n  /** @description loading suggestion list */\n  getData,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAyIc;EACZA,IAAM,EAAAC,cAAA;EACNC,YAAc;AAChB;;;;;;;;IAKA,IAAMC,KAAA,GAAQC,KAAA,CAAAC,QAAS;IACvB,IAAMC,QAAA,GAAWC,GAAA,CAAAF,QAAY;IAC7B,IAAMG,QAAA,GAAWC,kBAAA,CAAAC,eAAgB;IAC3B,IAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,cAAc;IAEtC,IAAMC,QAAA,GAAWP,GAAA,CAAAQ,GAAmB;IACpC,IAAMC,SAAA,GAAYT,GAAA,CAAAQ,GAAiB;IACnC,IAAME,SAAA,GAAYV,GAAA,CAAAQ,GAAqB;IACvC,IAAMG,UAAA,GAAaX,GAAA,CAAAQ,GAAiB;IAEpC,IAAII,QAAW;IACf,IAAIC,gBAAmB;IACjB,IAAAC,WAAA,GAAcd,GAAA,CAAAQ,GAAsB,GAAE;IACtC,IAAAO,gBAAA,GAAmBf,GAAA,CAAAQ,GAAA,CAAI,CAAE;IACzB,IAAAQ,aAAA,GAAgBhB,GAAA,CAAAQ,GAAA,CAAI,EAAE;IACtB,IAAAS,SAAA,GAAYjB,GAAA,CAAAQ,GAAA,CAAI,KAAK;IACrB,IAAAU,kBAAA,GAAqBlB,GAAA,CAAAQ,GAAA,CAAI,KAAK;IAC9B,IAAAW,OAAA,GAAUnB,GAAA,CAAAQ,GAAA,CAAI,KAAK;IAEzB,IAAMY,SAAA,GAAYC,OAAA,CAAAC,KAAM;IACxB,IAAMC,MAAS,GAAAvB,GAAA,CAAAwB,QAAA,CAAS;MAAA,OAAMzB,QAAA,CAAS0B,KAAmB;IAAA;IAEpD,IAAAC,iBAAA,GAAoB1B,GAAA,CAAAwB,QAAA,CAAS,YAAM;MACjC,IAAAG,WAAA,GAAcb,WAAY,CAAAc,KAAA,CAAMC,MAAS;MACvC,QAAAF,WAAA,IAAeR,OAAQ,CAAAS,KAAA,KAAUX,SAAU,CAAAW,KAAA;IAAA,CACpD;IAED,IAAME,iBAAA,GAAoB9B,GAAA,CAAAwB,QAAS;MAAA,OAAM,CAACO,KAAM,CAAAC,WAAA,IAAeb,OAAA,CAAQS,KAAK;IAAA;IAEtE,IAAAK,QAAA,GAAWjC,GAAA,CAAAwB,QAAA,CAA6B,YAAM;MAClD,IAAIjB,QAAA,CAASqB,KAAO;QAClB,OAAOM,KAAM,CAAAC,IAAA,CAAA5B,QAAA,CAAAqB,KAAA,CAAAQ,GAAA,CAAAC,gBAAA;MAAA;MAEb;IAAA,CACF;IACA,IAAAC,gBAAQ,YAARA,gBAAQA,CAAA;MACT,IAAAZ,iBAAA,CAAAE,KAAA;QAEDZ,aAAA,CAAAY,KAAA,MAAAW,MAAA,CAA+BhC,QAAA,CAAAqB,KAAA,CAAAQ,GAAA,CAAAI,WAAA;MAC7B;IACE;IACF,IAAAC,MAAA,YAAAA,OAAA;MACF1B,gBAAA,CAAAa,KAAA;IAEA;IACE,IAAAc,OAAA;MAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAyBC,WAAA;QAAA,IAAAC,EAAA,EAAAC,MAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,KAC3BrC,kBAAA,CAAAU,KAAA;gBAAAyB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA;YAAA;cAGEP,EAAA,YAAAA,GAAAQ,cAA8B;gBAExBtC,OAAA,CAAAS,KAA2C;gBAC/C,IAAAV,kBAAgB,CAAAU,KAAA,EAChB;gBAEI,IAAA8B,MAAA,CAAAC,OAAA,CAAQF,cAAc,CAAG;kBAC3B3C,WAAA,CAAYc,KAAQ,GAAA6B,cAAA;kBACH1C,gBAAA,CAAAa,KAAA,GAAQG,KAAM,CAAA6B,kBAAA,GAAqB,CAAI;gBAAA,CACnD;kBACLC,KAAA,CAAAC,UAAA,CAAWpE,cAAA,EAAgB,2CAA2C;gBAAA;cACxE,CACF;cAEAyB,OAAA,CAAQS,KAAQ;cAAA,KACZ8B,MAAA,CAAAC,OAAA,CAAQ5B,KAAM,CAAAgC,gBAAgB,CAAG;gBAAAV,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACnCN,EAAA,CAAGlB,KAAA,CAAMgC,gBAAgB;cAAAV,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAEJxB,KAAM,CAAAgC,gBAAA,CAAiBf,WAAA,EAAaC,EAAE;YAAA;cAArDC,MAAS,GAAAG,QAAA,CAAAW,IAAA;cACf,IAAIN,MAAA,CAAAC,OAAQ,CAAAT,MAAM,CAAG,EACvBD,EAAA,CAAAC,MAAA;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAY,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CAEF;MAAA,gBA1BEL,QAAAwB,EAAA;QAAA,OAAAvB,KAAA,CAAAwB,KAAA,OAAAC,SAAA;MAAA;IAAA,GA0BF;IAEM,IAAAC,gBAAiC,GAAAC,aAAA,CAAAC,QAAA,CAAA7B,OAAA,EAAAX,KAAA,CAAAwC,QAAA;IAC/B,IAAAC,WAAA,YAAAA,YAAA5C,KAAkB,EAAC;MAEzB,IAAA6C,cAAuB,KAAA7C,KAAA;MACvB8C,IAAA,CAAKC,KAAA,CAAAC,WAAA,EAAAhD,KAAA;MAEL8C,IAAA,CAAAC,KAAA,CAAAE,kBAA2B,EAAAjD,KAAA;MAC3BV,kBAAoB,CAAAU,KAAA;MAEpBX,SAAK,CAAAW,KAAwB,KAAAX,SAAA,CAACW,KAAO,GAAA6C,cAAA;MACnC,KAAA1C,KAAA,CAAA+C,cAA2B,KAAAlD,KAAA;QAC3BV,kBAAA,CAAAU,KAAqB;QACrBd,WAAA,CAAAc,KAAA;QACF;MAEA;MACFyC,gBAAA,CAAAzC,KAAA;IAEA,CAAM;IACJ,IAAImD,eAAgB,YAAhBA,eAAgBA,CAAAJ,KAAA;MAEjB,IAAAK,EAAA;MAGD,IAAA/E,QAAU,CAAQ2B,KAAA,EACpB;MACF,MAAAoD,EAAA,GAAAL,KAAA,CAAAM,MAAA,qBAAAD,EAAA,CAAAE,OAAA,iBAAAjD,QAAA,CAAAL,KAAA,CAAAuD,QAAA,CAAAC,QAAA,CAAAC,aAAA;QAEMpE,SAAA,CAAAW,KAAA,GAAgB,IAAkB;MACtC;IAAwB,CAC1B;IAEM,IAAA0D,YAAA,GAAe,SAAfA,aAAmC1D,KAAA;MACvC8C,IAAI,CAACC,KAAA,CAAAY,YAAkB,EAAA3D,KAAA;IACrB;IACA,IAAA4D,WAAA,GAAiB,SAAjBA,YAAiBC,GAAA;MACX,IAAAT,EAAA;MACF,KAAAnE,gBAAwB;QACTI,SAAA,CAAAW,KAAA;QACnB8C,IAAA,UAAAe,GAAA;QACK,IAAAzC,WAAA,IAAAgC,EAAA,GAAAjD,KAAA,CAAA2D,UAAA,YAAAV,EAAA;QACc,IAAAjD,KAAA,CAAA+C,cAAA,KAAAlE,QAAA;UACrByD,gBAAA,CAAAsB,MAAA,CAAA3C,WAAA;QAAA;MAGF,CAAM;QACJnC,gBAAiB;MAGf;IACE,CAAmB;IACnB,IAAA+E,UAAA,YAAAA,WAAAH,GAAA;MACFI,UAAA;QACA,IAAAb,EAAA;QACA,KAAKA,EAAA,GAAAtE,SAAW,CAAAkB,KAAA,qBAAAoD,EAAA,CAAAc,oBAAA;UACjBjF,gBAAA;UACH;QAEA;QACEI,SAAkB,CAAAW,KAAA,IAAAmE,KAAA;QAClBrB,IAAA,SAAAe,GAAA;MACA;IAAY,CACd;IAEA,IAAMO,WAAA,YAAAA,YAAA,EAA6B;MAE/B/E,SAAA,CAAAW,KAAA;MAIA8C,IAAA,CAAAC,KAAA,CAAAE,kBAAyB;MAC3BH,IAAA;IACE;IACA,IAAAuB,cAAA;MAAA,IAAAC,KAAA,GAAAtD,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAqD,SAAA;QAAA,OAAAtD,mBAAA,GAAAM,IAAA,UAAAiD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA/C,IAAA,GAAA+C,SAAA,CAAA9C,IAAA;YAAA;cACA,IAAA7B,iBAAyB,CAAAE,KAAA,IAAAb,gBAAA,CAAAa,KAAA,SAAAb,gBAAA,CAAAa,KAAA,GAAAd,WAAA,CAAAc,KAAA,CAAAC,MAAA;gBAC3ByE,YAAA,CAAAxF,WAAA,CAAAc,KAAA,CAAAb,gBAAA,CAAAa,KAAA;cAAA,CACF,UAAAG,KAAA,CAAAwE,mBAAA;gBAEM7B,IAAA;kBAAA9C,KAAkC,EAAAG,KAAA,CAAA2D;gBAAA;gBACtC5E,WAAA,CAAAc,KAAA,GAAsB,EAAO;gBAC3Bb,gBAAmB,CAAAa,KAAA;cACnB;YAAA;YAAA;cAAA,OAAAyE,SAAA,CAAApC,IAAA;UAAA;QAAA,GAAAkC,QAAA;MAAA,CACM;MAAA,gBATNF,eAAA;QAAA,OAAAC,KAAA,CAAA/B,KAAA,OAAAC,SAAA;MAAA;IAAA,GASM;IACR,IAAAoC,eAAA,YAAAA,gBAAAf,GAAA;MACF,IAAA/D,iBAAA,CAAAE,KAAA;QAEA6D,GAAA,CAAAgB,cAAoB;QAClBhB,GAAA,CAAAiB,eAAkB;QACpBX,KAAA;MAEA;IACE;IACF,IAAAA,KAAA,YAAAA,MAAA;MAEA9E,SAAA,CAAAW,KAAmB;IACjB;IACF,IAAA+E,KAAA,YAAAA,MAAA;MAEM,IAAA3B,EAAA;MACJ,CAAAA,EAAA,GAAkBzE,QAAA,CAAAqB,KAAA,KAAW,YAAQ,CAAC,GAAAoD,EAAA,CAAA2B,KAAA;IACtC;IACA,IAAAC,IAAA,YAAAA,KAAA,EAAmB;MACnB,IAAA5B,EAAA;MACA,CAAAA,EAAA,GAAAzE,QAAA,CAAAqB,KAAyB,qBAAAoD,EAAA,CAAA4B,IAAA;IAAA,CAC3B;IAEM,IAAAN,YAAY;MAAA,IAAAO,KAAA,GAAAjE,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAmB,SAAAgE,SAAAC,IAAA;QAAA,OAAAlE,mBAAA,GAAAM,IAAA,UAAA6D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA3D,IAAA,GAAA2D,SAAA,CAAA1D,IAAA;YAAA;cACnCmB,IAAI,CAACC,KAAA,CAAAC,WAAA,EAAAmC,IAAA,CAAkBhF,KAAS,CAAAmF,QAAA;cAEhCxC,IAAI,CAAAC,KAAA,CAAAE,kBAAW,EAAAkC,IAAA,CAAAhF,KAAA,CAAAmF,QAAA;cACbxC,IAAA,WAAAqC,IAAiB,CAAQ;cACzBjG,WAAA,CAAAc,KAAA;cACFb,gBAAA,CAAAa,KAAA;YAAA;YAAA;cAAA,OAAAqF,SAAA,CAAAhD,IAAA;UAAA;QAAA,GAAA6C,QAAA;MAAA,CAEI;MAAA,gBARAR,YAAYA,CAAAa,GAAA;QAAA,OAAAN,KAAA,CAAA1C,KAAA,OAAAC,SAAA;MAAA;IAAA,GAQZ;IACM,IAAAgD,SAAA,YAAAA,UAAAvH,KAAY;MACtB,KAAA6B,iBAAA,CAAAE,KAAA,IAAAT,OAAA,CAAAS,KAAA,EACM;MAA8B,IAC9B/B,KAAG,GAAG;QACZkB,gBAAA,CAAAa,KAAA;QACA;MAAkC;MAElC,IAAA/B,KAAA,IAAAiB,WAAA,CAAAc,KAAA,CAAAC,MAAA;QACMhC,KAAA,GAAAiB,WAAA,CAAgBc,KAAA,CAAAC,MAAA,GAAe,CAAK;MAC1C;MACM,IAAAwF,UAAa,GAAA5G,SAAA,CAAAmB,KAAiB,CAAA0F,aAAA,KAAA/E,MAAA,CAAAnC,EAAA,CAAAmH,EAAA;MAEpC,IAAgB9D,cAAA,GAAA4D,UAA2B,CAAAhF,gBAAA,KAAAE,MAAA,CAAyBnC,EAAA,CAAAmH,EAAA;MAClE,IAAAC,aAAwB,GAAA/D,cAAA,CAAA5D,KAAA;MAC1B,IAAA4H,SAAA,GAAAJ,UAAA,CAAAI,SAAA;MACA,IAAAC,SAA2B,GAAAF,aAAA,CAA3BE,SAA2B;QAAAC,YAAA,GAAAH,aAAA,CAAAG,YAAA;MACzB,IAAAD,SAAW,GAAaC,YAAA,GAAAF,SAAA,GAAAJ,UAAA,CAAAO,YAAA;QAC1BP,UAAA,CAAAI,SAAA,IAAAE,YAAA;MACA;MAEE,IAAAD,SAAA,GAA4BD,SAAA;QAC5BJ,UAAA,CAAAI,SAAA,IAAAE,YAAA;MAAA;MAEF5G,gBAAA,CAAAa,KAAA,GAAA/B,KAAA;MACFU,QAAA,CAAAqB,KAAA,CAAApB,GAAA,CAAAqH,YAAA,6BAAAtF,MAAA,CAAAnB,SAAA,CAAAQ,KAAA,YAAAW,MAAA,CAAAxB,gBAAA,CAAAa,KAAA;IAEA,CAAM;IAEA,IAAAkG,UAAU,GAAOC,IAAA,CAAAC,cAAA,CAAArH,UAAqB,EAAG;MAC7C,IAAAqE,EAAA;MACD,KAAAA,EAAA,GAAAtE,SAAA,CAAAkB,KAAA,qBAAAoD,EAAA,CAAAc,oBAAA,IAED;MACepE,iBAAA,CAAAE,KAAA,IAAAmE,KAAA;IAAA,CACd;IAED/F,GAAA,CAAAiI,eAAgB;MAEdH,UAAA,oBAAAA,UAAA;IAAC,EAAC;IACD9H,GAAA,CAAAkI,SAAU;MAET3H,QAAA,CAASqB,KAAA,CAAcpB,GAAK,CAAAqH,YAAA;MAC5BtH,QAAA,CAAAqB,KAAA,CAAApB,GAAA,CAAAqH,YAAA;MAAAtH,QACG,CAAAqB,KAAA,CAAUpB,GAAK,CAAAqH,YAAA,gBAA+B;MACnDtH,QAAA,CAAAqB,KAAA,CAAApB,GAAA,CAAAqH,YAAA,6BAAAtF,MAAA,CAAAnB,SAAA,CAAAQ,KAAA,YAAAW,MAAA,CAAAxB,gBAAA,CAAAa,KAAA;MAEAhB,QAAA,GAAYL,QAAS,CAAAqB,KAAA,CAAcpB,GAAK,CAAA2H,YAAA,CAAa,UAAU;IAAA,CAChE;IAEYC,MAAA;MAAArH,gBAAA,EAAAA,gBAAA;MAEXE,SAAA,EAAAA,SAAA;MAAAE,OAAA,EAAAA,OAAA;MAEAZ,QAAA,EAAAA,QAAA;MAAAG,SAAA,EAAAA,SAAA;MAEAI,WAAA,EAAAA,WAAA;MAAAwF,YAAA,EAAAA,YAAA;MAEAL,cAAA,EAAAA,cAAA;MAAAU,KAAA,EAAAA,KAAA;MAEAC,IAAA,EAAAA,IAAA;MAAAb,KAAA,EAAAA,KAAA;MAEAqB,SAAA,EAAAA,SAAA;MAAA1E,OAAA,EAAAA;IAAA,CAEA;IAAA,iBAAA2F,IAAA,EAAAC,MAAA;MAEA,OAAAtI,GAAA,CAAAuI,SAAA,IAAAvI,GAAA,CAAAwI,WAAA,CAAAxI,GAAA,CAAAyI,KAAA,CAAAC,OAAA,CAAAC,SAAA;QAAAC,OAAA;QAEApI,GAAA,EAAAE,SAAA;QAAAmI,OAAA,EAAA7I,GAAA,CAAAyI,KAAA,CAAA/G,iBAAA;QAEAoH,SAAA,EAAAT,IAAA,CAAAS,SAAA;QAAA;QAEA,iBAAA9I,GAAA,CAAAyI,KAAA,CAAArI,EAAA,EAAA2I,CAAA,YAAAV,IAAA,CAAAW,WAAA;QAAAC,UAAA,EAAAZ,IAAA,CAAAY,UAAA;QAEA,aAAAZ,IAAA,CAAAa,QAAA;QAAA;QAEAC,IAAA;QACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}