{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000/api/v1',\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  // 如果返回的状态码不是0，则判断为错误\n  if (res.status !== 0) {\n    ElMessage({\n      message: res.msg || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.status === 401) {\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n    if (status === 401) {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else {\n      ElMessage({\n        message: error.response.data.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n  } else {\n    ElMessage({\n      message: '网络错误，请检查您的网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","error","console","Promise","reject","response","res","data","status","message","msg","type","duration","removeItem","push","Error"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000/api/v1',\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    \n    // 如果返回的状态码不是0，则判断为错误\n    if (res.status !== 0) {\n      ElMessage({\n        message: res.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n      \n      // 401: 未登录或token过期\n      if (res.status === 401) {\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n        \n        // 跳转到登录页\n        router.push('/login')\n      }\n      \n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n    \n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n      \n      if (status === 401) {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'error',\n          duration: 5 * 1000\n        })\n        \n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n        \n        // 跳转到登录页\n        router.push('/login')\n      } else {\n        ElMessage({\n          message: error.response.data.msg || '请求失败',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    } else {\n      ElMessage({\n        message: '网络错误，请检查您的网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,SAAS,QAAQ,cAAc;;AAExC;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAE,8BAA8B;EACvCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9B,UAAAC,MAAM,EAAI;EACR,IAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,aAAAC,MAAA,CAAaL,KAAK,CAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACD,UAAAO,KAAK,EAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,OAAO,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC/B,UAAAY,QAAQ,EAAI;EACV,IAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;IACpBtB,SAAS,CAAC;MACRuB,OAAO,EAAEH,GAAG,CAACI,GAAG,IAAI,MAAM;MAC1BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIN,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;MACtB;MACAZ,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;MAChCjB,YAAY,CAACiB,UAAU,CAAC,UAAU,CAAC;;MAEnC;MACA5B,MAAM,CAAC6B,IAAI,CAAC,QAAQ,CAAC;IACvB;IAEA,OAAOX,OAAO,CAACC,MAAM,CAAC,IAAIW,KAAK,CAACT,GAAG,CAACI,GAAG,IAAI,MAAM,CAAC,CAAC;EACrD,CAAC,MAAM;IACL,OAAOJ,GAAG;EACZ;AACF,CAAC,EACD,UAAAL,KAAK,EAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;;EAE7B;EACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,IAAMG,MAAM,GAAGP,KAAK,CAACI,QAAQ,CAACG,MAAM;IAEpC,IAAIA,MAAM,KAAK,GAAG,EAAE;MAClBtB,SAAS,CAAC;QACRuB,OAAO,EAAE,aAAa;QACtBE,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE,CAAC,GAAG;MAChB,CAAC,CAAC;;MAEF;MACAhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;MAChCjB,YAAY,CAACiB,UAAU,CAAC,UAAU,CAAC;;MAEnC;MACA5B,MAAM,CAAC6B,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC,MAAM;MACL5B,SAAS,CAAC;QACRuB,OAAO,EAAER,KAAK,CAACI,QAAQ,CAACE,IAAI,CAACG,GAAG,IAAI,MAAM;QAC1CC,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE,CAAC,GAAG;MAChB,CAAC,CAAC;IACJ;EACF,CAAC,MAAM;IACL1B,SAAS,CAAC;MACRuB,OAAO,EAAE,gBAAgB;MACzBE,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;EACJ;EAEA,OAAOT,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}