{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport request from '@/utils/request';\n\n// 是否启用调试日志\nvar DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nvar log = function log() {\n  if (DEBUG) {\n    var _console;\n    (_console = console).log.apply(_console, arguments);\n  }\n};\n\n// 获取帖子列表\nexport function getPostList(params) {\n  // 启用调试，查看具体问题\n  var DEBUG_THIS = true;\n  if (DEBUG_THIS) console.log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u5217\\u8868API\\uFF0C\\u53C2\\u6570:\", params);\n  return request({\n    url: '/api/v1/posts/',\n    method: 'get',\n    params: params\n  }).then(function (response) {\n    if (DEBUG_THIS) console.log(\"\\u5E16\\u5B50\\u5217\\u8868API\\u539F\\u59CB\\u54CD\\u5E94:\", response);\n\n    // 处理从PowerShell Invoke-RestMethod返回的特殊格式\n    if (response && response.data && response.data.results) {\n      if (DEBUG_THIS) console.log('检测到PowerShell Invoke-RestMethod格式的响应');\n      return {\n        code: 0,\n        status: 0,\n        data: {\n          results: response.data.results,\n          count: response.data.count || response.data.results.length\n        }\n      };\n    }\n\n    // 检查响应格式并统一处理\n    var formattedResponse = {\n      code: 0,\n      status: 0,\n      msg: '',\n      data: null\n    };\n\n    // 如果响应是Django REST Framework的分页格式\n    if (response && response.count !== undefined && Array.isArray(response.results)) {\n      if (DEBUG_THIS) console.log('处理Django REST Framework分页格式响应');\n      formattedResponse.data = {\n        results: response.results,\n        count: response.count,\n        next: response.next,\n        previous: response.previous\n      };\n      return formattedResponse;\n    }\n\n    // 如果响应已经是我们期望的格式\n    if (response && response.code === 0 && response.data) {\n      if (DEBUG_THIS) console.log('响应已经是期望的格式');\n      return response;\n    }\n\n    // 如果响应是直接的数组\n    if (Array.isArray(response)) {\n      if (DEBUG_THIS) console.log('响应是数组格式');\n      formattedResponse.data = {\n        results: response,\n        count: response.length\n      };\n      return formattedResponse;\n    }\n\n    // 如果响应是对象但格式不完全匹配\n    if (response && _typeof(response) === 'object') {\n      if (DEBUG_THIS) console.log('响应是对象但格式不完全匹配', response);\n\n      // 检查response.data是否存在\n      if (response.data) {\n        // 如果response.data是数组\n        if (Array.isArray(response.data)) {\n          formattedResponse.data = {\n            results: response.data,\n            count: response.data.length\n          };\n        }\n        // 如果response.data是对象，并且有results字段\n        else if (_typeof(response.data) === 'object' && response.data.results) {\n          formattedResponse.data = {\n            results: response.data.results,\n            count: response.data.count || response.data.results.length\n          };\n        }\n        // 其他情况，尝试使用response.data作为结果\n        else {\n          formattedResponse.data = {\n            results: [response.data],\n            count: 1\n          };\n        }\n      }\n      // 检查response.results是否存在\n      else if (response.results) {\n        formattedResponse.data = {\n          results: response.results,\n          count: response.count || response.results.length\n        };\n      }\n      // 如果都不存在，尝试将整个response作为单个结果\n      else {\n        formattedResponse.data = {\n          results: [response],\n          count: 1\n        };\n      }\n      if (DEBUG_THIS) console.log('格式化后的响应:', formattedResponse);\n      return formattedResponse;\n    }\n\n    // 如果无法处理响应，返回空结果\n    if (DEBUG_THIS) console.log('无法处理响应，返回空结果');\n    formattedResponse.data = {\n      results: [],\n      count: 0\n    };\n    return formattedResponse;\n  })[\"catch\"](function (error) {\n    var _error$response, _error$response2;\n    console.error('获取帖子列表失败:', error);\n    // 返回一个有效的响应格式，避免错误传播\n    return {\n      code: (error === null || error === void 0 || (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 500,\n      status: (error === null || error === void 0 || (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) || 500,\n      message: (error === null || error === void 0 ? void 0 : error.message) || '网络错误，请稍后再试',\n      data: {\n        results: [],\n        count: 0\n      }\n    };\n  });\n}\n\n// 获取帖子详情\nexport function getPostDetail(id) {\n  log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u8BE6\\u60C5API\\uFF0CID: \".concat(id));\n\n  // 创建临时帖子数据，用于后端API失败时显示\n  var tempPost = {\n    id: id || 1,\n    title: \"后端API暂时不可用 - 临时显示内容\",\n    content: \"<p>\\u8FD9\\u662F\\u4E34\\u65F6\\u751F\\u6210\\u7684\\u5E16\\u5B50\\u5185\\u5BB9\\uFF0C\\u56E0\\u4E3A\\u540E\\u7AEFAPI\\u8FD4\\u56DE\\u4E86\\u9519\\u8BEF\\u3002</p>\\n              <p>\\u8BF7\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\\u68C0\\u67E5\\u670D\\u52A1\\u5668\\u65E5\\u5FD7\\uFF0C\\u67E5\\u770BContentNotRenderedError\\u9519\\u8BEF\\u3002</p>\\n              <p>\\u8FD9\\u53EF\\u80FD\\u662FDjango\\u5E8F\\u5217\\u5316\\u54CD\\u5E94\\u65F6\\u51FA\\u73B0\\u7684\\u95EE\\u9898\\u3002</p>\",\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    views: 0,\n    likes_count: 0,\n    comments_count: 0,\n    is_pinned: false,\n    is_featured: false,\n    board: {\n      id: 1,\n      name: '系统通知'\n    },\n    user: {\n      id: 0,\n      username: 'system',\n      nickname: '系统通知',\n      avatar_url: ''\n    }\n  };\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'get'\n  }).then(function (response) {\n    log(\"\\u5E16\\u5B50\\u8BE6\\u60C5API\\u54CD\\u5E94\\u6210\\u529F:\", response);\n\n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，显示临时数据');\n      return {\n        code: 500,\n        status: 500,\n        message: '服务器错误，请稍后再试',\n        data: tempPost\n      };\n    }\n\n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && _typeof(response.data) === 'object' && Object.keys(response.data).length > 0) {\n      return {\n        code: 0,\n        status: 0,\n        data: response.data\n      };\n    } else if (response && _typeof(response) === 'object' && Object.keys(response).length > 0 && !response.data) {\n      // 如果响应本身就是数据对象\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n\n    // 如果响应不成功或没有数据，返回临时数据\n    log('帖子详情API返回异常或空数据，显示临时数据');\n    return {\n      code: 404,\n      status: 404,\n      message: '未找到帖子，显示临时内容',\n      data: tempPost\n    };\n  })[\"catch\"](function (error) {\n    var _error$response3, _error$response4;\n    console.error(\"\\u83B7\\u53D6\\u5E16\\u5B50\\u8BE6\\u60C5(ID: \".concat(id, \")\\u5931\\u8D25\\uFF0C\\u663E\\u793A\\u4E34\\u65F6\\u6570\\u636E\"), error);\n    // 返回临时数据\n    return {\n      code: (error === null || error === void 0 || (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) || 500,\n      status: (error === null || error === void 0 || (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 500,\n      message: (error === null || error === void 0 ? void 0 : error.message) || '网络错误，请稍后再试',\n      data: tempPost\n    };\n  });\n}\n\n// 创建帖子\nexport function createPost(data) {\n  return request({\n    url: '/api/v1/posts/',\n    method: 'post',\n    data: data\n  });\n}\n\n// 更新帖子\nexport function updatePost(id, data) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'put',\n    data: data\n  });\n}\n\n// 删除帖子\nexport function deletePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'delete'\n  });\n}\n\n// 获取点赞状态\nexport function getLikeStatus(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/like_status/\"),\n    method: 'get'\n  });\n}\n\n// 获取收藏状态\nexport function getFavoriteStatus(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/favorite_status/\"),\n    method: 'get'\n  });\n}\n\n// 点赞/取消点赞帖子\nexport function likePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/like/\"),\n    method: 'post'\n  }).then(function (response) {\n    // 检查响应状态\n    if (response.code === 0 || response.status === 0) {\n      // 成功响应，直接返回\n      return response;\n    }\n    // 如果响应不成功，抛出错误\n    throw new Error(response.msg || '操作失败');\n  })[\"catch\"](function (error) {\n    // 如果是网络错误或服务器错误\n    if (error.response) {\n      var _error$response$data;\n      // 服务器返回了错误状态码\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || '操作失败，请稍后重试');\n    } else if (error.request) {\n      // 请求发出但没有收到响应\n      throw new Error('网络连接失败，请检查网络');\n    } else {\n      // 其他错误\n      throw error;\n    }\n  });\n}\n\n// 收藏/取消收藏帖子\nexport function favoritePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/favorite/\"),\n    method: 'post'\n  }).then(function (response) {\n    // 检查响应状态\n    if (response.code === 0 || response.status === 0) {\n      // 成功响应，直接返回\n      return response;\n    }\n    // 如果响应不成功，抛出错误\n    throw new Error(response.msg || '操作失败');\n  })[\"catch\"](function (error) {\n    // 如果是网络错误或服务器错误\n    if (error.response) {\n      var _error$response$data2;\n      // 服务器返回了错误状态码\n      throw new Error(((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.msg) || '操作失败，请稍后重试');\n    } else if (error.request) {\n      // 请求发出但没有收到响应\n      throw new Error('网络连接失败，请检查网络');\n    } else {\n      // 其他错误\n      throw error;\n    }\n  });\n}\n\n// 置顶/取消置顶帖子 (管理员)\nexport function pinPost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/pin/\"),\n    method: 'put'\n  });\n}\n\n// 加精/取消加精帖子 (管理员)\nexport function featurePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/feature/\"),\n    method: 'put'\n  });\n}\n\n// 获取用户收藏的帖子列表\nexport function getUserFavorites() {\n  return request({\n    url: '/api/v1/posts/favorites/',\n    method: 'get'\n  });\n}\n\n// 获取帖子评论\nexport function getPostComments(postId) {\n  log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u8BC4\\u8BBAAPI\\uFF0C\\u5E16\\u5B50ID: \".concat(postId));\n\n  // 创建临时评论数据，用于后端API失败时显示\n  var tempComments = [{\n    id: 1,\n    content: \"这是临时生成的评论内容，因为后端API返回了错误。请联系管理员检查服务器日志。\",\n    created_at: new Date().toISOString(),\n    user: {\n      id: 0,\n      username: 'system',\n      nickname: '系统通知',\n      avatar_url: ''\n    },\n    replies: []\n  }];\n  return request({\n    url: \"/api/v1/posts/\".concat(postId, \"/comments/\"),\n    method: 'get'\n  }).then(function (response) {\n    log(\"\\u5E16\\u5B50\\u8BC4\\u8BBAAPI\\u54CD\\u5E94\\u6210\\u529F:\", response);\n\n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，显示临时数据');\n      return {\n        code: 500,\n        status: 500,\n        message: '服务器错误，请稍后再试',\n        data: tempComments\n      };\n    }\n\n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && (Array.isArray(response.data) || _typeof(response.data) === 'object' && response.data.results)) {\n      // 处理不同格式的响应\n      var comments = Array.isArray(response.data) ? response.data : response.data.results || [];\n      return {\n        code: 0,\n        status: 0,\n        data: comments\n      };\n    } else if (response && _typeof(response) === 'object' && Array.isArray(response)) {\n      // 如果响应本身就是数组\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n\n    // 如果响应不成功或没有数据，返回临时数据\n    log('帖子评论API返回异常或空数据，显示临时数据');\n    return {\n      code: 404,\n      status: 404,\n      message: '未找到评论，显示临时内容',\n      data: tempComments\n    };\n  })[\"catch\"](function (error) {\n    var _error$response5, _error$response6;\n    console.error(\"\\u83B7\\u53D6\\u5E16\\u5B50\\u8BC4\\u8BBA(\\u5E16\\u5B50ID: \".concat(postId, \")\\u5931\\u8D25\\uFF0C\\u663E\\u793A\\u4E34\\u65F6\\u6570\\u636E\"), error);\n    // 返回临时数据\n    return {\n      code: (error === null || error === void 0 || (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) || 500,\n      status: (error === null || error === void 0 || (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) || 500,\n      message: (error === null || error === void 0 ? void 0 : error.message) || '网络错误，请稍后再试',\n      data: tempComments\n    };\n  });\n}","map":{"version":3,"names":["request","DEBUG","log","_console","console","apply","arguments","getPostList","params","DEBUG_THIS","url","method","then","response","data","results","code","status","count","length","formattedResponse","msg","undefined","Array","isArray","next","previous","_typeof","error","_error$response","_error$response2","message","getPostDetail","id","concat","tempPost","title","content","created_at","Date","toISOString","updated_at","views","likes_count","comments_count","is_pinned","is_featured","board","name","user","username","nickname","avatar_url","includes","Object","keys","_error$response3","_error$response4","createPost","updatePost","deletePost","getLikeStatus","getFavoriteStatus","likePost","Error","_error$response$data","favoritePost","_error$response$data2","pinPost","featurePost","getUserFavorites","getPostComments","postId","tempComments","replies","comments","_error$response5","_error$response6"],"sources":["H:/ForumServers/ForumFrontend/src/api/post.js"],"sourcesContent":["import request from '@/utils/request'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\n// 获取帖子列表\nexport function getPostList(params) {\n  // 启用调试，查看具体问题\n  const DEBUG_THIS = true;\n  \n  if (DEBUG_THIS) console.log(`开始请求帖子列表API，参数:`, params);\n  \n  return request({\n    url: '/api/v1/posts/',\n    method: 'get',\n    params\n  }).then(response => {\n    if (DEBUG_THIS) console.log(`帖子列表API原始响应:`, response);\n    \n    // 处理从PowerShell Invoke-RestMethod返回的特殊格式\n    if (response && response.data && response.data.results) {\n      if (DEBUG_THIS) console.log('检测到PowerShell Invoke-RestMethod格式的响应');\n      return {\n        code: 0,\n        status: 0,\n        data: {\n          results: response.data.results,\n          count: response.data.count || response.data.results.length\n        }\n      };\n    }\n    \n    // 检查响应格式并统一处理\n    let formattedResponse = {\n      code: 0,\n      status: 0,\n      msg: '',\n      data: null\n    };\n    \n    // 如果响应是Django REST Framework的分页格式\n    if (response && response.count !== undefined && Array.isArray(response.results)) {\n      if (DEBUG_THIS) console.log('处理Django REST Framework分页格式响应');\n      formattedResponse.data = {\n        results: response.results,\n        count: response.count,\n        next: response.next,\n        previous: response.previous\n      };\n      return formattedResponse;\n    }\n    \n    // 如果响应已经是我们期望的格式\n    if (response && response.code === 0 && response.data) {\n      if (DEBUG_THIS) console.log('响应已经是期望的格式');\n      return response;\n    }\n    \n    // 如果响应是直接的数组\n    if (Array.isArray(response)) {\n      if (DEBUG_THIS) console.log('响应是数组格式');\n      formattedResponse.data = {\n        results: response,\n        count: response.length\n      };\n      return formattedResponse;\n    }\n    \n    // 如果响应是对象但格式不完全匹配\n    if (response && typeof response === 'object') {\n      if (DEBUG_THIS) console.log('响应是对象但格式不完全匹配', response);\n      \n      // 检查response.data是否存在\n      if (response.data) {\n        // 如果response.data是数组\n        if (Array.isArray(response.data)) {\n          formattedResponse.data = {\n            results: response.data,\n            count: response.data.length\n          };\n        } \n        // 如果response.data是对象，并且有results字段\n        else if (typeof response.data === 'object' && response.data.results) {\n          formattedResponse.data = {\n            results: response.data.results,\n            count: response.data.count || response.data.results.length\n          };\n        }\n        // 其他情况，尝试使用response.data作为结果\n        else {\n          formattedResponse.data = {\n            results: [response.data],\n            count: 1\n          };\n        }\n      } \n      // 检查response.results是否存在\n      else if (response.results) {\n        formattedResponse.data = {\n          results: response.results,\n          count: response.count || response.results.length\n        };\n      }\n      // 如果都不存在，尝试将整个response作为单个结果\n      else {\n        formattedResponse.data = {\n          results: [response],\n          count: 1\n        };\n      }\n      \n      if (DEBUG_THIS) console.log('格式化后的响应:', formattedResponse);\n      return formattedResponse;\n    }\n    \n    // 如果无法处理响应，返回空结果\n    if (DEBUG_THIS) console.log('无法处理响应，返回空结果');\n    formattedResponse.data = {\n      results: [],\n      count: 0\n    };\n    return formattedResponse;\n  }).catch(error => {\n    console.error('获取帖子列表失败:', error);\n    // 返回一个有效的响应格式，避免错误传播\n    return {\n      code: error?.response?.status || 500,\n      status: error?.response?.status || 500,\n      message: error?.message || '网络错误，请稍后再试',\n      data: {\n        results: [],\n        count: 0\n      }\n    };\n  });\n}\n\n// 获取帖子详情\nexport function getPostDetail(id) {\n  log(`开始请求帖子详情API，ID: ${id}`);\n  \n  // 创建临时帖子数据，用于后端API失败时显示\n  const tempPost = {\n    id: id || 1,\n    title: \"后端API暂时不可用 - 临时显示内容\",\n    content: `<p>这是临时生成的帖子内容，因为后端API返回了错误。</p>\n              <p>请联系管理员检查服务器日志，查看ContentNotRenderedError错误。</p>\n              <p>这可能是Django序列化响应时出现的问题。</p>`,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    views: 0,\n    likes_count: 0,\n    comments_count: 0,\n    is_pinned: false,\n    is_featured: false,\n    board: { id: 1, name: '系统通知' },\n    user: {\n      id: 0,\n      username: 'system',\n      nickname: '系统通知',\n      avatar_url: ''\n    }\n  };\n  \n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'get'\n  }).then(response => {\n    log(`帖子详情API响应成功:`, response);\n    \n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，显示临时数据');\n      return {\n        code: 500,\n        status: 500,\n        message: '服务器错误，请稍后再试',\n        data: tempPost\n      };\n    }\n    \n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && \n        (typeof response.data === 'object' && Object.keys(response.data).length > 0)) {\n      return {\n        code: 0,\n        status: 0,\n        data: response.data\n      };\n    } else if (response && typeof response === 'object' && \n               Object.keys(response).length > 0 && \n               !response.data) {\n      // 如果响应本身就是数据对象\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n    \n    // 如果响应不成功或没有数据，返回临时数据\n    log('帖子详情API返回异常或空数据，显示临时数据');\n    return {\n      code: 404,\n      status: 404,\n      message: '未找到帖子，显示临时内容',\n      data: tempPost\n    };\n  }).catch(error => {\n    console.error(`获取帖子详情(ID: ${id})失败，显示临时数据`, error);\n    // 返回临时数据\n    return {\n      code: error?.response?.status || 500,\n      status: error?.response?.status || 500,\n      message: error?.message || '网络错误，请稍后再试',\n      data: tempPost\n    };\n  });\n}\n\n// 创建帖子\nexport function createPost(data) {\n  return request({\n    url: '/api/v1/posts/',\n    method: 'post',\n    data\n  })\n}\n\n// 更新帖子\nexport function updatePost(id, data) {\n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'put',\n    data\n  })\n}\n\n// 删除帖子\nexport function deletePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'delete'\n  })\n}\n\n// 获取点赞状态\nexport function getLikeStatus(id) {\n  return request({\n    url: `/api/v1/posts/${id}/like_status/`,\n    method: 'get'\n  });\n}\n\n// 获取收藏状态\nexport function getFavoriteStatus(id) {\n  return request({\n    url: `/api/v1/posts/${id}/favorite_status/`,\n    method: 'get'\n  });\n}\n\n// 点赞/取消点赞帖子\nexport function likePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/like/`,\n    method: 'post'\n  }).then(response => {\n    // 检查响应状态\n    if (response.code === 0 || response.status === 0) {\n      // 成功响应，直接返回\n      return response;\n    }\n    // 如果响应不成功，抛出错误\n    throw new Error(response.msg || '操作失败');\n  }).catch(error => {\n    // 如果是网络错误或服务器错误\n    if (error.response) {\n      // 服务器返回了错误状态码\n      throw new Error(error.response.data?.msg || '操作失败，请稍后重试');\n    } else if (error.request) {\n      // 请求发出但没有收到响应\n      throw new Error('网络连接失败，请检查网络');\n    } else {\n      // 其他错误\n      throw error;\n    }\n  });\n}\n\n// 收藏/取消收藏帖子\nexport function favoritePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/favorite/`,\n    method: 'post'\n  }).then(response => {\n    // 检查响应状态\n    if (response.code === 0 || response.status === 0) {\n      // 成功响应，直接返回\n      return response;\n    }\n    // 如果响应不成功，抛出错误\n    throw new Error(response.msg || '操作失败');\n  }).catch(error => {\n    // 如果是网络错误或服务器错误\n    if (error.response) {\n      // 服务器返回了错误状态码\n      throw new Error(error.response.data?.msg || '操作失败，请稍后重试');\n    } else if (error.request) {\n      // 请求发出但没有收到响应\n      throw new Error('网络连接失败，请检查网络');\n    } else {\n      // 其他错误\n      throw error;\n    }\n  });\n}\n\n// 置顶/取消置顶帖子 (管理员)\nexport function pinPost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/pin/`,\n    method: 'put'\n  })\n}\n\n// 加精/取消加精帖子 (管理员)\nexport function featurePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/feature/`,\n    method: 'put'\n  })\n}\n\n// 获取用户收藏的帖子列表\nexport function getUserFavorites() {\n  return request({\n    url: '/api/v1/posts/favorites/',\n    method: 'get'\n  })\n}\n\n// 获取帖子评论\nexport function getPostComments(postId) {\n  log(`开始请求帖子评论API，帖子ID: ${postId}`);\n\n  // 创建临时评论数据，用于后端API失败时显示\n  const tempComments = [\n    {\n      id: 1,\n      content: \"这是临时生成的评论内容，因为后端API返回了错误。请联系管理员检查服务器日志。\",\n      created_at: new Date().toISOString(),\n      user: {\n        id: 0,\n        username: 'system',\n        nickname: '系统通知',\n        avatar_url: ''\n      },\n      replies: []\n    }\n  ];\n\n  return request({\n    url: `/api/v1/posts/${postId}/comments/`,\n    method: 'get'\n  }).then(response => {\n    log(`帖子评论API响应成功:`, response);\n    \n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，显示临时数据');\n      return {\n        code: 500,\n        status: 500,\n        message: '服务器错误，请稍后再试',\n        data: tempComments\n      };\n    }\n    \n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && \n        (Array.isArray(response.data) || \n         (typeof response.data === 'object' && response.data.results))) {\n      // 处理不同格式的响应\n      const comments = Array.isArray(response.data) ? \n        response.data : \n        (response.data.results || []);\n        \n      return {\n        code: 0,\n        status: 0,\n        data: comments\n      };\n    } else if (response && typeof response === 'object' && \n               Array.isArray(response)) {\n      // 如果响应本身就是数组\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n    \n    // 如果响应不成功或没有数据，返回临时数据\n    log('帖子评论API返回异常或空数据，显示临时数据');\n    return {\n      code: 404,\n      status: 404,\n      message: '未找到评论，显示临时内容',\n      data: tempComments\n    };\n  }).catch(error => {\n    console.error(`获取帖子评论(帖子ID: ${postId})失败，显示临时数据`, error);\n    // 返回临时数据\n    return {\n      code: error?.response?.status || 500,\n      status: error?.response?.status || 500,\n      message: error?.message || '网络错误，请稍后再试',\n      data: tempComments\n    };\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}