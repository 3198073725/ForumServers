{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted, onUnmounted, provide } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { View, ChatDotRound, Star } from '@element-plus/icons-vue';\nimport { logout } from '../api/user';\nimport { getHotBoards } from '../api/board';\nimport { getHotUsers } from '../api/profile';\nimport { getPostList } from '../api/post';\nimport { formatDateTime } from '../utils/index';\nimport UserAvatar from '../components/UserAvatar.vue';\n\n// 是否启用调试日志\nvar DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nvar log = function log() {\n  if (DEBUG) {\n    var _console;\n    (_console = console).log.apply(_console, arguments);\n  }\n};\nexport default {\n  name: 'Home',\n  components: {\n    View: View,\n    ChatDotRound: ChatDotRound,\n    Star: Star,\n    UserAvatar: UserAvatar\n  },\n  setup: function setup() {\n    var router = useRouter();\n    var store = useStore();\n\n    // 获取认证状态和用户信息\n    var isAuthenticated = computed(function () {\n      var loggedIn = store.getters.isLoggedIn;\n      log('Home组件检查登录状态:', {\n        isLoggedIn: loggedIn,\n        token: store.state.token,\n        user: store.state.user\n      });\n      return loggedIn;\n    });\n    var userInfo = computed(function () {\n      return store.state.user;\n    });\n\n    // 判断是否为管理员\n    var isAdmin = computed(function () {\n      return userInfo.value && userInfo.value.role === 'admin';\n    });\n\n    // 数据状态\n    var latestPosts = ref([]);\n    var hotBoards = ref([]);\n    var hotUsers = ref([]);\n    var loading = ref({\n      posts: false,\n      boards: false,\n      users: false\n    });\n\n    // 格式化日期\n    var formatDate = function formatDate(date) {\n      return formatDateTime(date);\n    };\n\n    // 页面跳转方法\n    var goToLogin = function goToLogin() {\n      return router.push('/login');\n    };\n    var goToRegister = function goToRegister() {\n      return router.push('/register');\n    };\n    var goToProfile = function goToProfile() {\n      return router.push('/profile/me');\n    };\n    var goToAdminDashboard = function goToAdminDashboard() {\n      return router.push('/admin/dashboard');\n    };\n    var goToUserManagement = function goToUserManagement() {\n      return router.push('/admin/users');\n    };\n    var goToPostList = function goToPostList() {\n      return router.push('/posts');\n    };\n    var goToUserProfile = function goToUserProfile(userId) {\n      if (userId) {\n        router.push(\"/profile/\".concat(userId));\n      } else {\n        ElMessage.warning('无法获取用户信息');\n      }\n    };\n    var goToNewPost = function goToNewPost() {\n      if (!isAuthenticated.value) {\n        ElMessage.warning('请先登录才能发布帖子');\n        router.push({\n          name: 'Login',\n          query: {\n            redirect: '/post/create'\n          }\n        });\n        return;\n      }\n\n      // 清除可能的成功消息提示\n      ElMessage.closeAll();\n      router.push('/post/create');\n    };\n\n    // 退出登录\n    var handleLogout = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return logout();\n            case 3:\n              response = _context.sent;\n              store.dispatch('logout');\n              // 使用messageTracker替代直接调用ElMessage\n              if (window.messageTracker) {\n                window.messageTracker.showMessage(response.msg || '退出登录成功', 'success', 'home-logout');\n              } else {\n                ElMessage({\n                  message: '退出登录成功',\n                  type: 'success'\n                });\n              }\n              router.push('/');\n              _context.next = 13;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('退出登录失败:', _context.t0);\n              if (window.messageTracker) {\n                window.messageTracker.showMessage('退出登录失败', 'error', 'home-logout-error');\n              } else {\n                ElMessage({\n                  message: '退出登录失败',\n                  type: 'error'\n                });\n              }\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 9]]);\n      }));\n      return function handleLogout() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // 获取最新帖子\n    var fetchLatestPosts = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              loading.value.posts = true;\n              _context2.prev = 1;\n              log('开始获取最新帖子...');\n              _context2.next = 5;\n              return getPostList({\n                page: 1,\n                page_size: 5,\n                ordering: '-created_at',\n                _t: Date.now() // 添加时间戳避免缓存\n              });\n            case 5:\n              response = _context2.sent;\n              log('最新帖子响应:', response);\n              if (response && response.count !== undefined && response.results) {\n                // 处理DRF分页响应\n                log('使用DRF分页响应格式处理最新帖子数据');\n                latestPosts.value = response.results || [];\n              } else if (response && response.code === 0 && response.data) {\n                // 处理自定义响应格式\n                log('使用自定义响应格式处理最新帖子数据');\n                if (response.data.results) {\n                  latestPosts.value = response.data.results || [];\n                } else if (Array.isArray(response.data)) {\n                  latestPosts.value = response.data || [];\n                }\n              } else if (response && response.status === 0 && response.data) {\n                // 处理另一种自定义响应格式\n                log('使用status=0格式处理最新帖子数据');\n                if (response.data.results) {\n                  latestPosts.value = response.data.results || [];\n                } else if (Array.isArray(response.data)) {\n                  latestPosts.value = response.data || [];\n                }\n              } else if (response && Array.isArray(response)) {\n                // 直接返回数组的情况\n                log('使用数组格式处理最新帖子数据');\n                latestPosts.value = response;\n              } else if (response && Array.isArray(response.results)) {\n                // 直接带有results属性的情况\n                log('使用带results属性的响应格式处理最新帖子数据');\n                latestPosts.value = response.results;\n              } else {\n                console.error('获取最新帖子失败:', response ? response.msg : '未知错误');\n                ElMessage.error('获取最新帖子失败，请稍后再试');\n                latestPosts.value = [];\n              }\n              _context2.next = 15;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error('获取最新帖子失败:', _context2.t0);\n              // 使用更友好的错误提示\n              if (_context2.t0.response && _context2.t0.response.status === 401) {\n                log('未登录状态，无法获取帖子列表');\n                ElMessage.warning('请登录后查看最新帖子');\n              } else {\n                ElMessage.error('获取最新帖子失败，请稍后再试');\n              }\n              latestPosts.value = [];\n            case 15:\n              _context2.prev = 15;\n              loading.value.posts = false;\n              return _context2.finish(15);\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 10, 15, 18]]);\n      }));\n      return function fetchLatestPosts() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 提供刷新函数给子组件\n    provide('refreshLatestPosts', fetchLatestPosts);\n\n    // 获取热门板块\n    var fetchHotBoards = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              loading.value.boards = true;\n              _context3.prev = 1;\n              log('开始获取热门板块...');\n              _context3.next = 5;\n              return getHotBoards(5);\n            case 5:\n              response = _context3.sent;\n              log('热门板块响应:', response);\n              if (response && response.status === 0 && response.data) {\n                // 处理Django REST framework自定义响应格式\n                log('使用status=0格式处理热门板块数据');\n                hotBoards.value = response.data || [];\n              } else if (response && response.code === 0 && response.data) {\n                // 处理另一种自定义响应格式\n                log('使用code=0格式处理热门板块数据');\n                hotBoards.value = response.data || [];\n              } else if (response && Array.isArray(response)) {\n                // 直接返回数组的情况\n                log('使用数组格式处理热门板块数据');\n                hotBoards.value = response;\n              } else {\n                console.error('获取热门板块失败:', response ? response.msg : '未知错误');\n                hotBoards.value = []; // 如果获取失败，设置为空数组\n              }\n              _context3.next = 15;\n              break;\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error('获取热门板块失败:', _context3.t0);\n              ElMessage.error('获取热门板块失败，请稍后再试');\n              hotBoards.value = []; // 如果发生错误，设置为空数组\n            case 15:\n              _context3.prev = 15;\n              loading.value.boards = false;\n              return _context3.finish(15);\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 10, 15, 18]]);\n      }));\n      return function fetchHotBoards() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 获取热门用户\n    var fetchHotUsers = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              loading.value.users = true;\n              _context4.prev = 1;\n              log('开始获取热门用户...');\n              _context4.next = 5;\n              return getHotUsers(5);\n            case 5:\n              response = _context4.sent;\n              log('热门用户响应:', response);\n              if (response && response.code === 0 && response.data) {\n                log('使用code=0格式处理热门用户数据');\n                hotUsers.value = response.data || [];\n              } else if (response && Array.isArray(response)) {\n                // 直接返回数组的情况\n                log('使用数组格式处理热门用户数据');\n                hotUsers.value = response;\n              } else if (response && response.status === 0 && response.data) {\n                // 另一种响应格式\n                log('使用status=0格式处理热门用户数据');\n                hotUsers.value = response.data || [];\n              } else {\n                console.error('获取热门用户失败:', response ? response.msg : '未知错误');\n                hotUsers.value = []; // 如果获取失败，设置为空数组\n              }\n              _context4.next = 15;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error('获取热门用户失败:', _context4.t0);\n              ElMessage.error('获取热门用户失败，请稍后再试');\n              hotUsers.value = []; // 如果发生错误，设置为空数组\n            case 15:\n              _context4.prev = 15;\n              loading.value.users = false;\n              return _context4.finish(15);\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 10, 15, 18]]);\n      }));\n      return function fetchHotUsers() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 生命周期钩子\n    onMounted(function () {\n      log('Home页面加载 - 登录状态:', {\n        isAuthenticated: isAuthenticated.value,\n        userInfo: userInfo.value,\n        storeToken: store.state.token,\n        localStorageToken: localStorage.getItem('token'),\n        localStorageUserInfo: localStorage.getItem('userInfo')\n      });\n\n      // 获取数据\n      fetchLatestPosts();\n      fetchHotBoards();\n      fetchHotUsers();\n\n      // 添加定时器，每30秒刷新一次最新帖子\n      var refreshTimer = setInterval(function () {\n        log('定时刷新最新帖子...');\n        fetchLatestPosts();\n      }, 30000);\n\n      // 在组件卸载时清除定时器\n      onUnmounted(function () {\n        if (refreshTimer) {\n          clearInterval(refreshTimer);\n        }\n      });\n\n      // 添加重试机制，确保数据加载成功\n      setTimeout(function () {\n        // 如果首次加载失败，尝试重新加载\n        if (latestPosts.value.length === 0 && !loading.value.posts) {\n          log('首次加载帖子失败，尝试重新加载...');\n          fetchLatestPosts();\n        }\n      }, 5000);\n    });\n    return {\n      isAuthenticated: isAuthenticated,\n      userInfo: userInfo,\n      isAdmin: isAdmin,\n      latestPosts: latestPosts,\n      hotBoards: hotBoards,\n      hotUsers: hotUsers,\n      loading: loading,\n      formatDate: formatDate,\n      goToLogin: goToLogin,\n      goToRegister: goToRegister,\n      goToProfile: goToProfile,\n      goToAdminDashboard: goToAdminDashboard,\n      goToUserManagement: goToUserManagement,\n      goToPostList: goToPostList,\n      goToUserProfile: goToUserProfile,\n      goToNewPost: goToNewPost,\n      handleLogout: handleLogout,\n      fetchLatestPosts: fetchLatestPosts // 导出刷新函数\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","provide","useRouter","useStore","ElMessage","View","ChatDotRound","Star","logout","getHotBoards","getHotUsers","getPostList","formatDateTime","UserAvatar","DEBUG","log","_console","console","apply","arguments","name","components","setup","router","store","isAuthenticated","loggedIn","getters","isLoggedIn","token","state","user","userInfo","isAdmin","value","role","latestPosts","hotBoards","hotUsers","loading","posts","boards","users","formatDate","date","goToLogin","push","goToRegister","goToProfile","goToAdminDashboard","goToUserManagement","goToPostList","goToUserProfile","userId","concat","warning","goToNewPost","query","redirect","closeAll","handleLogout","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","sent","dispatch","window","messageTracker","showMessage","msg","message","type","t0","error","stop","fetchLatestPosts","_ref2","_callee2","_callee2$","_context2","page","page_size","ordering","_t","Date","now","count","undefined","results","code","data","Array","isArray","status","finish","fetchHotBoards","_ref3","_callee3","_callee3$","_context3","fetchHotUsers","_ref4","_callee4","_callee4$","_context4","storeToken","localStorageToken","localStorage","getItem","localStorageUserInfo","refreshTimer","setInterval","clearInterval","setTimeout","length"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\Home.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <el-container>\n      <el-main>\n        <div class=\"main-content\">\n          <el-row :gutter=\"20\">\n            <el-col :span=\"18\">\n              <div class=\"content-area\">\n                <div class=\"welcome-message\" v-if=\"isAuthenticated\">\n                  <h2>欢迎回来，{{ userInfo?.nickname || userInfo?.username }}！</h2>\n                  <p>今天有什么想法要分享吗？</p>\n                  <el-button type=\"primary\" @click=\"goToNewPost\">发布新帖</el-button>\n                </div>\n                <div class=\"welcome-message\" v-else>\n                  <h2>欢迎来到论坛系统</h2>\n                  <p>这里是一个交流和分享的平台，您可以浏览所有帖子和内容。</p>\n                  <p>登录后可以发帖和参与讨论。</p>\n                  <el-button type=\"primary\" @click=\"goToLogin\">立即登录</el-button>\n                  <el-button @click=\"goToRegister\">注册账号</el-button>\n                </div>\n\n                <div class=\"section-title\">\n                  <h3>最新帖子</h3>\n                  <el-button link @click=\"goToPostList\">查看更多</el-button>\n                </div>\n\n                <div class=\"post-list\">\n                  <div v-if=\"loading.posts\" class=\"loading-container\">\n                    <el-skeleton :rows=\"5\" animated />\n                  </div>\n                  <el-empty description=\"暂无帖子\" v-else-if=\"!latestPosts.length\"></el-empty>\n                  <div v-else>\n                    <div v-for=\"post in latestPosts\" :key=\"post.id\" class=\"post-item\">\n                      <div class=\"post-avatar\" @click.stop=\"goToUserProfile(post.user?.id)\" style=\"cursor: pointer;\">\n                        <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                          {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n                        </el-avatar>\n                      </div>\n                      <div class=\"post-content\">\n                        <div class=\"post-title\">\n                          <router-link :to=\"`/posts/${post.id}`\">{{ post.title || '无标题' }}</router-link>\n                          <el-tag size=\"small\" type=\"success\" v-if=\"post.is_pinned\">置顶</el-tag>\n                          <el-tag size=\"small\" type=\"warning\" v-if=\"post.is_featured\">精华</el-tag>\n                        </div>\n                        <div class=\"post-info\">\n                          <span class=\"author\" @click.stop=\"goToUserProfile(post.user?.id)\" style=\"cursor: pointer;\">{{ post.user?.nickname || post.user?.username || '匿名用户' }}</span>\n                          <span class=\"board\">{{ post.board_name || '未分类' }}</span>\n                          <span class=\"time\">{{ formatDate(post.created_at || new Date()) }}</span>\n                        </div>\n                        <div class=\"post-stats\">\n                          <span class=\"views\">\n                            <el-icon><View /></el-icon> {{ post.views || 0 }}\n                          </span>\n                          <span class=\"comments\">\n                            <el-icon><ChatDotRound /></el-icon> {{ post.comments_count || 0 }}\n                          </span>\n                          <span class=\"likes\">\n                            <el-icon><Star /></el-icon> {{ post.likes_count || 0 }}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </el-col>\n\n            <el-col :span=\"6\">\n              <div class=\"sidebar\">\n                <div class=\"sidebar-section\">\n                  <div class=\"section-title\">\n                    <h3>热门板块</h3>\n                  </div>\n                  <div class=\"board-list\">\n                    <div v-if=\"loading.boards\" class=\"loading-container\">\n                      <el-skeleton :rows=\"3\" animated />\n                    </div>\n                    <el-empty description=\"暂无板块\" v-else-if=\"!hotBoards.length\"></el-empty>\n                    <div v-else>\n                      <div v-for=\"board in hotBoards\" :key=\"board.id\" class=\"board-item\">\n                        <router-link :to=\"`/boards/${board.id}`\">{{ board.name }}</router-link>\n                        <span class=\"post-count\">{{ board.posts_count }}帖子</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"sidebar-section\">\n                  <div class=\"section-title\">\n                    <h3>热门用户</h3>\n                  </div>\n                  <div class=\"user-list\">\n                    <div v-if=\"loading.users\" class=\"loading-container\">\n                      <el-skeleton :rows=\"3\" animated />\n                    </div>\n                    <el-empty description=\"暂无用户\" v-else-if=\"!hotUsers.length\"></el-empty>\n                    <div v-else>\n                      <div v-for=\"user in hotUsers\" :key=\"user.id\" class=\"user-item\" @click=\"goToUserProfile(user.id)\" style=\"cursor: pointer;\">\n                        <user-avatar :user=\"user\" :size=\"32\" />\n                        <span class=\"user-nickname\">{{ user.nickname || user.username }}</span>\n                        <span class=\"post-count\">{{ user.posts_count }}帖子</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </el-col>\n          </el-row>\n        </div>\n      </el-main>\n\n      <el-footer height=\"60px\">\n        <div class=\"footer-content\">\n          <p>© 2025 论坛系统 - 基于Vue + Django + MySQL的PC端论坛系统</p>\n        </div>\n      </el-footer>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onUnmounted, provide } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport { View, ChatDotRound, Star } from '@element-plus/icons-vue'\nimport { logout } from '../api/user'\nimport { getHotBoards } from '../api/board'\nimport { getHotUsers } from '../api/profile'\nimport { getPostList } from '../api/post'\nimport { formatDateTime } from '../utils/index'\nimport UserAvatar from '../components/UserAvatar.vue'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\nexport default {\n  name: 'Home',\n  components: {\n    View,\n    ChatDotRound,\n    Star,\n    UserAvatar\n  },\n  setup() {\n    const router = useRouter()\n    const store = useStore()\n\n    // 获取认证状态和用户信息\n    const isAuthenticated = computed(() => {\n      const loggedIn = store.getters.isLoggedIn;\n      log('Home组件检查登录状态:', {\n        isLoggedIn: loggedIn,\n        token: store.state.token,\n        user: store.state.user\n      });\n      return loggedIn;\n    })\n    const userInfo = computed(() => store.state.user)\n\n    // 判断是否为管理员\n    const isAdmin = computed(() => {\n      return userInfo.value && userInfo.value.role === 'admin'\n    })\n\n    // 数据状态\n    const latestPosts = ref([])\n    const hotBoards = ref([])\n    const hotUsers = ref([])\n    const loading = ref({\n      posts: false,\n      boards: false,\n      users: false\n    })\n\n    // 格式化日期\n    const formatDate = (date) => {\n      return formatDateTime(date)\n    }\n\n    // 页面跳转方法\n    const goToLogin = () => router.push('/login')\n    const goToRegister = () => router.push('/register')\n    const goToProfile = () => router.push('/profile/me')\n    const goToAdminDashboard = () => router.push('/admin/dashboard')\n    const goToUserManagement = () => router.push('/admin/users')\n    const goToPostList = () => router.push('/posts')\n    const goToUserProfile = (userId) => {\n      if (userId) {\n        router.push(`/profile/${userId}`)\n      } else {\n        ElMessage.warning('无法获取用户信息')\n      }\n    }\n    const goToNewPost = () => {\n      if (!isAuthenticated.value) {\n        ElMessage.warning('请先登录才能发布帖子')\n        router.push({ name: 'Login', query: { redirect: '/post/create' } })\n        return\n      }\n      \n      // 清除可能的成功消息提示\n      ElMessage.closeAll()\n      router.push('/post/create')\n    }\n\n    // 退出登录\n    const handleLogout = async () => {\n      try {\n        const response = await logout()\n        store.dispatch('logout')\n        // 使用messageTracker替代直接调用ElMessage\n        if (window.messageTracker) {\n          window.messageTracker.showMessage(response.msg || '退出登录成功', 'success', 'home-logout');\n        } else {\n          ElMessage({\n            message: '退出登录成功',\n            type: 'success'\n          })\n        }\n        router.push('/')\n      } catch (error) {\n        console.error('退出登录失败:', error)\n        if (window.messageTracker) {\n          window.messageTracker.showMessage('退出登录失败', 'error', 'home-logout-error');\n        } else {\n          ElMessage({\n            message: '退出登录失败',\n            type: 'error'\n          })\n        }\n      }\n    }\n\n    // 获取最新帖子\n    const fetchLatestPosts = async () => {\n      loading.value.posts = true\n      try {\n        log('开始获取最新帖子...')\n        const response = await getPostList({\n          page: 1,\n          page_size: 5,\n          ordering: '-created_at',\n          _t: Date.now() // 添加时间戳避免缓存\n        })\n\n        log('最新帖子响应:', response)\n\n        if (response && response.count !== undefined && response.results) {\n          // 处理DRF分页响应\n          log('使用DRF分页响应格式处理最新帖子数据')\n          latestPosts.value = response.results || []\n        } else if (response && response.code === 0 && response.data) {\n          // 处理自定义响应格式\n          log('使用自定义响应格式处理最新帖子数据')\n          if (response.data.results) {\n            latestPosts.value = response.data.results || []\n          } else if (Array.isArray(response.data)) {\n            latestPosts.value = response.data || []\n          }\n        } else if (response && response.status === 0 && response.data) {\n          // 处理另一种自定义响应格式\n          log('使用status=0格式处理最新帖子数据')\n          if (response.data.results) {\n            latestPosts.value = response.data.results || []\n          } else if (Array.isArray(response.data)) {\n            latestPosts.value = response.data || []\n          }\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          log('使用数组格式处理最新帖子数据')\n          latestPosts.value = response\n        } else if (response && Array.isArray(response.results)) {\n          // 直接带有results属性的情况\n          log('使用带results属性的响应格式处理最新帖子数据')\n          latestPosts.value = response.results\n        } else {\n          console.error('获取最新帖子失败:', response ? response.msg : '未知错误')\n          ElMessage.error('获取最新帖子失败，请稍后再试')\n          latestPosts.value = []\n        }\n      } catch (error) {\n        console.error('获取最新帖子失败:', error)\n        // 使用更友好的错误提示\n        if (error.response && error.response.status === 401) {\n          log('未登录状态，无法获取帖子列表')\n          ElMessage.warning('请登录后查看最新帖子')\n        } else {\n          ElMessage.error('获取最新帖子失败，请稍后再试')\n        }\n        latestPosts.value = []\n      } finally {\n        loading.value.posts = false\n      }\n    }\n\n    // 提供刷新函数给子组件\n    provide('refreshLatestPosts', fetchLatestPosts)\n\n    // 获取热门板块\n    const fetchHotBoards = async () => {\n      loading.value.boards = true\n      try {\n        log('开始获取热门板块...')\n        const response = await getHotBoards(5)\n\n        log('热门板块响应:', response)\n\n        if (response && response.status === 0 && response.data) {\n          // 处理Django REST framework自定义响应格式\n          log('使用status=0格式处理热门板块数据')\n          hotBoards.value = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          // 处理另一种自定义响应格式\n          log('使用code=0格式处理热门板块数据')\n          hotBoards.value = response.data || []\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          log('使用数组格式处理热门板块数据')\n          hotBoards.value = response\n        } else {\n          console.error('获取热门板块失败:', response ? response.msg : '未知错误')\n          hotBoards.value = [] // 如果获取失败，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取热门板块失败:', error)\n        ElMessage.error('获取热门板块失败，请稍后再试')\n        hotBoards.value = [] // 如果发生错误，设置为空数组\n      } finally {\n        loading.value.boards = false\n      }\n    }\n\n    // 获取热门用户\n    const fetchHotUsers = async () => {\n      loading.value.users = true\n      try {\n        log('开始获取热门用户...')\n        const response = await getHotUsers(5)\n\n        log('热门用户响应:', response)\n\n        if (response && response.code === 0 && response.data) {\n          log('使用code=0格式处理热门用户数据')\n          hotUsers.value = response.data || []\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          log('使用数组格式处理热门用户数据')\n          hotUsers.value = response\n        } else if (response && response.status === 0 && response.data) {\n          // 另一种响应格式\n          log('使用status=0格式处理热门用户数据')\n          hotUsers.value = response.data || []\n        } else {\n          console.error('获取热门用户失败:', response ? response.msg : '未知错误')\n          hotUsers.value = [] // 如果获取失败，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取热门用户失败:', error)\n        ElMessage.error('获取热门用户失败，请稍后再试')\n        hotUsers.value = [] // 如果发生错误，设置为空数组\n      } finally {\n        loading.value.users = false\n      }\n    }\n\n    // 生命周期钩子\n    onMounted(() => {\n      log('Home页面加载 - 登录状态:', {\n        isAuthenticated: isAuthenticated.value,\n        userInfo: userInfo.value,\n        storeToken: store.state.token,\n        localStorageToken: localStorage.getItem('token'),\n        localStorageUserInfo: localStorage.getItem('userInfo')\n      })\n\n      // 获取数据\n      fetchLatestPosts()\n      fetchHotBoards()\n      fetchHotUsers()\n      \n      // 添加定时器，每30秒刷新一次最新帖子\n      const refreshTimer = setInterval(() => {\n        log('定时刷新最新帖子...')\n        fetchLatestPosts()\n      }, 30000)\n\n      // 在组件卸载时清除定时器\n      onUnmounted(() => {\n        if (refreshTimer) {\n          clearInterval(refreshTimer)\n        }\n      })\n      \n      // 添加重试机制，确保数据加载成功\n      setTimeout(() => {\n        // 如果首次加载失败，尝试重新加载\n        if (latestPosts.value.length === 0 && !loading.value.posts) {\n          log('首次加载帖子失败，尝试重新加载...')\n          fetchLatestPosts()\n        }\n      }, 5000)\n    })\n\n    return {\n      isAuthenticated,\n      userInfo,\n      isAdmin,\n      latestPosts,\n      hotBoards,\n      hotUsers,\n      loading,\n      formatDate,\n      goToLogin,\n      goToRegister,\n      goToProfile,\n      goToAdminDashboard,\n      goToUserManagement,\n      goToPostList,\n      goToUserProfile,\n      goToNewPost,\n      handleLogout,\n      fetchLatestPosts // 导出刷新函数\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.el-container {\n  min-height: 100vh;\n}\n\n.el-main {\n  padding: 20px;\n  background-color: #f5f7fa;\n}\n\n.main-content {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.content-area {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);\n}\n\n.welcome-message {\n  background-color: #f0f9ff;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  border-left: 4px solid #409eff;\n}\n\n.welcome-message h2 {\n  margin-top: 0;\n  color: #303133;\n}\n\n.section-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n  border-bottom: 1px solid #ebeef5;\n  padding-bottom: 10px;\n}\n\n.section-title h3 {\n  margin: 0;\n  font-size: 18px;\n  color: #303133;\n}\n\n.post-list {\n  margin-bottom: 20px;\n}\n\n.post-item {\n  display: flex;\n  padding: 15px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.post-avatar {\n  margin-right: 15px;\n}\n\n.post-content {\n  flex-grow: 1;\n}\n\n.post-title {\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 8px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title a {\n  color: #303133;\n  text-decoration: none;\n  margin-right: 8px;\n}\n\n.post-title a:hover {\n  color: #409eff;\n}\n\n.post-info {\n  font-size: 12px;\n  color: #909399;\n  margin-bottom: 8px;\n}\n\n.post-info .author {\n  margin-right: 10px;\n}\n\n.post-info .board {\n  margin-right: 10px;\n  background-color: #f0f9ff;\n  color: #409eff;\n  padding: 2px 6px;\n  border-radius: 4px;\n}\n\n.post-stats {\n  font-size: 12px;\n  color: #909399;\n  display: flex;\n  gap: 15px;\n}\n\n.sidebar {\n  position: sticky;\n  top: 80px;\n}\n\n.sidebar-section {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);\n}\n\n.board-list, .user-list {\n  margin-top: 10px;\n}\n\n.board-item, .user-item {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.board-item a {\n  color: #303133;\n  text-decoration: none;\n  flex-grow: 1;\n}\n\n.board-item a:hover {\n  color: #409eff;\n}\n\n.post-count {\n  font-size: 12px;\n  color: #909399;\n}\n\n.user-item {\n  gap: 10px;\n}\n\n.user-nickname {\n  flex-grow: 1;\n  font-size: 14px;\n}\n\n.el-footer {\n  background-color: #fff;\n  border-top: 1px solid #ebeef5;\n}\n\n.footer-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #909399;\n  font-size: 14px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}