{"ast":null,"code":"import _classCallCheck from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport store from '@/store';\nimport { ElMessage } from 'element-plus';\n\n// WebSocket基础URL\nvar WS_BASE_URL = process.env.NODE_ENV === 'production' ? 'wss://yourserver.com/ws' : 'ws://localhost:8001/ws';\n\n/**\r\n * WebSocket管理类\r\n */\nvar WebSocketManager = /*#__PURE__*/function () {\n  function WebSocketManager() {\n    _classCallCheck(this, WebSocketManager);\n    this.notificationSocket = null;\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\n    this.token = null;\n    this.usePolling = false;\n    this.pollingInterval = null;\n  }\n\n  /**\r\n   * 初始化WebSocket连接\r\n   * @param {string} token - JWT令牌\r\n   */\n  return _createClass(WebSocketManager, [{\n    key: \"init\",\n    value: function init(token) {\n      var _this = this;\n      this.token = token;\n      if (token) {\n        // 检查后端是否支持通知功能\n        fetch('http://localhost:8000/api/v1/notifications/').then(function (response) {\n          // 只检查 API 是否可用，不考虑 WebSocket\n          if (response.status !== 404) {\n            // WebSocket 可能不可用，但 REST API 可用\n            // 尝试连接 WebSocket，如果失败则使用轮询\n            _this.connectNotificationWithFallback(token);\n          } else {\n            console.log('通知接口不可用，不建立连接');\n          }\n        })[\"catch\"](function (error) {\n          console.error('检查通知接口可用性失败:', error);\n        });\n      }\n    }\n\n    /**\r\n     * 尝试连接通知 WebSocket，失败时退回到轮询\r\n     * @param {string} token - JWT令牌\r\n     */\n  }, {\n    key: \"connectNotificationWithFallback\",\n    value: function connectNotificationWithFallback(token) {\n      var _this2 = this;\n      try {\n        // 先尝试 WebSocket\n        var testSocket = new WebSocket(\"\".concat(WS_BASE_URL, \"/notifications/?token=\").concat(token));\n\n        // 设置超时，如果 2 秒内没有连接成功，就使用轮询\n        var timeoutId = setTimeout(function () {\n          console.log('WebSocket 连接超时，切换到轮询模式');\n          testSocket.close();\n          _this2.usePolling = true;\n          _this2.startNotificationPolling();\n        }, 2000);\n        testSocket.onopen = function () {\n          console.log('WebSocket 测试连接成功，使用 WebSocket 模式');\n          clearTimeout(timeoutId);\n          testSocket.close();\n          _this2.connectNotification(token);\n        };\n        testSocket.onerror = function () {\n          console.log('WebSocket 连接错误，切换到轮询模式');\n          clearTimeout(timeoutId);\n          _this2.usePolling = true;\n          _this2.startNotificationPolling();\n        };\n      } catch (e) {\n        console.log('WebSocket 连接异常，切换到轮询模式', e);\n        this.usePolling = true;\n        this.startNotificationPolling();\n      }\n    }\n\n    /**\r\n     * 使用轮询方式获取通知\r\n     */\n  }, {\n    key: \"startNotificationPolling\",\n    value: function startNotificationPolling() {\n      var _this3 = this;\n      console.log('开始使用轮询方式获取通知');\n\n      // 清除之前的轮询定时器\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n      }\n\n      // 立即执行一次\n      this.pollNotifications();\n\n      // 每 30 秒轮询一次\n      this.pollingInterval = setInterval(function () {\n        _this3.pollNotifications();\n      }, 30000);\n    }\n\n    /**\r\n     * 轮询获取通知\r\n     */\n  }, {\n    key: \"pollNotifications\",\n    value: function pollNotifications() {\n      var _this4 = this;\n      if (!this.token) return;\n      var headers = {\n        'Authorization': \"Bearer \".concat(this.token)\n      };\n\n      // 先获取未读数量\n      fetch('http://localhost:8000/api/v1/notifications/?page=1&page_size=1&is_read=false', {\n        headers: headers\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        // 更新未读数量\n        var count = data.count || 0;\n        store.commit('notifications/setUnreadCount', count);\n\n        // 如果有未读通知，获取最新的几条\n        if (count > 0) {\n          _this4.fetchLatestNotifications();\n        }\n      })[\"catch\"](function (error) {\n        console.error('轮询获取通知数量失败:', error);\n      });\n    }\n\n    /**\r\n     * 获取最新通知\r\n     */\n  }, {\n    key: \"fetchLatestNotifications\",\n    value: function fetchLatestNotifications() {\n      if (!this.token) return;\n      var headers = {\n        'Authorization': \"Bearer \".concat(this.token)\n      };\n      fetch('http://localhost:8000/api/v1/notifications/?page=1&page_size=5&ordering=-created_at', {\n        headers: headers\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        // 处理通知数据\n        if (data.results && data.results.length > 0) {\n          // 检查是否有新通知\n          var lastNotificationId = localStorage.getItem('lastNotificationId');\n          var hasNewNotifications = data.results.some(function (notification) {\n            return !lastNotificationId || notification.id > parseInt(lastNotificationId);\n          });\n\n          // 记住最新的通知 ID\n          if (data.results[0] && data.results[0].id) {\n            localStorage.setItem('lastNotificationId', data.results[0].id);\n          }\n\n          // 如果有新通知，弹出提示\n          if (hasNewNotifications) {\n            ElMessage({\n              message: '您有新的通知',\n              type: 'info',\n              duration: 3000\n            });\n          }\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取最新通知失败:', error);\n      });\n    }\n\n    /**\r\n     * 连接到通知WebSocket\r\n     * @param {string} token - JWT令牌\r\n     */\n  }, {\n    key: \"connectNotification\",\n    value: function connectNotification(token) {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n      }\n\n      // 创建通知WebSocket连接\n      this.notificationSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/notifications/?token=\").concat(token));\n\n      // 连接打开时的处理\n      this.notificationSocket.onopen = function () {\n        console.log('通知WebSocket连接已建立');\n      };\n\n      // 接收消息的处理\n      this.notificationSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'connection_established':\n              console.log(data.message);\n              break;\n            case 'unread_count':\n              // 更新未读通知数量\n              store.commit('notifications/setUnreadCount', data.count);\n              break;\n            case 'notification':\n              // 处理新通知\n              store.commit('notifications/addNotification', data);\n              store.commit('notifications/incrementUnreadCount');\n\n              // 显示通知提示\n              ElMessage({\n                message: data.title,\n                type: 'info',\n                duration: 3000\n              });\n              break;\n            case 'mark_read_response':\n            case 'mark_all_read_response':\n              // 标记通知已读的响应处理\n              break;\n            default:\n              console.log('未知的通知类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析通知消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的处理\n      this.notificationSocket.onclose = function () {\n        console.log('通知WebSocket连接已关闭');\n      };\n\n      // 连接错误时的处理\n      this.notificationSocket.onerror = function (error) {\n        console.error('通知WebSocket连接错误:', error);\n      };\n    }\n\n    /**\r\n     * 连接到聊天WebSocket\r\n     * @param {number} userId - 对方用户ID\r\n     */\n  }, {\n    key: \"connectChat\",\n    value: function connectChat(userId) {\n      var _this5 = this;\n      if (!this.token) {\n        console.error('未登录，无法建立聊天连接');\n        return;\n      }\n\n      // 如果已存在与该用户的连接，则返回\n      if (this.chatSockets[userId]) {\n        return;\n      }\n\n      // 创建聊天WebSocket连接\n      var chatSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/chat/\").concat(userId, \"/?token=\").concat(this.token));\n\n      // 连接打开时的处理\n      chatSocket.onopen = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB\"));\n      };\n\n      // 接收消息的处理\n      chatSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'connection_established':\n              console.log(data.message);\n              break;\n            case 'chat_message':\n              // 处理聊天消息\n              store.commit('chat/addMessage', {\n                userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\n                message: {\n                  id: data.id,\n                  senderId: data.sender_id,\n                  receiverId: data.receiver_id,\n                  content: data.content,\n                  timestamp: data.timestamp,\n                  isRead: data.is_read\n                }\n              });\n              break;\n            case 'history_messages':\n              // 处理历史消息\n              store.commit('chat/setMessages', {\n                userId: userId,\n                messages: data.messages.map(function (msg) {\n                  return {\n                    id: msg.id,\n                    senderId: msg.sender_id,\n                    receiverId: msg.receiver_id,\n                    content: msg.content,\n                    timestamp: msg.timestamp,\n                    isRead: msg.is_read\n                  };\n                }),\n                hasMore: data.has_more,\n                page: data.page\n              });\n              break;\n            default:\n              console.log('未知的聊天消息类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析聊天消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的处理\n      chatSocket.onclose = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED\"));\n        delete _this5.chatSockets[userId];\n      };\n\n      // 连接错误时的处理\n      chatSocket.onerror = function (error) {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u9519\\u8BEF:\"), error);\n      };\n\n      // 保存连接\n      this.chatSockets[userId] = chatSocket;\n    }\n\n    /**\r\n     * 断开与用户的聊天连接\r\n     * @param {number} userId - 用户ID\r\n     */\n  }, {\n    key: \"disconnectChat\",\n    value: function disconnectChat(userId) {\n      if (this.chatSockets[userId]) {\n        this.chatSockets[userId].close();\n        delete this.chatSockets[userId];\n      }\n    }\n\n    /**\r\n     * 发送聊天消息\r\n     * @param {number} userId - 接收者ID\r\n     * @param {string} content - 消息内容\r\n     */\n  }, {\n    key: \"sendChatMessage\",\n    value: function sendChatMessage(userId, content) {\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'chat_message',\n        content: content\n      }));\n    }\n\n    /**\r\n     * 加载历史消息\r\n     * @param {number} userId - 用户ID\r\n     * @param {number} page - 页码\r\n     * @param {number} pageSize - 每页大小\r\n     */\n  }, {\n    key: \"loadChatHistory\",\n    value: function loadChatHistory(userId) {\n      var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'load_history',\n        page: page,\n        page_size: pageSize\n      }));\n    }\n\n    /**\r\n     * 标记通知为已读\r\n     * @param {number} notificationId - 通知ID\r\n     */\n  }, {\n    key: \"markNotificationRead\",\n    value: function markNotificationRead(notificationId) {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_read',\n          id: notificationId\n        }));\n      }\n    }\n\n    /**\r\n     * 标记所有通知为已读\r\n     */\n  }, {\n    key: \"markAllNotificationsRead\",\n    value: function markAllNotificationsRead() {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_all_read'\n        }));\n      }\n    }\n\n    /**\r\n     * 关闭所有WebSocket连接\r\n     */\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n        this.notificationSocket = null;\n      }\n      Object.values(this.chatSockets).forEach(function (socket) {\n        socket.close();\n      });\n      this.chatSockets = {};\n      this.token = null;\n    }\n  }]);\n}(); // 创建单例\nvar wsManager = new WebSocketManager();\nexport default wsManager;","map":{"version":3,"names":["ReconnectingWebSocket","store","ElMessage","WS_BASE_URL","process","env","NODE_ENV","WebSocketManager","_classCallCheck","notificationSocket","chatSockets","token","usePolling","pollingInterval","_createClass","key","value","init","_this","fetch","then","response","status","connectNotificationWithFallback","console","log","error","_this2","testSocket","WebSocket","concat","timeoutId","setTimeout","close","startNotificationPolling","onopen","clearTimeout","connectNotification","onerror","e","_this3","clearInterval","pollNotifications","setInterval","_this4","headers","json","data","count","commit","fetchLatestNotifications","results","length","lastNotificationId","localStorage","getItem","hasNewNotifications","some","notification","id","parseInt","setItem","message","type","duration","onmessage","event","JSON","parse","title","onclose","connectChat","userId","_this5","chatSocket","sender_id","state","user","currentUser","receiver_id","senderId","receiverId","content","timestamp","isRead","is_read","messages","map","msg","hasMore","has_more","page","disconnectChat","sendChatMessage","send","stringify","loadChatHistory","arguments","undefined","pageSize","page_size","markNotificationRead","notificationId","readyState","OPEN","markAllNotificationsRead","closeAll","Object","values","forEach","socket","wsManager"],"sources":["H:/ForumServers/ForumFrontend/src/utils/websocket.js"],"sourcesContent":["import ReconnectingWebSocket from 'reconnecting-websocket';\r\nimport store from '@/store';\r\nimport { ElMessage } from 'element-plus';\r\n\r\n// WebSocket基础URL\r\nconst WS_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? 'wss://yourserver.com/ws' \r\n  : 'ws://localhost:8001/ws';\r\n\r\n/**\r\n * WebSocket管理类\r\n */\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.notificationSocket = null;\r\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\r\n    this.token = null;\r\n    this.usePolling = false;\r\n    this.pollingInterval = null;\r\n  }\r\n\r\n  /**\r\n   * 初始化WebSocket连接\r\n   * @param {string} token - JWT令牌\r\n   */\r\n  init(token) {\r\n    this.token = token;\r\n    if (token) {\r\n      // 检查后端是否支持通知功能\r\n      fetch('http://localhost:8000/api/v1/notifications/')\r\n        .then(response => {\r\n          // 只检查 API 是否可用，不考虑 WebSocket\r\n          if (response.status !== 404) {\r\n            // WebSocket 可能不可用，但 REST API 可用\r\n            // 尝试连接 WebSocket，如果失败则使用轮询\r\n            this.connectNotificationWithFallback(token);\r\n          } else {\r\n            console.log('通知接口不可用，不建立连接');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('检查通知接口可用性失败:', error);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 尝试连接通知 WebSocket，失败时退回到轮询\r\n   * @param {string} token - JWT令牌\r\n   */\r\n  connectNotificationWithFallback(token) {\r\n    try {\r\n      // 先尝试 WebSocket\r\n      const testSocket = new WebSocket(`${WS_BASE_URL}/notifications/?token=${token}`);\r\n      \r\n      // 设置超时，如果 2 秒内没有连接成功，就使用轮询\r\n      const timeoutId = setTimeout(() => {\r\n        console.log('WebSocket 连接超时，切换到轮询模式');\r\n        testSocket.close();\r\n        this.usePolling = true;\r\n        this.startNotificationPolling();\r\n      }, 2000);\r\n      \r\n      testSocket.onopen = () => {\r\n        console.log('WebSocket 测试连接成功，使用 WebSocket 模式');\r\n        clearTimeout(timeoutId);\r\n        testSocket.close();\r\n        this.connectNotification(token);\r\n      };\r\n      \r\n      testSocket.onerror = () => {\r\n        console.log('WebSocket 连接错误，切换到轮询模式');\r\n        clearTimeout(timeoutId);\r\n        this.usePolling = true;\r\n        this.startNotificationPolling();\r\n      };\r\n    } catch (e) {\r\n      console.log('WebSocket 连接异常，切换到轮询模式', e);\r\n      this.usePolling = true;\r\n      this.startNotificationPolling();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 使用轮询方式获取通知\r\n   */\r\n  startNotificationPolling() {\r\n    console.log('开始使用轮询方式获取通知');\r\n    \r\n    // 清除之前的轮询定时器\r\n    if (this.pollingInterval) {\r\n      clearInterval(this.pollingInterval);\r\n    }\r\n    \r\n    // 立即执行一次\r\n    this.pollNotifications();\r\n    \r\n    // 每 30 秒轮询一次\r\n    this.pollingInterval = setInterval(() => {\r\n      this.pollNotifications();\r\n    }, 30000);\r\n  }\r\n\r\n  /**\r\n   * 轮询获取通知\r\n   */\r\n  pollNotifications() {\r\n    if (!this.token) return;\r\n    \r\n    const headers = {\r\n      'Authorization': `Bearer ${this.token}`\r\n    };\r\n    \r\n    // 先获取未读数量\r\n    fetch('http://localhost:8000/api/v1/notifications/?page=1&page_size=1&is_read=false', {\r\n      headers\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // 更新未读数量\r\n        const count = data.count || 0;\r\n        store.commit('notifications/setUnreadCount', count);\r\n        \r\n        // 如果有未读通知，获取最新的几条\r\n        if (count > 0) {\r\n          this.fetchLatestNotifications();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('轮询获取通知数量失败:', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 获取最新通知\r\n   */\r\n  fetchLatestNotifications() {\r\n    if (!this.token) return;\r\n    \r\n    const headers = {\r\n      'Authorization': `Bearer ${this.token}`\r\n    };\r\n    \r\n    fetch('http://localhost:8000/api/v1/notifications/?page=1&page_size=5&ordering=-created_at', {\r\n      headers\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // 处理通知数据\r\n        if (data.results && data.results.length > 0) {\r\n          // 检查是否有新通知\r\n          const lastNotificationId = localStorage.getItem('lastNotificationId');\r\n          const hasNewNotifications = data.results.some(notification => \r\n            !lastNotificationId || notification.id > parseInt(lastNotificationId)\r\n          );\r\n          \r\n          // 记住最新的通知 ID\r\n          if (data.results[0] && data.results[0].id) {\r\n            localStorage.setItem('lastNotificationId', data.results[0].id);\r\n          }\r\n          \r\n          // 如果有新通知，弹出提示\r\n          if (hasNewNotifications) {\r\n            ElMessage({\r\n              message: '您有新的通知',\r\n              type: 'info',\r\n              duration: 3000\r\n            });\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('获取最新通知失败:', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 连接到通知WebSocket\r\n   * @param {string} token - JWT令牌\r\n   */\r\n  connectNotification(token) {\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n    }\r\n\r\n    // 创建通知WebSocket连接\r\n    this.notificationSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/notifications/?token=${token}`);\r\n\r\n    // 连接打开时的处理\r\n    this.notificationSocket.onopen = () => {\r\n      console.log('通知WebSocket连接已建立');\r\n    };\r\n\r\n    // 接收消息的处理\r\n    this.notificationSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        switch (data.type) {\r\n          case 'connection_established':\r\n            console.log(data.message);\r\n            break;\r\n          \r\n          case 'unread_count':\r\n            // 更新未读通知数量\r\n            store.commit('notifications/setUnreadCount', data.count);\r\n            break;\r\n          \r\n          case 'notification':\r\n            // 处理新通知\r\n            store.commit('notifications/addNotification', data);\r\n            store.commit('notifications/incrementUnreadCount');\r\n            \r\n            // 显示通知提示\r\n            ElMessage({\r\n              message: data.title,\r\n              type: 'info',\r\n              duration: 3000\r\n            });\r\n            break;\r\n          \r\n          case 'mark_read_response':\r\n          case 'mark_all_read_response':\r\n            // 标记通知已读的响应处理\r\n            break;\r\n          \r\n          default:\r\n            console.log('未知的通知类型:', data.type);\r\n        }\r\n      } catch (error) {\r\n        console.error('解析通知消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的处理\r\n    this.notificationSocket.onclose = () => {\r\n      console.log('通知WebSocket连接已关闭');\r\n    };\r\n\r\n    // 连接错误时的处理\r\n    this.notificationSocket.onerror = (error) => {\r\n      console.error('通知WebSocket连接错误:', error);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 连接到聊天WebSocket\r\n   * @param {number} userId - 对方用户ID\r\n   */\r\n  connectChat(userId) {\r\n    if (!this.token) {\r\n      console.error('未登录，无法建立聊天连接');\r\n      return;\r\n    }\r\n\r\n    // 如果已存在与该用户的连接，则返回\r\n    if (this.chatSockets[userId]) {\r\n      return;\r\n    }\r\n\r\n    // 创建聊天WebSocket连接\r\n    const chatSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/chat/${userId}/?token=${this.token}`);\r\n\r\n    // 连接打开时的处理\r\n    chatSocket.onopen = () => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已建立`);\r\n    };\r\n\r\n    // 接收消息的处理\r\n    chatSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        switch (data.type) {\r\n          case 'connection_established':\r\n            console.log(data.message);\r\n            break;\r\n          \r\n          case 'chat_message':\r\n            // 处理聊天消息\r\n            store.commit('chat/addMessage', {\r\n              userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\r\n              message: {\r\n                id: data.id,\r\n                senderId: data.sender_id,\r\n                receiverId: data.receiver_id,\r\n                content: data.content,\r\n                timestamp: data.timestamp,\r\n                isRead: data.is_read\r\n              }\r\n            });\r\n            break;\r\n          \r\n          case 'history_messages':\r\n            // 处理历史消息\r\n            store.commit('chat/setMessages', {\r\n              userId: userId,\r\n              messages: data.messages.map(msg => ({\r\n                id: msg.id,\r\n                senderId: msg.sender_id,\r\n                receiverId: msg.receiver_id,\r\n                content: msg.content,\r\n                timestamp: msg.timestamp,\r\n                isRead: msg.is_read\r\n              })),\r\n              hasMore: data.has_more,\r\n              page: data.page\r\n            });\r\n            break;\r\n          \r\n          default:\r\n            console.log('未知的聊天消息类型:', data.type);\r\n        }\r\n      } catch (error) {\r\n        console.error('解析聊天消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的处理\r\n    chatSocket.onclose = () => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已关闭`);\r\n      delete this.chatSockets[userId];\r\n    };\r\n\r\n    // 连接错误时的处理\r\n    chatSocket.onerror = (error) => {\r\n      console.error(`与用户${userId}的聊天WebSocket连接错误:`, error);\r\n    };\r\n\r\n    // 保存连接\r\n    this.chatSockets[userId] = chatSocket;\r\n  }\r\n\r\n  /**\r\n   * 断开与用户的聊天连接\r\n   * @param {number} userId - 用户ID\r\n   */\r\n  disconnectChat(userId) {\r\n    if (this.chatSockets[userId]) {\r\n      this.chatSockets[userId].close();\r\n      delete this.chatSockets[userId];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送聊天消息\r\n   * @param {number} userId - 接收者ID\r\n   * @param {string} content - 消息内容\r\n   */\r\n  sendChatMessage(userId, content) {\r\n    if (!this.chatSockets[userId]) {\r\n      this.connectChat(userId);\r\n    }\r\n\r\n    this.chatSockets[userId].send(JSON.stringify({\r\n      type: 'chat_message',\r\n      content: content\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * 加载历史消息\r\n   * @param {number} userId - 用户ID\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 每页大小\r\n   */\r\n  loadChatHistory(userId, page = 1, pageSize = 20) {\r\n    if (!this.chatSockets[userId]) {\r\n      this.connectChat(userId);\r\n    }\r\n\r\n    this.chatSockets[userId].send(JSON.stringify({\r\n      type: 'load_history',\r\n      page: page,\r\n      page_size: pageSize\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * 标记通知为已读\r\n   * @param {number} notificationId - 通知ID\r\n   */\r\n  markNotificationRead(notificationId) {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_read',\r\n        id: notificationId\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 标记所有通知为已读\r\n   */\r\n  markAllNotificationsRead() {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_all_read'\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 关闭所有WebSocket连接\r\n   */\r\n  closeAll() {\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n      this.notificationSocket = null;\r\n    }\r\n\r\n    Object.values(this.chatSockets).forEach(socket => {\r\n      socket.close();\r\n    });\r\n    this.chatSockets = {};\r\n    this.token = null;\r\n  }\r\n}\r\n\r\n// 创建单例\r\nconst wsManager = new WebSocketManager();\r\n\r\nexport default wsManager; "],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,qBAAqB,MAAM,wBAAwB;AAC1D,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,SAAS,QAAQ,cAAc;;AAExC;AACA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACrD,yBAAyB,GACzB,wBAAwB;;AAE5B;AACA;AACA;AAFA,IAGMC,gBAAgB;EACpB,SAAAA,iBAAA,EAAc;IAAAC,eAAA,OAAAD,gBAAA;IACZ,IAAI,CAACE,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,eAAe,GAAG,IAAI;EAC7B;;EAEA;AACF;AACA;AACA;EAHE,OAAAC,YAAA,CAAAP,gBAAA;IAAAQ,GAAA;IAAAC,KAAA,EAIA,SAAAC,IAAIA,CAACN,KAAK,EAAE;MAAA,IAAAO,KAAA;MACV,IAAI,CAACP,KAAK,GAAGA,KAAK;MAClB,IAAIA,KAAK,EAAE;QACT;QACAQ,KAAK,CAAC,6CAA6C,CAAC,CACjDC,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAChB;UACA,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;YAC3B;YACA;YACAJ,KAAI,CAACK,+BAA+B,CAACZ,KAAK,CAAC;UAC7C,CAAC,MAAM;YACLa,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;UAC9B;QACF,CAAC,CAAC,SACI,CAAC,UAAAC,KAAK,EAAI;UACdF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACtC,CAAC,CAAC;MACN;IACF;;IAEA;AACF;AACA;AACA;EAHE;IAAAX,GAAA;IAAAC,KAAA,EAIA,SAAAO,+BAA+BA,CAACZ,KAAK,EAAE;MAAA,IAAAgB,MAAA;MACrC,IAAI;QACF;QACA,IAAMC,UAAU,GAAG,IAAIC,SAAS,IAAAC,MAAA,CAAI3B,WAAW,4BAAA2B,MAAA,CAAyBnB,KAAK,CAAE,CAAC;;QAEhF;QACA,IAAMoB,SAAS,GAAGC,UAAU,CAAC,YAAM;UACjCR,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;UACrCG,UAAU,CAACK,KAAK,CAAC,CAAC;UAClBN,MAAI,CAACf,UAAU,GAAG,IAAI;UACtBe,MAAI,CAACO,wBAAwB,CAAC,CAAC;QACjC,CAAC,EAAE,IAAI,CAAC;QAERN,UAAU,CAACO,MAAM,GAAG,YAAM;UACxBX,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/CW,YAAY,CAACL,SAAS,CAAC;UACvBH,UAAU,CAACK,KAAK,CAAC,CAAC;UAClBN,MAAI,CAACU,mBAAmB,CAAC1B,KAAK,CAAC;QACjC,CAAC;QAEDiB,UAAU,CAACU,OAAO,GAAG,YAAM;UACzBd,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;UACrCW,YAAY,CAACL,SAAS,CAAC;UACvBJ,MAAI,CAACf,UAAU,GAAG,IAAI;UACtBe,MAAI,CAACO,wBAAwB,CAAC,CAAC;QACjC,CAAC;MACH,CAAC,CAAC,OAAOK,CAAC,EAAE;QACVf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEc,CAAC,CAAC;QACxC,IAAI,CAAC3B,UAAU,GAAG,IAAI;QACtB,IAAI,CAACsB,wBAAwB,CAAC,CAAC;MACjC;IACF;;IAEA;AACF;AACA;EAFE;IAAAnB,GAAA;IAAAC,KAAA,EAGA,SAAAkB,wBAAwBA,CAAA,EAAG;MAAA,IAAAM,MAAA;MACzBhB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;MAE3B;MACA,IAAI,IAAI,CAACZ,eAAe,EAAE;QACxB4B,aAAa,CAAC,IAAI,CAAC5B,eAAe,CAAC;MACrC;;MAEA;MACA,IAAI,CAAC6B,iBAAiB,CAAC,CAAC;;MAExB;MACA,IAAI,CAAC7B,eAAe,GAAG8B,WAAW,CAAC,YAAM;QACvCH,MAAI,CAACE,iBAAiB,CAAC,CAAC;MAC1B,CAAC,EAAE,KAAK,CAAC;IACX;;IAEA;AACF;AACA;EAFE;IAAA3B,GAAA;IAAAC,KAAA,EAGA,SAAA0B,iBAAiBA,CAAA,EAAG;MAAA,IAAAE,MAAA;MAClB,IAAI,CAAC,IAAI,CAACjC,KAAK,EAAE;MAEjB,IAAMkC,OAAO,GAAG;QACd,eAAe,YAAAf,MAAA,CAAY,IAAI,CAACnB,KAAK;MACvC,CAAC;;MAED;MACAQ,KAAK,CAAC,8EAA8E,EAAE;QACpF0B,OAAO,EAAPA;MACF,CAAC,CAAC,CACCzB,IAAI,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACyB,IAAI,CAAC,CAAC;MAAA,EAAC,CACjC1B,IAAI,CAAC,UAAA2B,IAAI,EAAI;QACZ;QACA,IAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,IAAI,CAAC;QAC7B/C,KAAK,CAACgD,MAAM,CAAC,8BAA8B,EAAED,KAAK,CAAC;;QAEnD;QACA,IAAIA,KAAK,GAAG,CAAC,EAAE;UACbJ,MAAI,CAACM,wBAAwB,CAAC,CAAC;QACjC;MACF,CAAC,CAAC,SACI,CAAC,UAAAxB,KAAK,EAAI;QACdF,OAAO,CAACE,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACrC,CAAC,CAAC;IACN;;IAEA;AACF;AACA;EAFE;IAAAX,GAAA;IAAAC,KAAA,EAGA,SAAAkC,wBAAwBA,CAAA,EAAG;MACzB,IAAI,CAAC,IAAI,CAACvC,KAAK,EAAE;MAEjB,IAAMkC,OAAO,GAAG;QACd,eAAe,YAAAf,MAAA,CAAY,IAAI,CAACnB,KAAK;MACvC,CAAC;MAEDQ,KAAK,CAAC,qFAAqF,EAAE;QAC3F0B,OAAO,EAAPA;MACF,CAAC,CAAC,CACCzB,IAAI,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACyB,IAAI,CAAC,CAAC;MAAA,EAAC,CACjC1B,IAAI,CAAC,UAAA2B,IAAI,EAAI;QACZ;QACA,IAAIA,IAAI,CAACI,OAAO,IAAIJ,IAAI,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;UAC3C;UACA,IAAMC,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;UACrE,IAAMC,mBAAmB,GAAGT,IAAI,CAACI,OAAO,CAACM,IAAI,CAAC,UAAAC,YAAY;YAAA,OACxD,CAACL,kBAAkB,IAAIK,YAAY,CAACC,EAAE,GAAGC,QAAQ,CAACP,kBAAkB,CAAC;UAAA,CACvE,CAAC;;UAED;UACA,IAAIN,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,IAAIJ,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACQ,EAAE,EAAE;YACzCL,YAAY,CAACO,OAAO,CAAC,oBAAoB,EAAEd,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACQ,EAAE,CAAC;UAChE;;UAEA;UACA,IAAIH,mBAAmB,EAAE;YACvBtD,SAAS,CAAC;cACR4D,OAAO,EAAE,QAAQ;cACjBC,IAAI,EAAE,MAAM;cACZC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,SACI,CAAC,UAAAtC,KAAK,EAAI;QACdF,OAAO,CAACE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;EAHE;IAAAX,GAAA;IAAAC,KAAA,EAIA,SAAAqB,mBAAmBA,CAAC1B,KAAK,EAAE;MACzB,IAAI,IAAI,CAACF,kBAAkB,EAAE;QAC3B,IAAI,CAACA,kBAAkB,CAACwB,KAAK,CAAC,CAAC;MACjC;;MAEA;MACA,IAAI,CAACxB,kBAAkB,GAAG,IAAIT,qBAAqB,IAAA8B,MAAA,CAAI3B,WAAW,4BAAA2B,MAAA,CAAyBnB,KAAK,CAAE,CAAC;;MAEnG;MACA,IAAI,CAACF,kBAAkB,CAAC0B,MAAM,GAAG,YAAM;QACrCX,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC,CAAC;;MAED;MACA,IAAI,CAAChB,kBAAkB,CAACwD,SAAS,GAAG,UAACC,KAAK,EAAK;QAC7C,IAAI;UACF,IAAMnB,IAAI,GAAGoB,IAAI,CAACC,KAAK,CAACF,KAAK,CAACnB,IAAI,CAAC;UAEnC,QAAQA,IAAI,CAACgB,IAAI;YACf,KAAK,wBAAwB;cAC3BvC,OAAO,CAACC,GAAG,CAACsB,IAAI,CAACe,OAAO,CAAC;cACzB;YAEF,KAAK,cAAc;cACjB;cACA7D,KAAK,CAACgD,MAAM,CAAC,8BAA8B,EAAEF,IAAI,CAACC,KAAK,CAAC;cACxD;YAEF,KAAK,cAAc;cACjB;cACA/C,KAAK,CAACgD,MAAM,CAAC,+BAA+B,EAAEF,IAAI,CAAC;cACnD9C,KAAK,CAACgD,MAAM,CAAC,oCAAoC,CAAC;;cAElD;cACA/C,SAAS,CAAC;gBACR4D,OAAO,EAAEf,IAAI,CAACsB,KAAK;gBACnBN,IAAI,EAAE,MAAM;gBACZC,QAAQ,EAAE;cACZ,CAAC,CAAC;cACF;YAEF,KAAK,oBAAoB;YACzB,KAAK,wBAAwB;cAC3B;cACA;YAEF;cACExC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEsB,IAAI,CAACgB,IAAI,CAAC;UACtC;QACF,CAAC,CAAC,OAAOrC,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACnC;MACF,CAAC;;MAED;MACA,IAAI,CAACjB,kBAAkB,CAAC6D,OAAO,GAAG,YAAM;QACtC9C,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC,CAAC;;MAED;MACA,IAAI,CAAChB,kBAAkB,CAAC6B,OAAO,GAAG,UAACZ,KAAK,EAAK;QAC3CF,OAAO,CAACE,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;IACH;;IAEA;AACF;AACA;AACA;EAHE;IAAAX,GAAA;IAAAC,KAAA,EAIA,SAAAuD,WAAWA,CAACC,MAAM,EAAE;MAAA,IAAAC,MAAA;MAClB,IAAI,CAAC,IAAI,CAAC9D,KAAK,EAAE;QACfa,OAAO,CAACE,KAAK,CAAC,cAAc,CAAC;QAC7B;MACF;;MAEA;MACA,IAAI,IAAI,CAAChB,WAAW,CAAC8D,MAAM,CAAC,EAAE;QAC5B;MACF;;MAEA;MACA,IAAME,UAAU,GAAG,IAAI1E,qBAAqB,IAAA8B,MAAA,CAAI3B,WAAW,YAAA2B,MAAA,CAAS0C,MAAM,cAAA1C,MAAA,CAAW,IAAI,CAACnB,KAAK,CAAE,CAAC;;MAElG;MACA+D,UAAU,CAACvC,MAAM,GAAG,YAAM;QACxBX,OAAO,CAACC,GAAG,sBAAAK,MAAA,CAAO0C,MAAM,8DAAmB,CAAC;MAC9C,CAAC;;MAED;MACAE,UAAU,CAACT,SAAS,GAAG,UAACC,KAAK,EAAK;QAChC,IAAI;UACF,IAAMnB,IAAI,GAAGoB,IAAI,CAACC,KAAK,CAACF,KAAK,CAACnB,IAAI,CAAC;UAEnC,QAAQA,IAAI,CAACgB,IAAI;YACf,KAAK,wBAAwB;cAC3BvC,OAAO,CAACC,GAAG,CAACsB,IAAI,CAACe,OAAO,CAAC;cACzB;YAEF,KAAK,cAAc;cACjB;cACA7D,KAAK,CAACgD,MAAM,CAAC,iBAAiB,EAAE;gBAC9BuB,MAAM,EAAEzB,IAAI,CAAC4B,SAAS,KAAK1E,KAAK,CAAC2E,KAAK,CAACC,IAAI,CAACC,WAAW,CAACnB,EAAE,GAAGZ,IAAI,CAACgC,WAAW,GAAGhC,IAAI,CAAC4B,SAAS;gBAC9Fb,OAAO,EAAE;kBACPH,EAAE,EAAEZ,IAAI,CAACY,EAAE;kBACXqB,QAAQ,EAAEjC,IAAI,CAAC4B,SAAS;kBACxBM,UAAU,EAAElC,IAAI,CAACgC,WAAW;kBAC5BG,OAAO,EAAEnC,IAAI,CAACmC,OAAO;kBACrBC,SAAS,EAAEpC,IAAI,CAACoC,SAAS;kBACzBC,MAAM,EAAErC,IAAI,CAACsC;gBACf;cACF,CAAC,CAAC;cACF;YAEF,KAAK,kBAAkB;cACrB;cACApF,KAAK,CAACgD,MAAM,CAAC,kBAAkB,EAAE;gBAC/BuB,MAAM,EAAEA,MAAM;gBACdc,QAAQ,EAAEvC,IAAI,CAACuC,QAAQ,CAACC,GAAG,CAAC,UAAAC,GAAG;kBAAA,OAAK;oBAClC7B,EAAE,EAAE6B,GAAG,CAAC7B,EAAE;oBACVqB,QAAQ,EAAEQ,GAAG,CAACb,SAAS;oBACvBM,UAAU,EAAEO,GAAG,CAACT,WAAW;oBAC3BG,OAAO,EAAEM,GAAG,CAACN,OAAO;oBACpBC,SAAS,EAAEK,GAAG,CAACL,SAAS;oBACxBC,MAAM,EAAEI,GAAG,CAACH;kBACd,CAAC;gBAAA,CAAC,CAAC;gBACHI,OAAO,EAAE1C,IAAI,CAAC2C,QAAQ;gBACtBC,IAAI,EAAE5C,IAAI,CAAC4C;cACb,CAAC,CAAC;cACF;YAEF;cACEnE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEsB,IAAI,CAACgB,IAAI,CAAC;UACxC;QACF,CAAC,CAAC,OAAOrC,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACnC;MACF,CAAC;;MAED;MACAgD,UAAU,CAACJ,OAAO,GAAG,YAAM;QACzB9C,OAAO,CAACC,GAAG,sBAAAK,MAAA,CAAO0C,MAAM,8DAAmB,CAAC;QAC5C,OAAOC,MAAI,CAAC/D,WAAW,CAAC8D,MAAM,CAAC;MACjC,CAAC;;MAED;MACAE,UAAU,CAACpC,OAAO,GAAG,UAACZ,KAAK,EAAK;QAC9BF,OAAO,CAACE,KAAK,sBAAAI,MAAA,CAAO0C,MAAM,2DAAqB9C,KAAK,CAAC;MACvD,CAAC;;MAED;MACA,IAAI,CAAChB,WAAW,CAAC8D,MAAM,CAAC,GAAGE,UAAU;IACvC;;IAEA;AACF;AACA;AACA;EAHE;IAAA3D,GAAA;IAAAC,KAAA,EAIA,SAAA4E,cAAcA,CAACpB,MAAM,EAAE;MACrB,IAAI,IAAI,CAAC9D,WAAW,CAAC8D,MAAM,CAAC,EAAE;QAC5B,IAAI,CAAC9D,WAAW,CAAC8D,MAAM,CAAC,CAACvC,KAAK,CAAC,CAAC;QAChC,OAAO,IAAI,CAACvB,WAAW,CAAC8D,MAAM,CAAC;MACjC;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAzD,GAAA;IAAAC,KAAA,EAKA,SAAA6E,eAAeA,CAACrB,MAAM,EAAEU,OAAO,EAAE;MAC/B,IAAI,CAAC,IAAI,CAACxE,WAAW,CAAC8D,MAAM,CAAC,EAAE;QAC7B,IAAI,CAACD,WAAW,CAACC,MAAM,CAAC;MAC1B;MAEA,IAAI,CAAC9D,WAAW,CAAC8D,MAAM,CAAC,CAACsB,IAAI,CAAC3B,IAAI,CAAC4B,SAAS,CAAC;QAC3ChC,IAAI,EAAE,cAAc;QACpBmB,OAAO,EAAEA;MACX,CAAC,CAAC,CAAC;IACL;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAnE,GAAA;IAAAC,KAAA,EAMA,SAAAgF,eAAeA,CAACxB,MAAM,EAA2B;MAAA,IAAzBmB,IAAI,GAAAM,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;MAAA,IAAEE,QAAQ,GAAAF,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAC7C,IAAI,CAAC,IAAI,CAACvF,WAAW,CAAC8D,MAAM,CAAC,EAAE;QAC7B,IAAI,CAACD,WAAW,CAACC,MAAM,CAAC;MAC1B;MAEA,IAAI,CAAC9D,WAAW,CAAC8D,MAAM,CAAC,CAACsB,IAAI,CAAC3B,IAAI,CAAC4B,SAAS,CAAC;QAC3ChC,IAAI,EAAE,cAAc;QACpB4B,IAAI,EAAEA,IAAI;QACVS,SAAS,EAAED;MACb,CAAC,CAAC,CAAC;IACL;;IAEA;AACF;AACA;AACA;EAHE;IAAApF,GAAA;IAAAC,KAAA,EAIA,SAAAqF,oBAAoBA,CAACC,cAAc,EAAE;MACnC,IAAI,IAAI,CAAC7F,kBAAkB,IAAI,IAAI,CAACA,kBAAkB,CAAC8F,UAAU,KAAK1E,SAAS,CAAC2E,IAAI,EAAE;QACpF,IAAI,CAAC/F,kBAAkB,CAACqF,IAAI,CAAC3B,IAAI,CAAC4B,SAAS,CAAC;UAC1ChC,IAAI,EAAE,WAAW;UACjBJ,EAAE,EAAE2C;QACN,CAAC,CAAC,CAAC;MACL;IACF;;IAEA;AACF;AACA;EAFE;IAAAvF,GAAA;IAAAC,KAAA,EAGA,SAAAyF,wBAAwBA,CAAA,EAAG;MACzB,IAAI,IAAI,CAAChG,kBAAkB,IAAI,IAAI,CAACA,kBAAkB,CAAC8F,UAAU,KAAK1E,SAAS,CAAC2E,IAAI,EAAE;QACpF,IAAI,CAAC/F,kBAAkB,CAACqF,IAAI,CAAC3B,IAAI,CAAC4B,SAAS,CAAC;UAC1ChC,IAAI,EAAE;QACR,CAAC,CAAC,CAAC;MACL;IACF;;IAEA;AACF;AACA;EAFE;IAAAhD,GAAA;IAAAC,KAAA,EAGA,SAAA0F,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACjG,kBAAkB,EAAE;QAC3B,IAAI,CAACA,kBAAkB,CAACwB,KAAK,CAAC,CAAC;QAC/B,IAAI,CAACxB,kBAAkB,GAAG,IAAI;MAChC;MAEAkG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAClG,WAAW,CAAC,CAACmG,OAAO,CAAC,UAAAC,MAAM,EAAI;QAChDA,MAAM,CAAC7E,KAAK,CAAC,CAAC;MAChB,CAAC,CAAC;MACF,IAAI,CAACvB,WAAW,GAAG,CAAC,CAAC;MACrB,IAAI,CAACC,KAAK,GAAG,IAAI;IACnB;EAAC;AAAA,KAGH;AACA,IAAMoG,SAAS,GAAG,IAAIxG,gBAAgB,CAAC,CAAC;AAExC,eAAewG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}