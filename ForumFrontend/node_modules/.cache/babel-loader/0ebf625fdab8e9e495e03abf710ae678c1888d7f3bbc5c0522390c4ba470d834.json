{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _objectWithoutProperties from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"code\", \"status\", \"msg\"];\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost } from '@/api/post';\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  data: function data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      forceRefresh: false,\n      // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false,\n      // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [{\n          required: true,\n          message: '请输入帖子标题',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 100,\n          message: '标题长度在2到100个字符之间',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入帖子内容',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: '内容至少5个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAuthenticated', 'isAdmin', 'userId'])), {}, {\n    isLogin: function isLogin() {\n      return this.isAuthenticated;\n    },\n    isPostAuthor: function isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId;\n    },\n    canManagePost: function canManagePost() {\n      return this.isLogin && (this.isAdmin || this.isPostAuthor);\n    }\n  }),\n  created: function created() {\n    console.log('PostDetail组件created，登录状态:', this.isLogin, '认证状态:', this.isAuthenticated);\n    var postId = this.$route.params.id;\n    if (postId) {\n      console.log('准备获取帖子详情和评论，ID:', postId);\n      this.fetchPostDetail(postId);\n      this.fetchComments(postId);\n    } else {\n      console.log('没有帖子ID，跳转到帖子列表');\n      this.$router.push({\n        name: 'PostList'\n      });\n    }\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取帖子详情\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, code, status, msg, postData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              console.log('组件开始获取帖子详情, ID:', id);\n              _context.next = 5;\n              return getPostDetail(id);\n            case 5:\n              response = _context.sent;\n              console.log('组件收到帖子详情响应:', response);\n\n              // 检查响应是否有效\n              if (response) {\n                _context.next = 12;\n                break;\n              }\n              console.error('帖子详情响应为空');\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n              _this.post = {};\n              return _context.abrupt(\"return\");\n            case 12:\n              // 检查响应中的数据\n              if (response.data) {\n                console.log('使用响应中的data字段:', response.data);\n                _this.post = response.data;\n              } else if (response.code === 0 || response.status === 0) {\n                console.log('响应成功但没有data字段，尝试使用响应本身');\n                // 移除code、status、msg等字段，只保留实际数据\n                code = response.code, status = response.status, msg = response.msg, postData = _objectWithoutProperties(response, _excluded);\n                if (Object.keys(postData).length > 0) {\n                  _this.post = postData;\n                } else {\n                  console.warn('响应中没有有效的帖子数据');\n                  _this.$message.error('获取帖子详情失败，请稍后再试');\n                  _this.post = {};\n                }\n              } else if (_typeof(response) === 'object') {\n                console.log('直接使用响应对象');\n                _this.post = response;\n              } else {\n                console.warn('无法从响应中提取帖子数据');\n                _this.$message.error('获取帖子详情失败，请稍后再试');\n                _this.post = {};\n              }\n\n              // 确保post对象包含必要的字段\n              _this.ensurePostFields();\n\n              // 检查是否已点赞和收藏\n              _this.checkLikeAndFavorite();\n              _context.next = 23;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取帖子详情失败:', _context.t0);\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n              _this.post = {};\n              // 确保post对象包含必要的字段\n              _this.ensurePostFields();\n            case 23:\n              _context.prev = 23;\n              _this.loading = false;\n              return _context.finish(23);\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 17, 23, 26]]);\n      }))();\n    },\n    // 确保帖子对象包含所有必要的字段\n    ensurePostFields: function ensurePostFields() {\n      // 确保post是一个对象\n      if (!this.post || _typeof(this.post) !== 'object') {\n        this.post = {};\n      }\n\n      // 确保必要的字段存在\n      this.post.title = this.post.title || '帖子标题';\n      this.post.content = this.post.content || '帖子内容';\n      this.post.created_at = this.post.created_at || new Date().toISOString();\n      this.post.views = this.post.views || 0;\n      this.post.likes_count = this.post.likes_count || 0;\n      this.post.comments_count = this.post.comments_count || 0;\n      this.post.is_pinned = this.post.is_pinned || false;\n      this.post.is_featured = this.post.is_featured || false;\n\n      // 确保board字段存在\n      if (!this.post.board || _typeof(this.post.board) !== 'object') {\n        this.post.board = {\n          id: 1,\n          name: '默认板块'\n        };\n      } else if (typeof this.post.board === 'number') {\n        // 如果board只是一个ID，转换为对象\n        this.post.board = {\n          id: this.post.board,\n          name: '板块' + this.post.board\n        };\n      }\n\n      // 确保board.name字段存在\n      if (!this.post.board.name) {\n        this.post.board.name = '板块' + this.post.board.id;\n      }\n\n      // 确保user字段存在\n      if (!this.post.user || _typeof(this.post.user) !== 'object') {\n        this.post.user = {\n          id: 1,\n          username: 'user',\n          nickname: '用户',\n          avatar_url: ''\n        };\n      }\n\n      // 确保user.nickname字段存在\n      if (!this.post.user.nickname) {\n        this.post.user.nickname = this.post.user.username || '用户';\n      }\n    },\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite: function checkLikeAndFavorite() {\n      // 未登录用户默认未点赞和未收藏\n      if (!this.isLogin) {\n        console.log('未登录用户，设置为未点赞和未收藏状态');\n        this.isLiked = false;\n        this.isFavorited = false;\n        return;\n      }\n\n      // 登录用户需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      console.log('已登录用户，检查点赞和收藏状态');\n      this.isLiked = false;\n      this.isFavorited = false;\n\n      // TODO: 实现实际的点赞和收藏状态检查\n      // 实现示例:\n      // checkPostLikeStatus(this.post.id).then(response => {\n      //   this.isLiked = response.data.is_liked\n      // })\n      // checkPostFavoriteStatus(this.post.id).then(response => {\n      //   this.isFavorited = response.data.is_favorited\n      // })\n    },\n    // 获取评论列表\n    fetchComments: function fetchComments(postId) {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this2.commentsLoading && !_this2.forceRefresh)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 2:\n              _this2.commentsLoading = true;\n              console.log('开始获取评论列表，ID:', postId, '强制刷新:', _this2.forceRefresh);\n              _context2.prev = 4;\n              _context2.next = 7;\n              return getPostComments(postId, _this2.forceRefresh);\n            case 7:\n              response = _context2.sent;\n              console.log('评论列表响应:', response);\n\n              // 处理响应\n              _this2.processCommentsResponse(response);\n              _context2.next = 18;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.error('获取评论列表失败:', _context2.t0);\n              // 设置空评论列表\n              _this2.comments = [];\n              _this2.commentsTotal = 0;\n\n              // 未登录用户不显示错误提示\n              if (!(_context2.t0.response && _context2.t0.response.status === 401)) {\n                _this2.$message.error('获取评论列表失败，请刷新页面重试');\n              }\n            case 18:\n              _context2.prev = 18;\n              _this2.commentsLoading = false;\n              _this2.forceRefresh = false; // 重置强制刷新标志\n              console.log('评论列表获取完成，重置强制刷新标志');\n              return _context2.finish(18);\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[4, 12, 18, 23]]);\n      }))();\n    },\n    // 处理评论列表响应\n    processCommentsResponse: function processCommentsResponse(response) {\n      // 如果响应为空，设置空评论列表\n      if (!response) {\n        console.log('评论列表响应为空，设置空评论列表');\n        this.comments = [];\n        this.commentsTotal = 0;\n        return;\n      }\n\n      // 提取评论数据和总数\n      var comments = [];\n      var total = 0;\n      if (response.data && response.data.results) {\n        // 标准格式：{data: {results: [...], count: 10}}\n        comments = response.data.results;\n        total = response.data.count || 0;\n      } else if (response.results) {\n        // 直接结果格式：{results: [...], count: 10}\n        comments = response.results;\n        total = response.count || 0;\n      } else if (Array.isArray(response)) {\n        // 数组格式：[...]\n        comments = response;\n        total = response.length;\n      } else if (response.data && Array.isArray(response.data)) {\n        // 数组包装格式：{data: [...]}\n        comments = response.data;\n        total = response.data.length;\n      } else {\n        // 其他情况，设置空评论列表\n        console.log('无法从响应中提取评论数据，设置空评论列表');\n        this.comments = [];\n        this.commentsTotal = 0;\n        return;\n      }\n\n      // 确保评论数据有效\n      comments = comments.filter(function (comment) {\n        return comment && _typeof(comment) === 'object';\n      });\n\n      // 处理评论数据\n      this.comments = comments.map(function (comment) {\n        // 确保replies字段存在\n        var replies = Array.isArray(comment.replies) ? comment.replies : [];\n\n        // 确保user字段存在\n        var user = comment.user || {\n          id: 0,\n          username: 'unknown',\n          nickname: '未知用户',\n          avatar_url: ''\n        };\n\n        // 返回处理后的评论对象\n        return _objectSpread(_objectSpread({}, comment), {}, {\n          replies: replies,\n          user: user\n        });\n      });\n      this.commentsTotal = total;\n\n      // 更新帖子评论数\n      if (this.post) {\n        this.post.comments_count = total;\n      }\n    },\n    // 评论分页变化\n    handleCommentsPageChange: function handleCommentsPageChange(page) {\n      this.commentsQuery.page = page;\n      this.fetchComments(this.post.id);\n    },\n    // 前往板块页面\n    goToBoard: function goToBoard() {\n      if (this.post.board) {\n        this.$router.push({\n          name: 'BoardDetail',\n          params: {\n            id: this.post.board.id\n          }\n        });\n      }\n    },\n    // 点赞帖子\n    handleLike: function handleLike() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this3.isLogin) {\n                _context3.next = 4;\n                break;\n              }\n              _this3.$message.warning('请先登录');\n              _this3.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this3.$route.fullPath\n                }\n              });\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return likePost(_this3.post.id);\n            case 7:\n              response = _context3.sent;\n              if (response.code === 0) {\n                _this3.isLiked = !_this3.isLiked;\n                // 更新点赞数\n                if (_this3.isLiked) {\n                  _this3.post.likes_count++;\n                } else {\n                  _this3.post.likes_count--;\n                }\n                // this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this3.$message.error(response.msg || '操作失败');\n              }\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('点赞操作失败:', _context3.t0);\n              _this3.$message.error('点赞操作失败');\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 11]]);\n      }))();\n    },\n    // 收藏帖子\n    handleFavorite: function handleFavorite() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this4.isLogin) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请先登录');\n              _this4.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this4.$route.fullPath\n                }\n              });\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return favoritePost(_this4.post.id);\n            case 7:\n              response = _context4.sent;\n              if (response.code === 0) {\n                _this4.isFavorited = !_this4.isFavorited;\n                // this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this4.$message.error(response.msg || '操作失败');\n              }\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('收藏操作失败:', _context4.t0);\n              _this4.$message.error('收藏操作失败');\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 11]]);\n      }))();\n    },\n    // 帖子管理操作\n    handleCommand: function handleCommand(command) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = command;\n              _context5.next = _context5.t0 === 'pin' ? 3 : _context5.t0 === 'feature' ? 5 : 7;\n              break;\n            case 3:\n              _this5.handlePinPost();\n              return _context5.abrupt(\"break\", 7);\n            case 5:\n              _this5.handleFeaturePost();\n              return _context5.abrupt(\"break\", 7);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // 编辑帖子\n    handleEditPost: function handleEditPost() {\n      var _this6 = this;\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n\n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n\n      // 进入编辑状态\n      this.isEditing = true;\n\n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(function () {\n        console.log('编辑表单数据设置完成:', _this6.editPostForm);\n      });\n    },\n    // 取消编辑\n    cancelEdit: function cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false;\n      // 重置表单数据\n      this.editPostForm.title = this.post.title;\n      this.editPostForm.content = this.post.content;\n    },\n    // 提交编辑\n    submitEdit: function submitEdit() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var postData, response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (_this7.editPostForm.title.trim()) {\n                _context6.next = 3;\n                break;\n              }\n              _this7.$message.warning('标题不能为空');\n              return _context6.abrupt(\"return\");\n            case 3:\n              if (_this7.editPostForm.content.trim()) {\n                _context6.next = 6;\n                break;\n              }\n              _this7.$message.warning('内容不能为空');\n              return _context6.abrupt(\"return\");\n            case 6:\n              _this7.editPostSubmitting = true;\n              _context6.prev = 7;\n              // 确保发送正确的数据格式\n              postData = {\n                title: _this7.editPostForm.title.trim(),\n                content: _this7.editPostForm.content.trim(),\n                board: _this7.post.board.id // 需要包含板块ID\n              };\n              console.log('提交更新帖子数据:', postData);\n              _context6.next = 12;\n              return updatePost(_this7.post.id, postData);\n            case 12:\n              response = _context6.sent;\n              if (response && response.code === 0) {\n                // 更新成功\n                // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n                // 更新当前页面的帖子数据\n                _this7.post.title = _this7.editPostForm.title;\n                _this7.post.content = _this7.editPostForm.content;\n                // 更新帖子的更新时间\n                if (response.data && response.data.updated_at) {\n                  _this7.post.updated_at = response.data.updated_at;\n                }\n\n                // 强制退出编辑状态\n                console.log('强制退出编辑状态');\n                // 使用直接赋值和延时双重保险确保状态更新\n                _this7.isEditing = false;\n\n                // 如果直接赋值不起作用，使用延时函数再次尝试\n                setTimeout(function () {\n                  if (_this7.isEditing) {\n                    console.log('使用setTimeout再次尝试退出编辑状态');\n                    _this7.isEditing = false;\n                  }\n                  console.log('编辑状态最终设置为:', _this7.isEditing);\n                }, 100);\n              } else {\n                _this7.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '更新失败，请稍后重试');\n                // 失败时也退出编辑状态\n                _this7.isEditing = false;\n                setTimeout(function () {\n                  if (_this7.isEditing) {\n                    _this7.isEditing = false;\n                  }\n                }, 100);\n              }\n              _context6.next = 22;\n              break;\n            case 16:\n              _context6.prev = 16;\n              _context6.t0 = _context6[\"catch\"](7);\n              console.error('更新帖子失败:', _context6.t0);\n              _this7.$message.error('更新帖子失败，请检查网络连接');\n\n              // 出错时也退出编辑状态\n              _this7.isEditing = false;\n              setTimeout(function () {\n                if (_this7.isEditing) {\n                  _this7.isEditing = false;\n                }\n              }, 100);\n            case 22:\n              _context6.prev = 22;\n              _this7.editPostSubmitting = false;\n              return _context6.finish(22);\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[7, 16, 22, 25]]);\n      }))();\n    },\n    // 删除帖子\n    handleDeletePost: function handleDeletePost() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var loading, response;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return _this8.$confirm('确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。', '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 3:\n              // 显示加载状态\n              loading = _this8.$loading({\n                lock: true,\n                text: '正在删除帖子...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context7.prev = 4;\n              _context7.next = 7;\n              return deletePost(_this8.post.id);\n            case 7:\n              response = _context7.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，直接返回上一级路由\n                console.log('帖子删除成功，正在返回上一级路由...');\n                // 返回上一级路由\n                _this8.$router.go(-1);\n              } else {\n                _this8.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context7.next = 17;\n              break;\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](4);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除帖子请求失败:', _context7.t0);\n              _this8.$message.error('删除帖子失败，请检查网络连接');\n            case 17:\n              _context7.next = 22;\n              break;\n            case 19:\n              _context7.prev = 19;\n              _context7.t1 = _context7[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context7.t1 !== 'cancel') {\n                console.error('删除帖子操作异常:', _context7.t1);\n                _this8.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 22:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 19], [4, 12]]);\n      }))();\n    },\n    // 置顶/取消置顶帖子\n    handlePinPost: function handlePinPost() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return pinPost(_this9.post.id);\n            case 3:\n              response = _context8.sent;\n              if (response.code === 0) {\n                _this9.post.is_pinned = !_this9.post.is_pinned;\n                // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this9.$message.error(response.msg || '操作失败');\n              }\n              _context8.next = 11;\n              break;\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('置顶操作失败:', _context8.t0);\n              _this9.$message.error('置顶操作失败');\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 7]]);\n      }))();\n    },\n    // 加精/取消加精帖子\n    handleFeaturePost: function handleFeaturePost() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return featurePost(_this0.post.id);\n            case 3:\n              response = _context9.sent;\n              if (response.code === 0) {\n                _this0.post.is_featured = !_this0.post.is_featured;\n                // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this0.$message.error(response.msg || '操作失败');\n              }\n              _context9.next = 11;\n              break;\n            case 7:\n              _context9.prev = 7;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error('加精操作失败:', _context9.t0);\n              _this0.$message.error('加精操作失败');\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[0, 7]]);\n      }))();\n    },\n    // 提交评论\n    submitComment: function submitComment() {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var response, userInfo, newComment, existingComment;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              if (_this1.isLogin) {\n                _context0.next = 4;\n                break;\n              }\n              _this1.$message.warning('请先登录');\n              _this1.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this1.$route.fullPath\n                }\n              });\n              return _context0.abrupt(\"return\");\n            case 4:\n              if (_this1.commentContent.trim()) {\n                _context0.next = 7;\n                break;\n              }\n              _this1.$message.warning('评论内容不能为空');\n              return _context0.abrupt(\"return\");\n            case 7:\n              _context0.prev = 7;\n              console.log('提交评论数据:', {\n                post: _this1.post.id,\n                content: _this1.commentContent\n              });\n              _context0.next = 11;\n              return createComment({\n                post: _this1.post.id,\n                content: _this1.commentContent\n              });\n            case 11:\n              response = _context0.sent;\n              console.log('评论提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context0.next = 23;\n                break;\n              }\n              // 不显示成功消息\n              console.log('评论发表成功，不显示成功消息');\n\n              // 清空评论内容\n              _this1.commentContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this1.forceRefresh = true;\n              _context0.next = 20;\n              return _this1.fetchComments(_this1.post.id);\n            case 20:\n              // 只有在确认获取到评论数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新评论数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this1.$store.getters.userInfo; // 构建评论对象\n                newComment = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  replies: [],\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新评论添加到评论列表的开头（如果不在列表中）\n                existingComment = _this1.comments.find(function (c) {\n                  return c.id === newComment.id;\n                });\n                if (!existingComment) {\n                  _this1.comments.unshift(newComment);\n                  console.log('新评论已添加到列表');\n                }\n              }\n              _context0.next = 25;\n              break;\n            case 23:\n              console.error('评论发表失败，响应:', response);\n              _this1.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '评论发表失败');\n            case 25:\n              _context0.next = 33;\n              break;\n            case 27:\n              _context0.prev = 27;\n              _context0.t0 = _context0[\"catch\"](7);\n              console.error('评论发表失败:', _context0.t0);\n              _this1.$message.error('评论发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this1.forceRefresh = true;\n              _this1.fetchComments(_this1.post.id);\n            case 33:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, null, [[7, 27]]);\n      }))();\n    },\n    // 回复评论\n    handleReply: function handleReply(comment) {\n      var reply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!this.isLogin) {\n        this.$message.warning('请先登录');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: this.$route.fullPath\n          }\n        });\n        return;\n      }\n      this.replyingTo = comment.id;\n      this.replyContent = reply ? \"@\".concat(reply.user.nickname || reply.user.username, \" \") : '';\n    },\n    // 取消回复\n    cancelReply: function cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    // 提交回复\n    submitReply: function submitReply(comment) {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        var response, userInfo, newReply, existingReply;\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              if (_this10.isLogin) {\n                _context1.next = 4;\n                break;\n              }\n              _this10.$message.warning('请先登录');\n              _this10.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this10.$route.fullPath\n                }\n              });\n              return _context1.abrupt(\"return\");\n            case 4:\n              if (_this10.replyContent.trim()) {\n                _context1.next = 7;\n                break;\n              }\n              _this10.$message.warning('回复内容不能为空');\n              return _context1.abrupt(\"return\");\n            case 7:\n              _context1.prev = 7;\n              console.log('提交回复数据:', {\n                post: _this10.post.id,\n                parent: comment.id,\n                content: _this10.replyContent\n              });\n              _context1.next = 11;\n              return replyComment(_this10.post.id, comment.id, _this10.replyContent);\n            case 11:\n              response = _context1.sent;\n              console.log('回复提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context1.next = 23;\n                break;\n              }\n              // 清空回复状态\n              _this10.replyingTo = null;\n              _this10.replyContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this10.forceRefresh = true;\n              _context1.next = 20;\n              return _this10.fetchComments(_this10.post.id);\n            case 20:\n              // 只有在确认获取到回复数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新回复数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this10.$store.getters.userInfo; // 构建回复对象\n                newReply = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新回复添加到对应评论的回复列表（如果不在列表中）\n                if (!comment.replies) {\n                  comment.replies = [];\n                }\n                existingReply = comment.replies.find(function (r) {\n                  return r.id === newReply.id;\n                });\n                if (!existingReply) {\n                  comment.replies.push(newReply);\n                  console.log('新回复已添加到列表');\n                }\n              }\n              _context1.next = 25;\n              break;\n            case 23:\n              console.error('回复发表失败，响应:', response);\n              _this10.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '回复发表失败');\n            case 25:\n              _context1.next = 33;\n              break;\n            case 27:\n              _context1.prev = 27;\n              _context1.t0 = _context1[\"catch\"](7);\n              console.error('回复发表失败:', _context1.t0);\n              _this10.$message.error('回复发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this10.forceRefresh = true;\n              _this10.fetchComments(_this10.post.id);\n            case 33:\n            case \"end\":\n              return _context1.stop();\n          }\n        }, _callee1, null, [[7, 27]]);\n      }))();\n    },\n    // 判断是否可以管理评论\n    canManageComment: function canManageComment(comment) {\n      return this.isLogin && (this.isAdmin || comment.user && comment.user.id === this.userId);\n    },\n    // 删除评论\n    handleDeleteComment: function handleDeleteComment(comment) {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _error$response$data;\n        var commentId, hasReplies, confirmMessage, loading, response;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              // 打印评论对象，用于调试\n              console.log('要删除的评论对象:', comment);\n\n              // 确保评论对象和ID存在\n              if (comment) {\n                _context10.next = 5;\n                break;\n              }\n              _this11.$message.error('评论数据无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 5:\n              // 获取评论ID，支持字符串和数字类型\n              commentId = comment.id ? parseInt(comment.id) : null;\n              if (commentId) {\n                _context10.next = 9;\n                break;\n              }\n              _this11.$message.error('评论ID无效，无法删除');\n              return _context10.abrupt(\"return\");\n            case 9:\n              // 判断是否有回复，提供更详细的确认信息\n              hasReplies = comment.replies && comment.replies.length > 0;\n              confirmMessage = hasReplies ? \"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u8FD9\\u6761\\u8BC4\\u8BBA\\u5417\\uFF1F\\u5220\\u9664\\u540E\\u5C06\\u540C\\u65F6\\u5220\\u9664\\u8BE5\\u8BC4\\u8BBA\\u4E0B\\u7684 \".concat(comment.replies.length, \" \\u6761\\u56DE\\u590D\\uFF0C\\u4E14\\u65E0\\u6CD5\\u6062\\u590D\\u3002\") : '确定要删除这条评论吗？删除后将无法恢复。';\n              _context10.next = 13;\n              return _this11.$confirm(confirmMessage, '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 13:\n              // 显示加载状态\n              loading = _this11.$loading({\n                lock: true,\n                text: '正在删除评论...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context10.prev = 14;\n              console.log('发送删除评论请求，ID:', commentId);\n              _context10.next = 18;\n              return deleteComment(commentId);\n            case 18:\n              response = _context10.sent;\n              loading.close(); // 关闭加载状态\n\n              // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n              if (!(response.code === 0 || response.status === 0)) {\n                _context10.next = 28;\n                break;\n              }\n              console.log('评论删除成功，响应:', response);\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this11.forceRefresh = true;\n              _context10.next = 26;\n              return _this11.fetchComments(_this11.post.id);\n            case 26:\n              _context10.next = 33;\n              break;\n            case 28:\n              console.error('评论删除失败，响应:', response);\n              _this11.$message.error(response.msg || '删除失败，请稍后重试');\n\n              // 如果删除失败，也刷新评论列表恢复原状\n              _this11.forceRefresh = true;\n              _context10.next = 33;\n              return _this11.fetchComments(_this11.post.id);\n            case 33:\n              _context10.next = 54;\n              break;\n            case 35:\n              _context10.prev = 35;\n              _context10.t0 = _context10[\"catch\"](14);\n              loading.close();\n              console.error('删除评论失败:', _context10.t0);\n\n              // 如果删除失败，刷新评论列表恢复原状\n              _this11.forceRefresh = true;\n              _context10.next = 42;\n              return _this11.fetchComments(_this11.post.id);\n            case 42:\n              if (!_context10.t0.response) {\n                _context10.next = 53;\n                break;\n              }\n              _context10.t1 = _context10.t0.response.status;\n              _context10.next = _context10.t1 === 403 ? 46 : _context10.t1 === 404 ? 48 : 50;\n              break;\n            case 46:\n              _this11.$message.error('您没有权限删除此评论');\n              return _context10.abrupt(\"break\", 51);\n            case 48:\n              _this11.$message.error('评论不存在或已被删除');\n              return _context10.abrupt(\"break\", 51);\n            case 50:\n              _this11.$message.error(((_error$response$data = _context10.t0.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || '删除失败，请稍后重试');\n            case 51:\n              _context10.next = 54;\n              break;\n            case 53:\n              if (_context10.t0.request) {\n                _this11.$message.error('网络连接失败，请检查网络后重试');\n              } else {\n                _this11.$message.error('删除失败，请稍后重试');\n              }\n            case 54:\n              _context10.next = 62;\n              break;\n            case 56:\n              _context10.prev = 56;\n              _context10.t2 = _context10[\"catch\"](0);\n              if (!(_context10.t2 === 'cancel')) {\n                _context10.next = 60;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 60:\n              console.error('删除评论操作失败:', _context10.t2);\n              _this11.$message.error('操作失败，请稍后重试');\n            case 62:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[0, 56], [14, 35]]);\n      }))();\n    },\n    handleContentChange: function handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n};","map":{"version":3,"names":["getPostDetail","likePost","favoritePost","pinPost","featurePost","deletePost","updatePost","getPostComments","createComment","replyComment","deleteComment","formatDateTime","mapGetters","RichTextEditor","formatDate","date","name","components","data","loading","commentsLoading","post","isLiked","isFavorited","comments","commentsTotal","commentsQuery","page","limit","commentContent","replyingTo","replyContent","forceRefresh","isEditing","editPostSubmitting","editPostForm","title","content","postRules","required","message","trigger","min","max","computed","_objectSpread","isLogin","isAuthenticated","isPostAuthor","user","id","userId","canManagePost","isAdmin","created","console","log","postId","$route","params","fetchPostDetail","fetchComments","$router","push","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","code","status","msg","postData","wrap","_callee$","_context","prev","next","sent","error","$message","abrupt","_objectWithoutProperties","_excluded","Object","keys","length","warn","_typeof","ensurePostFields","checkLikeAndFavorite","t0","finish","stop","created_at","Date","toISOString","views","likes_count","comments_count","is_pinned","is_featured","board","username","nickname","avatar_url","_this2","_callee2","_callee2$","_context2","Promise","resolve","processCommentsResponse","total","results","count","Array","isArray","filter","comment","map","replies","handleCommentsPageChange","goToBoard","handleLike","_this3","_callee3","_callee3$","_context3","warning","query","redirect","fullPath","handleFavorite","_this4","_callee4","_callee4$","_context4","handleCommand","command","_this5","_callee5","_callee5$","_context5","handlePinPost","handleFeaturePost","handleEditPost","_this6","$nextTick","cancelEdit","submitEdit","_this7","_callee6","_callee6$","_context6","trim","updated_at","setTimeout","handleDeletePost","_this8","_callee7","_callee7$","_context7","$confirm","confirmButtonText","cancelButtonText","type","distinguishCancelAndClose","closeOnClickModal","$loading","lock","text","spinner","background","close","go","t1","_this9","_callee8","_callee8$","_context8","_this0","_callee9","_callee9$","_context9","submitComment","_this1","_callee0","userInfo","newComment","existingComment","_callee0$","_context0","$store","getters","find","c","unshift","handleReply","reply","arguments","undefined","concat","cancelReply","submitReply","_this10","_callee1","newReply","existingReply","_callee1$","_context1","parent","r","canManageComment","handleDeleteComment","_this11","_callee10","_error$response$data","commentId","hasReplies","confirmMessage","_callee10$","_context10","parseInt","request","t2","handleContentChange","value"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <!-- 非编辑状态下的标题 -->\n          <h1 v-if=\"!isEditing\" class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <!-- 编辑状态下的标题输入框 -->\n          <div v-else class=\"post-title-edit\">\n            <el-input v-model=\"editPostForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n          </div>\n\n          <div class=\"post-meta\">\n            <div class=\"post-author\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <i class=\"el-icon-s-grid\"></i>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 非编辑状态下的内容 -->\n        <div v-if=\"!isEditing\" class=\"post-content\" v-html=\"post.content\"></div>\n\n        <!-- 编辑状态下的内容输入框 -->\n        <div v-else class=\"post-content-edit\">\n          <el-input\n            v-model=\"editPostForm.title\"\n            placeholder=\"请输入帖子标题\"\n          ></el-input>\n          <rich-text-editor\n            v-model=\"editPostForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n          <!-- 编辑状态下的操作按钮 -->\n          <div class=\"edit-actions\">\n            <el-button @click=\"cancelEdit\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitEdit\" :loading=\"editPostSubmitting\">提交</el-button>\n          </div>\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n            <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n            <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditPost\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeletePost\"\n              >\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-star-on\"\n                @click=\"handleLike\"\n              >\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-collection-tag\"\n                @click=\"handleFavorite\"\n              >\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\" icon=\"el-icon-setting\">\n                管理\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <i class=\"el-icon-chat-dot-round\"></i>\n        <p v-if=\"isLogin\">暂无评论，快来发表第一条评论吧！</p>\n        <p v-else>暂无评论，登录后可以发表评论</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\n          <div class=\"comment-header\">\n            <div class=\"comment-user\">\n              <el-avatar :size=\"40\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"comment-user-info\">\n                <div class=\"comment-username\">{{ comment.user.nickname || comment.user.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\" v-if=\"canManageComment(comment)\">\n              <el-button type=\"link\" size=\"small\" @click=\"handleDeleteComment(comment)\">删除</el-button>\n            </div>\n          </div>\n          <div class=\"comment-content\">{{ comment.content }}</div>\n          <div class=\"comment-footer\">\n            <el-button v-if=\"isLogin\" type=\"link\" size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button type=\"primary\" size=\"small\" @click=\"submitReply(comment)\" :disabled=\"!replyContent.trim()\">提交回复</el-button>\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div v-for=\"reply in comment.replies\" :key=\"reply.id\" class=\"reply-item\">\n              <div class=\"reply-header\">\n                <div class=\"reply-user\">\n                  <el-avatar :size=\"30\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"reply-user-info\">\n                    <div class=\"reply-username\">{{ reply.user.nickname || reply.user.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\" v-if=\"canManageComment(reply)\">\n                  <el-button type=\"text\" size=\"small\" @click=\"handleDeleteComment(reply)\">删除</el-button>\n                </div>\n              </div>\n              <div class=\"reply-content\">{{ reply.content }}</div>\n              <div class=\"reply-footer\">\n                <el-button v-if=\"isLogin\" type=\"link\" size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          :current-page=\"commentsQuery.page\"\n          @update:current-page=\"val => commentsQuery.page = val\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost } from '@/api/post'\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n\n      forceRefresh: false, // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false, // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '标题长度在2到100个字符之间', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 5, message: '内容至少5个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    console.log('PostDetail组件created，登录状态:', this.isLogin, '认证状态:', this.isAuthenticated)\n    const postId = this.$route.params.id\n    if (postId) {\n      console.log('准备获取帖子详情和评论，ID:', postId)\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      console.log('没有帖子ID，跳转到帖子列表')\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        console.log('组件开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        console.log('组件收到帖子详情响应:', response)\n\n        // 检查响应是否有效\n        if (!response) {\n          console.error('帖子详情响应为空')\n          this.$message.error('获取帖子详情失败，请稍后再试')\n          this.post = {}\n          return\n        }\n\n        // 检查响应中的数据\n        if (response.data) {\n          console.log('使用响应中的data字段:', response.data)\n          this.post = response.data\n        } else if (response.code === 0 || response.status === 0) {\n          console.log('响应成功但没有data字段，尝试使用响应本身')\n          // 移除code、status、msg等字段，只保留实际数据\n          const { code, status, msg, ...postData } = response\n          if (Object.keys(postData).length > 0) {\n            this.post = postData\n          } else {\n            console.warn('响应中没有有效的帖子数据')\n            this.$message.error('获取帖子详情失败，请稍后再试')\n            this.post = {}\n          }\n        } else if (typeof response === 'object') {\n          console.log('直接使用响应对象')\n          this.post = response\n        } else {\n          console.warn('无法从响应中提取帖子数据')\n          this.$message.error('获取帖子详情失败，请稍后再试')\n          this.post = {}\n        }\n        \n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n        \n        // 检查是否已点赞和收藏\n        this.checkLikeAndFavorite()\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败，请稍后再试')\n        this.post = {}\n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 确保帖子对象包含所有必要的字段\n    ensurePostFields() {\n      // 确保post是一个对象\n      if (!this.post || typeof this.post !== 'object') {\n        this.post = {}\n      }\n      \n      // 确保必要的字段存在\n      this.post.title = this.post.title || '帖子标题'\n      this.post.content = this.post.content || '帖子内容'\n      this.post.created_at = this.post.created_at || new Date().toISOString()\n      this.post.views = this.post.views || 0\n      this.post.likes_count = this.post.likes_count || 0\n      this.post.comments_count = this.post.comments_count || 0\n      this.post.is_pinned = this.post.is_pinned || false\n      this.post.is_featured = this.post.is_featured || false\n      \n      // 确保board字段存在\n      if (!this.post.board || typeof this.post.board !== 'object') {\n        this.post.board = { id: 1, name: '默认板块' }\n      } else if (typeof this.post.board === 'number') {\n        // 如果board只是一个ID，转换为对象\n        this.post.board = { id: this.post.board, name: '板块' + this.post.board }\n      }\n      \n      // 确保board.name字段存在\n      if (!this.post.board.name) {\n        this.post.board.name = '板块' + this.post.board.id\n      }\n      \n      // 确保user字段存在\n      if (!this.post.user || typeof this.post.user !== 'object') {\n        this.post.user = {\n          id: 1,\n          username: 'user',\n          nickname: '用户',\n          avatar_url: ''\n        }\n      }\n      \n      // 确保user.nickname字段存在\n      if (!this.post.user.nickname) {\n        this.post.user.nickname = this.post.user.username || '用户'\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite() {\n      // 未登录用户默认未点赞和未收藏\n      if (!this.isLogin) {\n        console.log('未登录用户，设置为未点赞和未收藏状态')\n        this.isLiked = false\n        this.isFavorited = false\n        return\n      }\n      \n      // 登录用户需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      console.log('已登录用户，检查点赞和收藏状态')\n      this.isLiked = false\n      this.isFavorited = false\n      \n      // TODO: 实现实际的点赞和收藏状态检查\n      // 实现示例:\n      // checkPostLikeStatus(this.post.id).then(response => {\n      //   this.isLiked = response.data.is_liked\n      // })\n      // checkPostFavoriteStatus(this.post.id).then(response => {\n      //   this.isFavorited = response.data.is_favorited\n      // })\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n      console.log('开始获取评论列表，ID:', postId, '强制刷新:', this.forceRefresh)\n\n      try {\n        // 使用API函数的forceRefresh参数\n        const response = await getPostComments(postId, this.forceRefresh)\n        console.log('评论列表响应:', response)\n        \n        // 处理响应\n        this.processCommentsResponse(response)\n      } catch (error) {\n        console.error('获取评论列表失败:', error)\n        // 设置空评论列表\n        this.comments = []\n        this.commentsTotal = 0\n        \n        // 未登录用户不显示错误提示\n        if (!(error.response && error.response.status === 401)) {\n          this.$message.error('获取评论列表失败，请刷新页面重试')\n        }\n      } finally {\n        this.commentsLoading = false\n        this.forceRefresh = false // 重置强制刷新标志\n        console.log('评论列表获取完成，重置强制刷新标志')\n      }\n    },\n    \n    // 处理评论列表响应\n    processCommentsResponse(response) {\n      // 如果响应为空，设置空评论列表\n      if (!response) {\n        console.log('评论列表响应为空，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 提取评论数据和总数\n      let comments = []\n      let total = 0\n      \n      if (response.data && response.data.results) {\n        // 标准格式：{data: {results: [...], count: 10}}\n        comments = response.data.results\n        total = response.data.count || 0\n      } else if (response.results) {\n        // 直接结果格式：{results: [...], count: 10}\n        comments = response.results\n        total = response.count || 0\n      } else if (Array.isArray(response)) {\n        // 数组格式：[...]\n        comments = response\n        total = response.length\n      } else if (response.data && Array.isArray(response.data)) {\n        // 数组包装格式：{data: [...]}\n        comments = response.data\n        total = response.data.length\n      } else {\n        // 其他情况，设置空评论列表\n        console.log('无法从响应中提取评论数据，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 确保评论数据有效\n      comments = comments.filter(comment => comment && typeof comment === 'object')\n      \n      // 处理评论数据\n      this.comments = comments.map(comment => {\n        // 确保replies字段存在\n        const replies = Array.isArray(comment.replies) ? comment.replies : []\n        \n        // 确保user字段存在\n        const user = comment.user || {\n          id: 0,\n          username: 'unknown',\n          nickname: '未知用户',\n          avatar_url: ''\n        }\n        \n        // 返回处理后的评论对象\n        return {\n          ...comment,\n          replies,\n          user\n        }\n      })\n      \n      this.commentsTotal = total\n      \n      // 更新帖子评论数\n      if (this.post) {\n        this.post.comments_count = total\n      }\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        if (response.code === 0) {\n          this.isLiked = !this.isLiked\n          // 更新点赞数\n          if (this.isLiked) {\n            this.post.likes_count++\n          } else {\n            this.post.likes_count--\n          }\n          // this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('点赞操作失败:', error)\n        this.$message.error('点赞操作失败')\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await favoritePost(this.post.id)\n        if (response.code === 0) {\n          this.isFavorited = !this.isFavorited\n          // this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        this.$message.error('收藏操作失败')\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    },\n\n    // 编辑帖子\n    handleEditPost() {\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n      \n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n      \n      // 进入编辑状态\n      this.isEditing = true;\n      \n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(() => {\n        console.log('编辑表单数据设置完成:', this.editPostForm);\n      });\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false\n      // 重置表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n    },\n\n    // 提交编辑\n    async submitEdit() {\n      // 表单验证\n      if (!this.editPostForm.title.trim()) {\n        this.$message.warning('标题不能为空')\n        return\n      }\n\n      if (!this.editPostForm.content.trim()) {\n        this.$message.warning('内容不能为空')\n        return\n      }\n\n      this.editPostSubmitting = true\n      try {\n        // 确保发送正确的数据格式\n        const postData = {\n          title: this.editPostForm.title.trim(),\n          content: this.editPostForm.content.trim(),\n          board: this.post.board.id // 需要包含板块ID\n        }\n\n        console.log('提交更新帖子数据:', postData)\n\n        const response = await updatePost(this.post.id, postData)\n\n        if (response && response.code === 0) {\n          // 更新成功\n          // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n          // 更新当前页面的帖子数据\n          this.post.title = this.editPostForm.title\n          this.post.content = this.editPostForm.content\n          // 更新帖子的更新时间\n          if (response.data && response.data.updated_at) {\n            this.post.updated_at = response.data.updated_at\n          }\n\n          // 强制退出编辑状态\n          console.log('强制退出编辑状态')\n          // 使用直接赋值和延时双重保险确保状态更新\n          this.isEditing = false\n\n          // 如果直接赋值不起作用，使用延时函数再次尝试\n          setTimeout(() => {\n            if (this.isEditing) {\n              console.log('使用setTimeout再次尝试退出编辑状态')\n              this.isEditing = false\n            }\n            console.log('编辑状态最终设置为:', this.isEditing)\n          }, 100)\n        } else {\n          this.$message.error(response?.msg || '更新失败，请稍后重试')\n          // 失败时也退出编辑状态\n          this.isEditing = false\n          setTimeout(() => {\n            if (this.isEditing) {\n              this.isEditing = false\n            }\n          }, 100)\n        }\n      } catch (error) {\n        console.error('更新帖子失败:', error)\n        this.$message.error('更新帖子失败，请检查网络连接')\n\n        // 出错时也退出编辑状态\n        this.isEditing = false\n        setTimeout(() => {\n          if (this.isEditing) {\n            this.isEditing = false\n          }\n        }, 100)\n      } finally {\n        this.editPostSubmitting = false\n      }\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回上一级路由\n            console.log('帖子删除成功，正在返回上一级路由...')\n            // 返回上一级路由\n            this.$router.go(-1)\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        console.log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到评论数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新评论数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              replies: [],\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新评论添加到评论列表的开头（如果不在列表中）\n            const existingComment = this.comments.find(c => c.id === newComment.id)\n            if (!existingComment) {\n              this.comments.unshift(newComment);\n              console.log('新评论已添加到列表')\n            }\n          }\n        } else {\n          console.error('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        console.error('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        console.log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到回复数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新回复数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新回复添加到对应评论的回复列表（如果不在列表中）\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            \n            const existingReply = comment.replies.find(r => r.id === newReply.id)\n            if (!existingReply) {\n              comment.replies.push(newReply);\n              console.log('新回复已添加到列表')\n            }\n          }\n        } else {\n          console.error('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        console.error('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 打印评论对象，用于调试\n        console.log('要删除的评论对象:', comment)\n\n        // 确保评论对象和ID存在\n        if (!comment) {\n          this.$message.error('评论数据无效，无法删除')\n          return\n        }\n\n        // 获取评论ID，支持字符串和数字类型\n        const commentId = comment.id ? parseInt(comment.id) : null\n        if (!commentId) {\n          this.$message.error('评论ID无效，无法删除')\n          return\n        }\n\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          console.log('发送删除评论请求，ID:', commentId)\n          const response = await deleteComment(commentId)\n          loading.close() // 关闭加载状态\n\n          // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n          if (response.code === 0 || response.status === 0) {\n            console.log('评论删除成功，响应:', response)\n            \n            // 无论如何，强制刷新评论列表以确保同步\n            console.log('强制刷新评论列表以确保与数据库同步')\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          } else {\n            console.error('评论删除失败，响应:', response)\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n            \n            // 如果删除失败，也刷新评论列表恢复原状\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          }\n        } catch (error) {\n          loading.close()\n          console.error('删除评论失败:', error)\n          \n          // 如果删除失败，刷新评论列表恢复原状\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n          \n          // 根据错误类型显示不同的错误信息\n          if (error.response) {\n            switch (error.response.status) {\n              case 403:\n                this.$message.error('您没有权限删除此评论')\n                break\n              case 404:\n                this.$message.error('评论不存在或已被删除')\n                break\n              default:\n                this.$message.error(error.response.data?.msg || '删除失败，请稍后重试')\n            }\n          } else if (error.request) {\n            this.$message.error('网络连接失败，请检查网络后重试')\n          } else {\n            this.$message.error('删除失败，请稍后重试')\n          }\n        }\n      } catch (error) {\n        // 用户取消删除操作\n        if (error === 'cancel') {\n          return\n        }\n        console.error('删除评论操作失败:', error)\n        this.$message.error('操作失败，请稍后重试')\n      }\n    },\n\n    handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  margin-top: 20px;\n  line-height: 1.6;\n  word-break: break-word;\n}\n\n.post-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  margin: 10px 0;\n}\n\n.post-content :deep(p) {\n  margin: 10px 0;\n}\n\n.post-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 10px 0;\n}\n\n.post-content :deep(th),\n.post-content :deep(td) {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\n.post-content :deep(th) {\n  background-color: #f5f5f5;\n}\n\n.post-content :deep(blockquote) {\n  margin: 10px 0;\n  padding: 10px 20px;\n  border-left: 4px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.post-content :deep(pre) {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n}\n\n.post-content :deep(code) {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  margin-top: 10px;\n  color: #909399;\n  font-size: 14px;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.login-tip a:hover {\n  text-decoration: underline;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n/* 编辑相关样式 */\n.post-title-edit {\n  margin-bottom: 15px;\n}\n\n.post-content-edit {\n  margin-bottom: 20px;\n}\n\n.edit-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 15px;\n  gap: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}