{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.error.to-string.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar index$5 = require('../../button/index.js');\nvar index$7 = require('../../icon/index.js');\nvar index$3 = require('../../tooltip/index.js');\nvar index$4 = require('../../input/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar alphaSlider = require('./components/alpha-slider.js');\nvar hueSlider = require('./components/hue-slider.js');\nvar predefine = require('./components/predefine.js');\nvar svPanel = require('./components/sv-panel.js');\nvar color = require('./utils/color.js');\nvar colorPicker = require('./color-picker.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$6 = require('../../../directives/click-outside/index.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar useFormItem = require('../../form/src/hooks/use-form-item.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index$2 = require('../../../hooks/use-focus-controller/index.js');\nvar event = require('../../../constants/event.js');\nvar error = require('../../../utils/error.js');\nvar aria = require('../../../constants/aria.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElColorPicker\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: colorPicker.colorPickerProps,\n  emits: colorPicker.colorPickerEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var _index$useLocale = index.useLocale(),\n      t = _index$useLocale.t;\n    var ns = index$1.useNamespace(\"color\");\n    var _useFormItem$useFormI = useFormItem.useFormItem(),\n      formItem = _useFormItem$useFormI.formItem;\n    var colorSize = useFormCommonProps.useFormSize();\n    var colorDisabled = useFormCommonProps.useFormDisabled();\n    var _useFormItem$useFormI2 = useFormItem.useFormItemInputId(props, {\n        formItemContext: formItem\n      }),\n      buttonId = _useFormItem$useFormI2.inputId,\n      isLabeledByFormItem = _useFormItem$useFormI2.isLabeledByFormItem;\n    var hue = vue.ref();\n    var sv = vue.ref();\n    var alpha = vue.ref();\n    var popper = vue.ref();\n    var triggerRef = vue.ref();\n    var inputRef = vue.ref();\n    var _index$2$useFocusCont = index$2.useFocusController(triggerRef, {\n        beforeFocus: function beforeFocus() {\n          return colorDisabled.value;\n        },\n        beforeBlur: function beforeBlur(event) {\n          var _a;\n          return (_a = popper.value) == null ? void 0 : _a.isFocusInsideContent(event);\n        },\n        afterBlur: function afterBlur() {\n          setShowPicker(false);\n          resetColor();\n        }\n      }),\n      isFocused = _index$2$useFocusCont.isFocused,\n      handleFocus = _index$2$useFocusCont.handleFocus,\n      handleBlur = _index$2$useFocusCont.handleBlur;\n    var shouldActiveChange = true;\n    var color$1 = vue.reactive(new color[\"default\"]({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    var showPicker = vue.ref(false);\n    var showPanelColor = vue.ref(false);\n    var customInput = vue.ref(\"\");\n    var displayedColor = vue.computed(function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color$1, props.showAlpha);\n    });\n    var currentColor = vue.computed(function () {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color$1.value;\n    });\n    var buttonAriaLabel = vue.computed(function () {\n      return !isLabeledByFormItem.value ? props.ariaLabel || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    var buttonAriaLabelledby = vue.computed(function () {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    var btnKls = vue.computed(function () {\n      return [ns.b(\"picker\"), ns.is(\"disabled\", colorDisabled.value), ns.bm(\"picker\", colorSize.value), ns.is(\"focused\", isFocused.value)];\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof color[\"default\"])) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      var _color2$toRgb = color2.toRgb(),\n        r = _color2$toRgb.r,\n        g = _color2$toRgb.g,\n        b = _color2$toRgb.b;\n      return showAlpha ? \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(color2.get(\"alpha\") / 100, \")\") : \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    var debounceSetShowPicker = lodashUnified.debounce(setShowPicker, 100, {\n      leading: true\n    });\n    function show() {\n      if (colorDisabled.value) return;\n      setShowPicker(true);\n    }\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      vue.nextTick(function () {\n        if (props.modelValue) {\n          color$1.fromString(props.modelValue);\n        } else {\n          color$1.value = \"\";\n          vue.nextTick(function () {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      if (showPicker.value) {\n        resetColor();\n      }\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color$1.fromString(customInput.value);\n    }\n    function confirmValue() {\n      var value = color$1.value;\n      emit(event.UPDATE_MODEL_EVENT, value);\n      emit(event.CHANGE_EVENT, value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n          return error.debugWarn(err);\n        });\n      }\n      debounceSetShowPicker(false);\n      vue.nextTick(function () {\n        var newColor = new color[\"default\"]({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color$1.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(event.UPDATE_MODEL_EVENT, null);\n      emit(event.CHANGE_EVENT, null);\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n          return error.debugWarn(err);\n        });\n      }\n      resetColor();\n    }\n    function handleClickOutside() {\n      if (!showPicker.value) return;\n      hide();\n      isFocused.value && focus();\n    }\n    function handleEsc(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      setShowPicker(false);\n      resetColor();\n    }\n    function handleKeyDown(event) {\n      switch (event.code) {\n        case aria.EVENT_CODE.enter:\n        case aria.EVENT_CODE.numpadEnter:\n        case aria.EVENT_CODE.space:\n          event.preventDefault();\n          event.stopPropagation();\n          show();\n          inputRef.value.focus();\n          break;\n        case aria.EVENT_CODE.esc:\n          handleEsc(event);\n          break;\n      }\n    }\n    function focus() {\n      triggerRef.value.focus();\n    }\n    function blur() {\n      triggerRef.value.blur();\n    }\n    vue.onMounted(function () {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    vue.watch(function () {\n      return props.modelValue;\n    }, function (newVal) {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color$1.value) {\n        shouldActiveChange = false;\n        color$1.fromString(newVal);\n      }\n    });\n    vue.watch(function () {\n      return [props.colorFormat, props.showAlpha];\n    }, function () {\n      color$1.enableAlpha = props.showAlpha;\n      color$1.format = props.colorFormat || color$1.format;\n      color$1.doOnChange();\n      emit(event.UPDATE_MODEL_EVENT, color$1.value);\n    });\n    vue.watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    vue.watch(function () {\n      return color$1.value;\n    }, function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    vue.watch(function () {\n      return showPicker.value;\n    }, function () {\n      vue.nextTick(function () {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    vue.provide(colorPicker.colorPickerContextKey, {\n      currentColor: currentColor\n    });\n    expose({\n      color: color$1,\n      show: show,\n      hide: hide,\n      focus: focus,\n      blur: blur\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$3.ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [vue.unref(ns).be(\"picker\", \"panel\"), vue.unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        teleported: _ctx.teleported,\n        transition: \"\".concat(vue.unref(ns).namespace.value, \"-zoom-in-top\"),\n        persistent: \"\",\n        onHide: function onHide($event) {\n          return setShowPicker(false);\n        }\n      }, {\n        content: vue.withCtx(function () {\n          return [vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", {\n            onKeydown: vue.withKeys(handleEsc, [\"esc\"])\n          }, [vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"main-wrapper\"))\n          }, [vue.createVNode(hueSlider[\"default\"], {\n            ref_key: \"hue\",\n            ref: hue,\n            \"class\": \"hue-slider\",\n            color: vue.unref(color$1),\n            vertical: \"\"\n          }, null, 8, [\"color\"]), vue.createVNode(svPanel[\"default\"], {\n            ref_key: \"sv\",\n            ref: sv,\n            color: vue.unref(color$1)\n          }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (vue.openBlock(), vue.createBlock(alphaSlider[\"default\"], {\n            key: 0,\n            ref_key: \"alpha\",\n            ref: alpha,\n            color: vue.unref(color$1)\n          }, null, 8, [\"color\"])) : vue.createCommentVNode(\"v-if\", true), _ctx.predefine ? (vue.openBlock(), vue.createBlock(predefine[\"default\"], {\n            key: 1,\n            ref: \"predefine\",\n            \"enable-alpha\": _ctx.showAlpha,\n            color: vue.unref(color$1),\n            colors: _ctx.predefine\n          }, null, 8, [\"enable-alpha\", \"color\", \"colors\"])) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"btns\"))\n          }, [vue.createElementVNode(\"span\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"value\"))\n          }, [vue.createVNode(vue.unref(index$4.ElInput), {\n            ref_key: \"inputRef\",\n            ref: inputRef,\n            modelValue: customInput.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return customInput.value = $event;\n            },\n            \"validate-event\": false,\n            size: \"small\",\n            onKeyup: vue.withKeys(handleConfirm, [\"enter\"]),\n            onBlur: handleConfirm\n          }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"onKeyup\"])], 2), vue.createVNode(vue.unref(index$5.ElButton), {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"link-btn\")),\n            text: \"\",\n            size: \"small\",\n            onClick: clear\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createTextVNode(vue.toDisplayString(vue.unref(t)(\"el.colorpicker.clear\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"class\"]), vue.createVNode(vue.unref(index$5.ElButton), {\n            plain: \"\",\n            size: \"small\",\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"btn\")),\n            onClick: confirmValue\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createTextVNode(vue.toDisplayString(vue.unref(t)(\"el.colorpicker.confirm\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"class\"])], 2)], 40, [\"onKeydown\"])), [[vue.unref(index$6[\"default\"]), handleClickOutside, triggerRef.value]])];\n        }),\n        \"default\": vue.withCtx(function () {\n          return [vue.createElementVNode(\"div\", vue.mergeProps({\n            id: vue.unref(buttonId),\n            ref_key: \"triggerRef\",\n            ref: triggerRef\n          }, _ctx.$attrs, {\n            \"class\": vue.unref(btnKls),\n            role: \"button\",\n            \"aria-label\": vue.unref(buttonAriaLabel),\n            \"aria-labelledby\": vue.unref(buttonAriaLabelledby),\n            \"aria-description\": vue.unref(t)(\"el.colorpicker.description\", {\n              color: _ctx.modelValue || \"\"\n            }),\n            \"aria-disabled\": vue.unref(colorDisabled),\n            tabindex: vue.unref(colorDisabled) ? void 0 : _ctx.tabindex,\n            onKeydown: handleKeyDown,\n            onFocus: vue.unref(handleFocus),\n            onBlur: vue.unref(handleBlur)\n          }), [vue.unref(colorDisabled) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n            key: 0,\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"picker\", \"mask\"))\n          }, null, 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"picker\", \"trigger\")),\n            onClick: handleTrigger\n          }, [vue.createElementVNode(\"span\", {\n            \"class\": vue.normalizeClass([vue.unref(ns).be(\"picker\", \"color\"), vue.unref(ns).is(\"alpha\", _ctx.showAlpha)])\n          }, [vue.createElementVNode(\"span\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).be(\"picker\", \"color-inner\")),\n            style: vue.normalizeStyle({\n              backgroundColor: vue.unref(displayedColor)\n            })\n          }, [vue.withDirectives(vue.createVNode(vue.unref(index$7.ElIcon), {\n            \"class\": vue.normalizeClass([vue.unref(ns).be(\"picker\", \"icon\"), vue.unref(ns).is(\"icon-arrow-down\")])\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createVNode(vue.unref(iconsVue.ArrowDown))];\n            }),\n            _: 1\n          }, 8, [\"class\"]), [[vue.vShow, _ctx.modelValue || showPanelColor.value]]), vue.withDirectives(vue.createVNode(vue.unref(index$7.ElIcon), {\n            \"class\": vue.normalizeClass([vue.unref(ns).be(\"picker\", \"empty\"), vue.unref(ns).is(\"icon-close\")])\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createVNode(vue.unref(iconsVue.Close))];\n            }),\n            _: 1\n          }, 8, [\"class\"]), [[vue.vShow, !_ctx.modelValue && !showPanelColor.value]])], 6)], 2)], 2)], 16, [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"aria-disabled\", \"tabindex\", \"onFocus\", \"onBlur\"])];\n        }),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"teleported\", \"transition\", \"onHide\"]);\n    };\n  }\n}));\nvar ColorPicker = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"color-picker.vue\"]]);\nexports[\"default\"] = ColorPicker;","map":{"version":3,"names":["name","_index$useLocale","index","useLocale","t","ns","index$1","useNamespace","_useFormItem$useFormI","useFormItem","formItem","colorSize","useFormCommonProps","useFormSize","colorDisabled","useFormDisabled","_useFormItem$useFormI2","useFormItemInputId","props","formItemContext","buttonId","inputId","isLabeledByFormItem","hue","vue","ref","sv","alpha","popper","triggerRef","inputRef","_index$2$useFocusCont","index$2","useFocusController","beforeFocus","value","beforeBlur","event","_a","isFocusInsideContent","afterBlur","setShowPicker","resetColor","isFocused","handleFocus","handleBlur","shouldActiveChange","color$1","reactive","color","enableAlpha","showAlpha","format","colorFormat","modelValue","showPicker","showPanelColor","customInput","displayedColor","computed","displayedRgb","currentColor","buttonAriaLabel","ariaLabel","buttonAriaLabelledby","labelId","btnKls","b","is","bm","color2","TypeError","_color2$toRgb","toRgb","r","g","concat","get","debounceSetShowPicker","lodashUnified","debounce","leading","show","hide","nextTick","fromString","handleTrigger","handleConfirm","confirmValue","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","validateEvent","validate","err","error","debugWarn","newColor","compare","clear","handleClickOutside","focus","handleEsc","preventDefault","stopPropagation","handleKeyDown","code","aria","EVENT_CODE","enter","numpadEnter","space","esc","blur","onMounted","watch","newVal","doOnChange","val","_b","_c","update","provide","colorPicker","colorPickerContextKey","expose","_ctx","_cache","openBlock","createBlock","unref","index$3","ElTooltip","ref_key","visible","offset","be","popperClass","effect","trigger","teleported","transition","namespace","persistent","onHide","$event","content","withCtx","withDirectives","createElementBlock","onKeydown","withKeys","createElementVNode","normalizeClass","createVNode","hueSlider"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    :teleported=\"teleported\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    @hide=\"setShowPicker(false)\"\n  >\n    <template #content>\n      <div\n        v-click-outside:[triggerRef]=\"handleClickOutside\"\n        @keydown.esc=\"handleEsc\"\n      >\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"sv\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :enable-alpha=\"showAlpha\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              ref=\"inputRef\"\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        ref=\"triggerRef\"\n        v-bind=\"$attrs\"\n        :class=\"btnKls\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :aria-disabled=\"colorDisabled\"\n        :tabindex=\"colorDisabled ? undefined : tabindex\"\n        @keydown=\"handleKeyDown\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-show=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElInput } from '@element-plus/components/input'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  useFocusController,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './utils/color'\nimport {\n  colorPickerContextKey,\n  colorPickerEmits,\n  colorPickerProps,\n} from './color-picker'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useFormSize()\nconst colorDisabled = useFormDisabled()\n\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst hue = ref<InstanceType<typeof HueSlider>>()\nconst sv = ref<InstanceType<typeof SvPanel>>()\nconst alpha = ref<InstanceType<typeof AlphaSlider>>()\nconst popper = ref<TooltipInstance>()\nconst triggerRef = ref()\nconst inputRef = ref()\n\nconst { isFocused, handleFocus, handleBlur } = useFocusController(triggerRef, {\n  beforeFocus() {\n    return colorDisabled.value\n  },\n  beforeBlur(event) {\n    return popper.value?.isFocusInsideContent(event)\n  },\n  afterBlur() {\n    setShowPicker(false)\n    resetColor()\n  },\n})\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst color = reactive(\n  new Color({\n    enableAlpha: props.showAlpha,\n    format: props.colorFormat || '',\n    value: props.modelValue,\n  })\n) as Color\n\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\nconst customInput = ref('')\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.ariaLabel || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nconst btnKls = computed(() => {\n  return [\n    ns.b('picker'),\n    ns.is('disabled', colorDisabled.value),\n    ns.bm('picker', colorSize.value),\n    ns.is('focused', isFocused.value),\n  ]\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  if (!(color instanceof Color)) {\n    throw new TypeError('color should be instance of _color Class')\n  }\n\n  const { r, g, b } = color.toRgb()\n  return showAlpha\n    ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n    : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100, { leading: true })\nfunction show() {\n  if (colorDisabled.value) return\n  setShowPicker(true)\n}\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  if (showPicker.value) {\n    resetColor()\n  }\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n}\n\nfunction confirmValue() {\n  const value = color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(CHANGE_EVENT, value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, null)\n  emit(CHANGE_EVENT, null)\n  if (props.modelValue !== null && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nfunction handleClickOutside() {\n  if (!showPicker.value) return\n  hide()\n  isFocused.value && focus()\n}\n\nfunction handleEsc(event: KeyboardEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n  setShowPicker(false)\n  resetColor()\n}\n\nfunction handleKeyDown(event: KeyboardEvent) {\n  switch (event.code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n    case EVENT_CODE.space:\n      event.preventDefault()\n      event.stopPropagation()\n      show()\n      inputRef.value.focus()\n      break\n    case EVENT_CODE.esc:\n      handleEsc(event)\n      break\n  }\n}\n\nfunction focus() {\n  triggerRef.value.focus()\n}\n\nfunction blur() {\n  triggerRef.value.blur()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = currentColor.value\n  }\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => [props.colorFormat, props.showAlpha],\n  () => {\n    color.enableAlpha = props.showAlpha\n    color.format = props.colorFormat || color.format\n    color.doOnChange()\n    emit(UPDATE_MODEL_EVENT, color.value)\n  }\n)\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    customInput.value = val\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(() => {\n      hue.value?.update()\n      sv.value?.update()\n      alpha.value?.update()\n    })\n  }\n)\n\nprovide(colorPickerContextKey, {\n  currentColor,\n})\n\ndefineExpose({\n  /**\n   * @description current color object\n   */\n  color,\n  /**\n   * @description manually show ColorPicker\n   */\n  show,\n  /**\n   * @description manually hide ColorPicker\n   */\n  hide,\n  /**\n   * @description focus the input element\n   */\n  focus,\n  /**\n   * @description blur the input element\n   */\n  blur,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}