{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, reactive, computed, onMounted, inject } from 'vue';\nimport { useRouter, useRoute } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\nimport { createPost, updatePost, getPostDetail } from '@/api/post';\nimport { getBoardList } from '@/api/board';\n\n// 是否启用调试日志\nvar DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nvar log = function log() {\n  if (DEBUG) {\n    var _console;\n    (_console = console).log.apply(_console, arguments);\n  }\n};\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  setup: function setup() {\n    var router = useRouter();\n    var route = useRoute();\n    var store = useStore();\n    var formRef = ref(null);\n    var loading = ref(false);\n    var isEdit = ref(false);\n    var postId = ref(null);\n    var boardOptions = ref([]);\n    var refreshLatestPosts = inject('refreshLatestPosts', null);\n\n    // 表单数据\n    var postForm = reactive({\n      title: '',\n      content: '',\n      board: ''\n    });\n\n    // 表单验证规则\n    var rules = {\n      title: [{\n        required: true,\n        message: '请输入帖子标题',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 100,\n        message: '标题长度应在3-100个字符之间',\n        trigger: 'blur'\n      }],\n      content: [{\n        required: true,\n        message: '请输入帖子内容',\n        trigger: 'blur'\n      }],\n      board: [{\n        required: true,\n        message: '请选择板块',\n        trigger: 'change'\n      }]\n    };\n\n    // 计算属性：是否已登录\n    var isLoggedIn = computed(function () {\n      return store.getters.isLoggedIn;\n    });\n\n    // 计算属性：是否为管理员\n    var isAdmin = computed(function () {\n      var user = store.state.user;\n      return user && user.role === 'admin';\n    });\n\n    // 刷新最新帖子列表\n    var refreshPosts = function refreshPosts() {\n      if (refreshLatestPosts) {\n        refreshLatestPosts();\n      } else {\n        log('未找到刷新函数');\n      }\n    };\n\n    // 初始化\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            log('发帖页面创建, 登录状态:', isLoggedIn.value, '认证状态:', isLoggedIn.value);\n\n            // 检查是否已登录\n            if (isLoggedIn.value) {\n              _context.next = 6;\n              break;\n            }\n            log('发帖页面检测到未登录，跳转到登录页面');\n            ElMessage.warning('请先登录才能发布帖子');\n            router.push({\n              name: 'Login',\n              query: {\n                redirect: '/post/create'\n              }\n            });\n            return _context.abrupt(\"return\");\n          case 6:\n            log('发帖页面检测到已登录，继续加载页面');\n\n            // 清除可能的成功消息提示\n            ElMessage.closeAll();\n\n            // 添加延时清除，确保异步请求完成后也不会显示消息\n            setTimeout(function () {\n              log('组件内延时清除消息');\n              ElMessage.closeAll();\n            }, 100);\n\n            // 获取板块列表\n            _context.next = 11;\n            return fetchBoardList();\n          case 11:\n            if (!route.params.id) {\n              _context.next = 16;\n              break;\n            }\n            isEdit.value = true;\n            postId.value = route.params.id;\n            _context.next = 16;\n            return fetchPostDetail(postId.value);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n\n    // 获取板块列表\n    var fetchBoardList = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, boards;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              log('开始获取板块列表...');\n              _context2.next = 4;\n              return getBoardList();\n            case 4:\n              response = _context2.sent;\n              log('板块列表响应:', response);\n              boards = [];\n              if (response && response.status === 0 && response.data) {\n                log('使用status=0格式处理板块列表数据');\n                boards = response.data || [];\n              } else if (response && response.code === 0 && response.data) {\n                log('使用code=0格式处理板块列表数据');\n                boards = response.data || [];\n              } else if (response && Array.isArray(response)) {\n                log('使用数组格式处理板块列表数据');\n                boards = response;\n              } else {\n                boards = [];\n              }\n\n              // 如果不是管理员，过滤掉一些特殊板块\n              if (!isAdmin.value) {\n                log('非管理员用户，过滤掉推荐和精选板块');\n                boards = boards.filter(function (board) {\n                  return !board.name.includes('推荐') && !board.name.includes('精选') && board.status !== 'hidden';\n                });\n              }\n\n              // 转换为选项格式\n              boardOptions.value = boards.map(function (board) {\n                return {\n                  value: board.id,\n                  label: board.name\n                };\n              });\n              log('获取到的板块选项:', boardOptions.value);\n\n              // 清除可能的成功消息提示\n              setTimeout(function () {\n                log('获取板块列表后延时清除消息');\n                ElMessage.closeAll();\n              }, 100);\n              _context2.next = 18;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('获取板块列表失败:', _context2.t0);\n              ElMessage.error('获取板块列表失败，请稍后再试');\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 14]]);\n      }));\n      return function fetchBoardList() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 获取帖子详情（编辑模式）\n    var fetchPostDetail = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {\n        var response, _post$board, post;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              loading.value = true;\n              _context3.next = 4;\n              return getPostDetail(id);\n            case 4:\n              response = _context3.sent;\n              if (response && response.data) {\n                post = response.data;\n                postForm.title = post.title;\n                postForm.content = post.content;\n                postForm.board = ((_post$board = post.board) === null || _post$board === void 0 ? void 0 : _post$board.id) || '';\n              } else {\n                ElMessage.error('获取帖子详情失败');\n                router.push('/posts');\n              }\n              _context3.next = 13;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('获取帖子详情失败:', _context3.t0);\n              ElMessage.error('获取帖子详情失败，请稍后再试');\n              router.push('/posts');\n            case 13:\n              _context3.prev = 13;\n              loading.value = false;\n              return _context3.finish(13);\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 8, 13, 16]]);\n      }));\n      return function fetchPostDetail(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 提交表单\n    var submitForm = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var postData, response, newPostId, key, boardId, _response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              log('开始提交表单，当前表单数据:', postForm);\n              if (formRef.value) {\n                _context4.next = 4;\n                break;\n              }\n              ElMessage.error('表单引用不存在');\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return formRef.value.validate(function (valid, fields) {\n                log('表单验证结果:', valid, '验证失败字段:', fields);\n                if (!valid) {\n                  throw new Error('表单验证失败');\n                }\n              });\n            case 7:\n              // 显示加载状态\n              loading.value = true;\n\n              // 准备提交数据\n              postData = {\n                title: postForm.title,\n                content: postForm.content,\n                board: postForm.board\n              }; // 根据是否为编辑模式调用不同API\n              if (!isEdit.value) {\n                _context4.next = 15;\n                break;\n              }\n              _context4.next = 12;\n              return updatePost(postId.value, postData);\n            case 12:\n              response = _context4.sent;\n              _context4.next = 18;\n              break;\n            case 15:\n              _context4.next = 17;\n              return createPost(postData);\n            case 17:\n              response = _context4.sent;\n            case 18:\n              log('提交帖子响应:', response);\n\n              // 处理响应\n              if (!(response && (response.status === 0 || response.code === 0 || response.id))) {\n                _context4.next = 53;\n                break;\n              }\n              log('发布成功，完整响应对象:', {\n                response: response,\n                status: response.status,\n                code: response.code,\n                id: response.id,\n                data: response.data\n              });\n\n              // 显示成功消息\n              ElMessage({\n                message: isEdit.value ? '编辑帖子成功' : '发布帖子成功',\n                type: 'success'\n              });\n\n              // 获取帖子ID\n              if (!isEdit.value) {\n                _context4.next = 26;\n                break;\n              }\n              newPostId = postId.value;\n              _context4.next = 48;\n              break;\n            case 26:\n              if (!(response.data && response.data.id)) {\n                _context4.next = 30;\n                break;\n              }\n              newPostId = response.data.id;\n              _context4.next = 48;\n              break;\n            case 30:\n              if (!response.id) {\n                _context4.next = 34;\n                break;\n              }\n              newPostId = response.id;\n              _context4.next = 48;\n              break;\n            case 34:\n              if (!(_typeof(response) === 'object')) {\n                _context4.next = 48;\n                break;\n              }\n              _context4.t0 = _regeneratorRuntime().keys(response);\n            case 36:\n              if ((_context4.t1 = _context4.t0()).done) {\n                _context4.next = 48;\n                break;\n              }\n              key = _context4.t1.value;\n              if (!(key === 'id' && response[key])) {\n                _context4.next = 43;\n                break;\n              }\n              newPostId = response[key];\n              return _context4.abrupt(\"break\", 48);\n            case 43:\n              if (!(response[key] && _typeof(response[key]) === 'object' && response[key].id)) {\n                _context4.next = 46;\n                break;\n              }\n              newPostId = response[key].id;\n              return _context4.abrupt(\"break\", 48);\n            case 46:\n              _context4.next = 36;\n              break;\n            case 48:\n              log('解析后的帖子ID:', newPostId);\n\n              // 刷新首页最新帖子列表\n              try {\n                refreshPosts();\n                log('已刷新最新帖子列表');\n              } catch (error) {\n                console.error('刷新帖子列表失败:', error);\n              }\n\n              // 跳转到帖子详情页或板块页面\n              if (newPostId) {\n                router.push(\"/posts/\".concat(newPostId));\n              } else if (postForm.board) {\n                boardId = postForm.board;\n                log('跳转到板块详情页，板块ID:', boardId);\n                router.push(\"/boards/\".concat(boardId));\n              } else {\n                router.push('/posts');\n              }\n              _context4.next = 54;\n              break;\n            case 53:\n              throw new Error(((_response = response) === null || _response === void 0 ? void 0 : _response.msg) || '操作失败');\n            case 54:\n              _context4.next = 60;\n              break;\n            case 56:\n              _context4.prev = 56;\n              _context4.t2 = _context4[\"catch\"](4);\n              console.error('提交表单失败:', _context4.t2);\n              if (_context4.t2.message === '表单验证失败') {\n                log('表单验证失败');\n                ElMessage.error('请检查表单填写是否正确');\n              } else {\n                ElMessage.error(_context4.t2.message || '操作失败，请稍后再试');\n              }\n            case 60:\n              _context4.prev = 60;\n              loading.value = false;\n              return _context4.finish(60);\n            case 63:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 56, 60, 63]]);\n      }));\n      return function submitForm() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 处理内容变化\n    var handleContentChange = function handleContentChange(content) {\n      log('内容变化:', content);\n      postForm.content = content;\n    };\n\n    // 返回上一页\n    var goBack = function goBack() {\n      router.back();\n    };\n    return {\n      formRef: formRef,\n      postForm: postForm,\n      rules: rules,\n      loading: loading,\n      isEdit: isEdit,\n      boardOptions: boardOptions,\n      submitForm: submitForm,\n      handleContentChange: handleContentChange,\n      goBack: goBack\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","inject","useRouter","useRoute","useStore","ElMessage","RichTextEditor","createPost","updatePost","getPostDetail","getBoardList","DEBUG","log","_console","console","apply","arguments","name","components","setup","router","route","store","formRef","loading","isEdit","postId","boardOptions","refreshLatestPosts","postForm","title","content","board","rules","required","message","trigger","min","max","isLoggedIn","getters","isAdmin","user","state","role","refreshPosts","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","value","warning","push","query","redirect","abrupt","closeAll","setTimeout","fetchBoardList","params","id","fetchPostDetail","stop","_ref2","_callee2","response","boards","_callee2$","_context2","sent","status","data","code","Array","isArray","filter","includes","map","label","t0","error","_ref3","_callee3","_post$board","post","_callee3$","_context3","finish","_x","submitForm","_ref4","_callee4","postData","newPostId","key","boardId","_response","_callee4$","_context4","validate","valid","fields","Error","type","_typeof","keys","t1","done","concat","msg","t2","handleContentChange","goBack","back"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostCreate.vue"],"sourcesContent":["<template>\n  <div class=\"post-create-container\">\n    <el-card class=\"post-form-card\">\n      <template #header>\n        <div class=\"clearfix\">\n        <span>{{ isEdit ? '编辑帖子' : '发布新帖' }}</span>\n      </div>\n      </template>\n\n      <el-form\n        ref=\"formRef\"\n        :model=\"postForm\"\n        :rules=\"rules\"\n        label-width=\"80px\"\n        :validate-on-rule-change=\"false\"\n        @submit.prevent\n      >\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"postForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"板块\" prop=\"board\">\n          <el-select\n            v-model=\"postForm.board\"\n            placeholder=\"请选择板块\"\n            style=\"width: 100%\"\n            :disabled=\"isEdit && !isAdmin\"\n          >\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.value\"\n              :label=\"board.label\"\n              :value=\"board.value\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\" :show-message=\"false\">\n          <rich-text-editor\n            v-model=\"postForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button @click=\"goBack\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"loading\">\n            {{ isEdit ? '保存修改' : '发布帖子' }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted, inject } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\nimport { createPost, updatePost, getPostDetail } from '@/api/post'\nimport { getBoardList } from '@/api/board'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor\n  },\n  setup() {\n    const router = useRouter()\n    const route = useRoute()\n    const store = useStore()\n    const formRef = ref(null)\n    const loading = ref(false)\n    const isEdit = ref(false)\n    const postId = ref(null)\n    const boardOptions = ref([])\n    const refreshLatestPosts = inject('refreshLatestPosts', null)\n\n    // 表单数据\n    const postForm = reactive({\n        title: '',\n      content: '',\n      board: ''\n    })\n\n    // 表单验证规则\n    const rules = {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n        { min: 3, max: 100, message: '标题长度应在3-100个字符之间', trigger: 'blur' }\n      ],\n      content: [\n        { required: true, message: '请输入帖子内容', trigger: 'blur' }\n        ],\n        board: [\n          { required: true, message: '请选择板块', trigger: 'change' }\n      ]\n    }\n\n    // 计算属性：是否已登录\n    const isLoggedIn = computed(() => store.getters.isLoggedIn)\n    \n    // 计算属性：是否为管理员\n    const isAdmin = computed(() => {\n      const user = store.state.user\n      return user && user.role === 'admin'\n    })\n\n    // 刷新最新帖子列表\n    const refreshPosts = () => {\n      if (refreshLatestPosts) {\n        refreshLatestPosts()\n      } else {\n        log('未找到刷新函数')\n    }\n    }\n\n    // 初始化\n    onMounted(async () => {\n      log('发帖页面创建, 登录状态:', isLoggedIn.value, '认证状态:', isLoggedIn.value)\n\n      // 检查是否已登录\n      if (!isLoggedIn.value) {\n        log('发帖页面检测到未登录，跳转到登录页面')\n        ElMessage.warning('请先登录才能发布帖子')\n        router.push({ name: 'Login', query: { redirect: '/post/create' } })\n      return\n    }\n\n      log('发帖页面检测到已登录，继续加载页面')\n\n    // 清除可能的成功消息提示\n      ElMessage.closeAll()\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(() => {\n        log('组件内延时清除消息')\n        ElMessage.closeAll()\n      }, 100)\n\n      // 获取板块列表\n      await fetchBoardList()\n\n      // 检查是否为编辑模式\n      if (route.params.id) {\n        isEdit.value = true\n        postId.value = route.params.id\n        await fetchPostDetail(postId.value)\n      }\n    })\n\n    // 获取板块列表\n    const fetchBoardList = async () => {\n      try {\n        log('开始获取板块列表...')\n        const response = await getBoardList()\n        \n        log('板块列表响应:', response)\n\n        let boards = []\n        if (response && response.status === 0 && response.data) {\n          log('使用status=0格式处理板块列表数据')\n          boards = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          log('使用code=0格式处理板块列表数据')\n          boards = response.data || []\n        } else if (response && Array.isArray(response)) {\n          log('使用数组格式处理板块列表数据')\n          boards = response\n        } else {\n          boards = []\n        }\n        \n        // 如果不是管理员，过滤掉一些特殊板块\n        if (!isAdmin.value) {\n          log('非管理员用户，过滤掉推荐和精选板块')\n          boards = boards.filter(board => {\n            return !board.name.includes('推荐') && \n                   !board.name.includes('精选') && \n                   board.status !== 'hidden'\n          })\n        }\n        \n        // 转换为选项格式\n        boardOptions.value = boards.map(board => ({\n          value: board.id,\n          label: board.name\n        }))\n        \n        log('获取到的板块选项:', boardOptions.value)\n        \n        // 清除可能的成功消息提示\n        setTimeout(() => {\n          log('获取板块列表后延时清除消息')\n          ElMessage.closeAll()\n        }, 100)\n        \n      } catch (error) {\n        console.error('获取板块列表失败:', error)\n        ElMessage.error('获取板块列表失败，请稍后再试')\n      }\n    }\n\n    // 获取帖子详情（编辑模式）\n    const fetchPostDetail = async (id) => {\n      try {\n        loading.value = true\n        const response = await getPostDetail(id)\n        \n        if (response && response.data) {\n          const post = response.data\n          postForm.title = post.title\n          postForm.content = post.content\n          postForm.board = post.board?.id || ''\n        } else {\n          ElMessage.error('获取帖子详情失败')\n          router.push('/posts')\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        ElMessage.error('获取帖子详情失败，请稍后再试')\n        router.push('/posts')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    // 提交表单\n    const submitForm = async () => {\n      log('开始提交表单，当前表单数据:', postForm);\n      \n      if (!formRef.value) {\n        ElMessage.error('表单引用不存在')\n        return\n      }\n      \n      try {\n        // 表单验证\n        await formRef.value.validate((valid, fields) => {\n          log('表单验证结果:', valid, '验证失败字段:', fields);\n        \n          if (!valid) {\n            throw new Error('表单验证失败')\n          }\n        })\n        \n        // 显示加载状态\n        loading.value = true\n        \n        // 准备提交数据\n        const postData = {\n          title: postForm.title,\n          content: postForm.content,\n          board: postForm.board\n        }\n        \n        // 根据是否为编辑模式调用不同API\n        let response\n        if (isEdit.value) {\n          response = await updatePost(postId.value, postData)\n              } else {\n          response = await createPost(postData)\n              }\n              \n        log('提交帖子响应:', response);\n\n        // 处理响应\n        if (response && (response.status === 0 || response.code === 0 || response.id)) {\n          log('发布成功，完整响应对象:', {\n                  response,\n            status: response.status,\n            code: response.code,\n            id: response.id,\n            data: response.data\n                });\n          \n          // 显示成功消息\n          ElMessage({\n            message: isEdit.value ? '编辑帖子成功' : '发布帖子成功',\n            type: 'success'\n          })\n\n                // 获取帖子ID\n          let newPostId\n          if (isEdit.value) {\n            newPostId = postId.value\n          } else if (response.data && response.data.id) {\n            newPostId = response.data.id\n          } else if (response.id) {\n            newPostId = response.id\n          } else if (typeof response === 'object') {\n            // 尝试从响应对象中找到id字段\n            for (const key in response) {\n              if (key === 'id' && response[key]) {\n                newPostId = response[key]\n                break\n              } else if (response[key] && typeof response[key] === 'object' && response[key].id) {\n                newPostId = response[key].id\n                break\n                    }\n                  }\n                }\n\n          log('解析后的帖子ID:', newPostId);\n          \n          // 刷新首页最新帖子列表\n          try {\n            refreshPosts()\n            log('已刷新最新帖子列表');\n          } catch (error) {\n            console.error('刷新帖子列表失败:', error)\n          }\n          \n          // 跳转到帖子详情页或板块页面\n          if (newPostId) {\n            router.push(`/posts/${newPostId}`)\n          } else if (postForm.board) {\n            const boardId = postForm.board\n            log('跳转到板块详情页，板块ID:', boardId);\n            router.push(`/boards/${boardId}`)\n                } else {\n            router.push('/posts')\n                }\n              } else {\n          throw new Error(response?.msg || '操作失败')\n              }\n            } catch (error) {\n        console.error('提交表单失败:', error)\n        \n        if (error.message === '表单验证失败') {\n          log('表单验证失败');\n          ElMessage.error('请检查表单填写是否正确')\n        } else {\n          ElMessage.error(error.message || '操作失败，请稍后再试')\n        }\n      } finally {\n        loading.value = false\n        }\n    }\n\n    // 处理内容变化\n    const handleContentChange = (content) => {\n      log('内容变化:', content);\n      postForm.content = content\n    }\n\n    // 返回上一页\n    const goBack = () => {\n      router.back()\n    }\n\n    return {\n      formRef,\n      postForm,\n      rules,\n      loading,\n      isEdit,\n      boardOptions,\n      submitForm,\n      handleContentChange,\n      goBack\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-create-container {\n  max-width: 1200px;\n  margin: 20px auto;\n  padding: 0 20px;\n}\n\n.post-form-card {\n  margin-bottom: 20px;\n}\n\n:deep(.el-form-item__content) {\n  line-height: normal;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}