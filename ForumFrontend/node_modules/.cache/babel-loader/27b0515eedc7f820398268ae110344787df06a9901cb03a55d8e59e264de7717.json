{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { computed, onMounted, toRefs, reactive } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { formatDateTime } from '@/utils/index';\nimport UserAvatar from '@/components/UserAvatar.vue';\nimport { getUserProfile, getUserById, updateUserProfile, getUserPosts, getUserComments, getUserFavorites, uploadAvatar, changePassword } from '@/api/profile';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'UserProfile',\n  components: {\n    UserAvatar: UserAvatar\n  },\n  setup: function setup() {\n    var route = useRoute();\n    var router = useRouter();\n    var store = useStore();\n\n    // 状态\n    var state = reactive({\n      loading: false,\n      userProfile: {},\n      userStats: {\n        posts_count: 0,\n        comments_count: 0,\n        favorites_count: 0\n      },\n      activeTab: 'posts',\n      // 帖子相关\n      postsLoading: false,\n      posts: [],\n      postsTotal: 0,\n      postsQuery: {\n        page: 1,\n        limit: 10\n      },\n      // 评论相关\n      commentsLoading: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      // 收藏相关\n      favoritesLoading: false,\n      favorites: [],\n      favoritesTotal: 0,\n      favoritesQuery: {\n        page: 1,\n        limit: 10\n      },\n      // 编辑资料相关\n      editProfileDialogVisible: false,\n      // 使用简单的变量存储表单数据\n      nicknameInput: '',\n      avatarUrlInput: '',\n      // 保留原来的表单对象以兼容其他代码\n      profileForm: {\n        nickname: '',\n        avatar_url: ''\n      },\n      profileRules: {\n        nickname: [{\n          max: 50,\n          message: '昵称不能超过50个字符',\n          trigger: 'blur'\n        }]\n      },\n      uploadHeaders: {\n        Authorization: \"Bearer \".concat(localStorage.getItem('token'))\n      },\n      submitting: false,\n      imageUploading: false,\n      // 修改密码相关\n      changePasswordDialogVisible: false,\n      passwordForm: {\n        old_password: '',\n        new_password: '',\n        confirm_password: ''\n      },\n      passwordRules: {\n        old_password: [{\n          required: true,\n          message: '请输入当前密码',\n          trigger: 'blur'\n        }],\n        new_password: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度不能少于6个字符',\n          trigger: 'blur'\n        }],\n        confirm_password: [{\n          required: true,\n          message: '请再次输入新密码',\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (value !== state.passwordForm.new_password) {\n              callback(new Error('两次输入的密码不一致'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      }\n    });\n\n    // 计算属性\n    var userId = computed(function () {\n      return route.params.id || 'me';\n    });\n    var isCurrentUser = computed(function () {\n      return !route.params.id || route.params.id === 'me' || route.params.id === store.getters.userId.toString();\n    });\n\n    // 从查询参数中获取激活的标签页\n    if (route.query.tab && ['posts', 'comments', 'favorites'].includes(route.query.tab)) {\n      state.activeTab = route.query.tab;\n    }\n\n    // 获取用户信息\n    var fetchUserProfile = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              state.loading = true;\n              _context.prev = 1;\n              // 检查本地存储的token\n              token = localStorage.getItem('token');\n              console.log('获取用户信息前的token:', token);\n              if (!(userId.value === 'me' || !userId.value)) {\n                _context.next = 11;\n                break;\n              }\n              console.log('获取当前用户信息');\n              _context.next = 8;\n              return getUserProfile();\n            case 8:\n              response = _context.sent;\n              _context.next = 15;\n              break;\n            case 11:\n              console.log('获取指定用户信息:', userId.value);\n              _context.next = 14;\n              return getUserById(userId.value);\n            case 14:\n              response = _context.sent;\n            case 15:\n              console.log('用户信息响应:', response);\n\n              // 处理不同的响应格式\n              if (!(response.code === 0)) {\n                _context.next = 20;\n                break;\n              }\n              state.userProfile = response.data;\n              _context.next = 27;\n              break;\n            case 20:\n              if (!response.id) {\n                _context.next = 24;\n                break;\n              }\n              // 直接返回了用户对象\n              state.userProfile = response;\n              _context.next = 27;\n              break;\n            case 24:\n              ElMessage.error('获取用户信息失败: 响应格式不正确');\n              console.error('响应格式不正确:', response);\n              return _context.abrupt(\"return\");\n            case 27:\n              // 初始化编辑表单\n              if (!state.profileForm) {\n                state.profileForm = {\n                  nickname: state.userProfile.nickname || '',\n                  avatar_url: state.userProfile.avatar_url || ''\n                };\n              } else {\n                state.profileForm.nickname = state.userProfile.nickname || '';\n                state.profileForm.avatar_url = state.userProfile.avatar_url || '';\n              }\n              _context.next = 34;\n              break;\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取用户信息失败:', _context.t0);\n              ElMessage.error('获取用户信息失败');\n            case 34:\n              _context.prev = 34;\n              state.loading = false;\n              return _context.finish(34);\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 30, 34, 37]]);\n      }));\n      return function fetchUserProfile() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // 获取用户帖子\n    var fetchUserPosts = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              state.postsLoading = true;\n              _context2.prev = 1;\n              // 检查本地存储的token\n              token = localStorage.getItem('token');\n              console.log('获取用户帖子前的token:', token);\n              _context2.next = 6;\n              return getUserPosts(userId.value);\n            case 6:\n              response = _context2.sent;\n              console.log('用户帖子响应:', response);\n\n              // 处理不同的响应格式\n              if (!(response.code === 0 && response.data)) {\n                _context2.next = 14;\n                break;\n              }\n              // 标准格式响应\n              state.posts = response.data.results || [];\n              state.postsTotal = response.data.count || 0;\n              state.userStats.posts_count = response.data.count || 0;\n              _context2.next = 29;\n              break;\n            case 14:\n              if (!response.results) {\n                _context2.next = 20;\n                break;\n              }\n              // DRF分页响应格式\n              state.posts = response.results || [];\n              state.postsTotal = response.count || 0;\n              state.userStats.posts_count = response.count || 0;\n              _context2.next = 29;\n              break;\n            case 20:\n              if (!Array.isArray(response)) {\n                _context2.next = 26;\n                break;\n              }\n              // 直接返回数组\n              state.posts = response;\n              state.postsTotal = response.length;\n              state.userStats.posts_count = response.length;\n              _context2.next = 29;\n              break;\n            case 26:\n              // 其他格式\n              console.error('响应格式不正确:', response);\n              ElMessage.error('获取用户帖子失败: 响应格式不正确');\n              return _context2.abrupt(\"return\");\n            case 29:\n              _context2.next = 35;\n              break;\n            case 31:\n              _context2.prev = 31;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error('获取用户帖子失败:', _context2.t0);\n              ElMessage.error('获取用户帖子失败');\n            case 35:\n              _context2.prev = 35;\n              state.postsLoading = false;\n              return _context2.finish(35);\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 31, 35, 38]]);\n      }));\n      return function fetchUserPosts() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 获取用户评论\n    var fetchUserComments = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              state.commentsLoading = true;\n              _context3.prev = 1;\n              console.log('开始获取用户评论，用户ID:', userId.value);\n              _context3.next = 5;\n              return getUserComments(userId.value);\n            case 5:\n              response = _context3.sent;\n              console.log('用户评论响应:', response);\n\n              // 处理不同的响应格式\n              if (!(response.code === 0 && response.data)) {\n                _context3.next = 14;\n                break;\n              }\n              // 标准格式响应\n              console.log('标准格式响应，评论数据:', response.data);\n              state.comments = response.data.results || [];\n              state.commentsTotal = response.data.count || 0;\n              state.userStats.comments_count = response.data.count || 0;\n              _context3.next = 31;\n              break;\n            case 14:\n              if (!response.results) {\n                _context3.next = 21;\n                break;\n              }\n              // DRF分页响应格式\n              console.log('DRF分页响应格式，评论数据:', response.results);\n              state.comments = response.results || [];\n              state.commentsTotal = response.count || 0;\n              state.userStats.comments_count = response.count || 0;\n              _context3.next = 31;\n              break;\n            case 21:\n              if (!Array.isArray(response)) {\n                _context3.next = 28;\n                break;\n              }\n              // 直接返回数组\n              console.log('直接返回数组格式，评论数据:', response);\n              state.comments = response;\n              state.commentsTotal = response.length;\n              state.userStats.comments_count = response.length;\n              _context3.next = 31;\n              break;\n            case 28:\n              // 其他格式\n              console.error('响应格式不正确:', response);\n              ElMessage.error('获取用户评论失败: 响应格式不正确');\n              return _context3.abrupt(\"return\");\n            case 31:\n              // 打印获取到的评论数据\n              console.log('最终获取到的评论数据:', state.comments);\n              console.log('评论总数:', state.commentsTotal);\n              _context3.next = 39;\n              break;\n            case 35:\n              _context3.prev = 35;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error('获取用户评论失败:', _context3.t0);\n              ElMessage.error('获取用户评论失败');\n            case 39:\n              _context3.prev = 39;\n              state.commentsLoading = false;\n              return _context3.finish(39);\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 35, 39, 42]]);\n      }));\n      return function fetchUserComments() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 获取用户收藏\n    var fetchUserFavorites = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              state.favoritesLoading = true;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return getUserFavorites(userId.value);\n            case 4:\n              response = _context4.sent;\n              console.log('用户收藏响应:', response);\n\n              // 处理不同的响应格式\n              if (!(response.code === 0 && response.data)) {\n                _context4.next = 12;\n                break;\n              }\n              // 标准格式响应\n              state.favorites = response.data.results || [];\n              state.favoritesTotal = response.data.count || 0;\n              state.userStats.favorites_count = response.data.count || 0;\n              _context4.next = 27;\n              break;\n            case 12:\n              if (!response.results) {\n                _context4.next = 18;\n                break;\n              }\n              // DRF分页响应格式\n              state.favorites = response.results || [];\n              state.favoritesTotal = response.count || 0;\n              state.userStats.favorites_count = response.count || 0;\n              _context4.next = 27;\n              break;\n            case 18:\n              if (!Array.isArray(response)) {\n                _context4.next = 24;\n                break;\n              }\n              // 直接返回数组\n              state.favorites = response;\n              state.favoritesTotal = response.length;\n              state.userStats.favorites_count = response.length;\n              _context4.next = 27;\n              break;\n            case 24:\n              // 其他格式\n              console.error('响应格式不正确:', response);\n              ElMessage.error('获取用户收藏失败: 响应格式不正确');\n              return _context4.abrupt(\"return\");\n            case 27:\n              _context4.next = 33;\n              break;\n            case 29:\n              _context4.prev = 29;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error('获取用户收藏失败:', _context4.t0);\n              ElMessage.error('获取用户收藏失败');\n            case 33:\n              _context4.prev = 33;\n              state.favoritesLoading = false;\n              return _context4.finish(33);\n            case 36:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 29, 33, 36]]);\n      }));\n      return function fetchUserFavorites() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 处理标签页切换\n    var handleTabClick = function handleTabClick(tab) {\n      state.activeTab = tab.name;\n      if (tab.name === 'posts' && state.posts.length === 0) {\n        fetchUserPosts();\n      } else if (tab.name === 'comments' && state.comments.length === 0) {\n        fetchUserComments();\n      } else if (tab.name === 'favorites' && state.favorites.length === 0) {\n        fetchUserFavorites();\n      }\n    };\n\n    // 处理帖子分页变化\n    var handlePostsPageChange = function handlePostsPageChange(page) {\n      console.log('帖子分页变化:', page);\n      state.postsQuery.page = page;\n      fetchUserPosts();\n    };\n\n    // 处理评论分页变化\n    var handleCommentsPageChange = function handleCommentsPageChange(page) {\n      console.log('评论分页变化:', page);\n      state.commentsQuery.page = page;\n      fetchUserComments();\n    };\n\n    // 处理收藏分页变化\n    var handleFavoritesPageChange = function handleFavoritesPageChange(page) {\n      console.log('收藏分页变化:', page);\n      state.favoritesQuery.page = page;\n      fetchUserFavorites();\n    };\n\n    // 查看帖子\n    var viewPost = function viewPost(post) {\n      router.push({\n        name: 'PostDetail',\n        params: {\n          id: post.id\n        }\n      });\n    };\n\n    // 显示编辑资料对话框\n    var showEditProfileDialog = function showEditProfileDialog() {\n      try {\n        var _state$userProfile, _state$userProfile2, _state$userProfile3, _state$userProfile4;\n        console.log('点击编辑资料按钮');\n\n        // 设置输入框的初始值\n        state.nicknameInput = ((_state$userProfile = state.userProfile) === null || _state$userProfile === void 0 ? void 0 : _state$userProfile.nickname) || '';\n        state.avatarUrlInput = ((_state$userProfile2 = state.userProfile) === null || _state$userProfile2 === void 0 ? void 0 : _state$userProfile2.avatar_url) || '';\n\n        // 同时也设置原来的表单对象，以兼容其他代码\n        state.profileForm.nickname = ((_state$userProfile3 = state.userProfile) === null || _state$userProfile3 === void 0 ? void 0 : _state$userProfile3.nickname) || '';\n        state.profileForm.avatar_url = ((_state$userProfile4 = state.userProfile) === null || _state$userProfile4 === void 0 ? void 0 : _state$userProfile4.avatar_url) || '';\n        console.log('设置表单数据:', {\n          nicknameInput: state.nicknameInput,\n          avatarUrlInput: state.avatarUrlInput\n        });\n\n        // 更新上传头部以确保使用最新的token\n        state.uploadHeaders = {\n          Authorization: \"Bearer \".concat(localStorage.getItem('token'))\n        };\n\n        // 显示对话框\n        state.editProfileDialogVisible = true;\n      } catch (error) {\n        console.error('显示编辑资料对话框出错:', error);\n        ElMessage.error('显示编辑资料对话框出错');\n      }\n    };\n\n    // 头像上传前的验证\n    var beforeAvatarUpload = function beforeAvatarUpload(file) {\n      state.imageUploading = true;\n      var isImage = file.type.startsWith('image/');\n      var isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isImage) {\n        ElMessage.error('头像必须是图片格式!');\n        state.imageUploading = false;\n        return false;\n      }\n      if (!isLt2M) {\n        ElMessage.error('头像大小不能超过 2MB!');\n        state.imageUploading = false;\n        return false;\n      }\n      return true;\n    };\n\n    // 处理头像上传\n    var handleAvatarUpload = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(options) {\n        var file, formData, token, response, _response$data, avatarUrl, fullAvatarUrl;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              file = options.file;\n              state.imageUploading = true;\n              _context5.prev = 2;\n              console.log('开始上传头像，文件信息:', {\n                name: file.name,\n                type: file.type,\n                size: file.size\n              });\n\n              // 创建FormData\n              formData = new FormData();\n              formData.append('file', file);\n\n              // 检查token\n              token = localStorage.getItem('token');\n              console.log('上传头像前的token:', token);\n\n              // 调用上传API\n              console.log('调用上传API，URL:', '/api/v1/users/profile/me/avatar/');\n              _context5.next = 11;\n              return uploadAvatar(formData);\n            case 11:\n              response = _context5.sent;\n              console.log('头像上传响应:', response);\n              if (response.status === 0 || response.code === 0) {\n                // 更新两个地方的头像地址\n                avatarUrl = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.avatar_url) || '';\n                console.log('获取到的头像URL:', avatarUrl);\n                state.avatarUrlInput = avatarUrl;\n                state.profileForm.avatar_url = avatarUrl;\n\n                // 立即更新用户信息中的头像\n                // 确保头像 URL 是完整的\n                fullAvatarUrl = avatarUrl.startsWith('http') ? avatarUrl : \"http://localhost:8000\".concat(avatarUrl);\n                console.log('完整的头像 URL:', fullAvatarUrl);\n                state.userProfile.avatar_url = fullAvatarUrl;\n\n                // 更新Vuex中的用户信息\n                store.dispatch('updateUserInfo', _objectSpread(_objectSpread({}, store.getters.userInfo), {}, {\n                  avatar_url: fullAvatarUrl\n                }));\n\n                // 自动保存用户资料\n                // 注意：保存到后端的头像 URL 应该保持原样，不需要完整路径\n                updateUserProfile({\n                  nickname: state.nicknameInput || state.userProfile.nickname || '',\n                  avatar_url: avatarUrl // 使用原始的相对路径\n                }).then(function (response) {\n                  console.log('自动保存用户资料响应:', response);\n                })[\"catch\"](function (error) {\n                  console.error('自动保存用户资料失败:', error);\n                });\n                ElMessage.success('头像上传成功');\n              } else {\n                console.error('头像上传失败，响应:', response);\n                ElMessage.error(response.msg || '头像上传失败');\n              }\n              _context5.next = 20;\n              break;\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](2);\n              console.error('头像上传失败:', _context5.t0);\n              // 显示更详细的错误信息\n              if (_context5.t0.response) {\n                console.error('错误响应:', _context5.t0.response);\n                ElMessage.error(\"\\u5934\\u50CF\\u4E0A\\u4F20\\u5931\\u8D25: \".concat(_context5.t0.response.status, \" \").concat(_context5.t0.response.statusText));\n              } else if (_context5.t0.request) {\n                console.error('请求未收到响应:', _context5.t0.request);\n                ElMessage.error('头像上传失败: 服务器未响应');\n              } else {\n                console.error('请求配置错误:', _context5.t0.message);\n                ElMessage.error(\"\\u5934\\u50CF\\u4E0A\\u4F20\\u5931\\u8D25: \".concat(_context5.t0.message));\n              }\n            case 20:\n              _context5.prev = 20;\n              state.imageUploading = false;\n              return _context5.finish(20);\n            case 23:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[2, 16, 20, 23]]);\n      }));\n      return function handleAvatarUpload(_x) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    // 提交编辑资料表单\n    var submitProfileForm = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var formData, response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              console.log('提交编辑资料表单');\n              console.log('表单数据:', {\n                nicknameInput: state.nicknameInput,\n                avatarUrlInput: state.avatarUrlInput\n              });\n              state.submitting = true;\n\n              // 准备要提交的数据\n              formData = {\n                nickname: state.nicknameInput || '',\n                avatar_url: state.avatarUrlInput || ''\n              };\n              _context6.prev = 5;\n              // 先关闭对话框，避免用户等待\n              state.editProfileDialogVisible = false;\n              _context6.next = 9;\n              return updateUserProfile(formData);\n            case 9:\n              response = _context6.sent;\n              console.log('更新用户资料响应:', response);\n\n              // 刷新用户信息，以确保显示最新数据\n              _context6.next = 13;\n              return fetchUserProfile();\n            case 13:\n              // 更新Vuex中的用户信息\n              store.dispatch('updateUserInfo', _objectSpread(_objectSpread({}, store.getters.userInfo), {}, {\n                nickname: formData.nickname,\n                avatar_url: formData.avatar_url\n              }));\n\n              // 显示成功消息\n              ElMessage.success('个人资料更新成功');\n              _context6.next = 23;\n              break;\n            case 17:\n              _context6.prev = 17;\n              _context6.t0 = _context6[\"catch\"](5);\n              console.error('调用API更新用户资料失败:', _context6.t0);\n\n              // 尝试刷新用户信息，查看是否实际更新成功\n              _context6.next = 22;\n              return fetchUserProfile();\n            case 22:\n              // 显示错误消息\n              ElMessage.error('个人资料更新失败，请刷新页面查看最新状态');\n            case 23:\n              _context6.next = 30;\n              break;\n            case 25:\n              _context6.prev = 25;\n              _context6.t1 = _context6[\"catch\"](0);\n              console.error('个人资料更新失败:', _context6.t1);\n              ElMessage.error('个人资料更新失败');\n              // 关闭对话框\n              state.editProfileDialogVisible = false;\n            case 30:\n              _context6.prev = 30;\n              state.submitting = false;\n              return _context6.finish(30);\n            case 33:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[0, 25, 30, 33], [5, 17]]);\n      }));\n      return function submitProfileForm() {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    // 显示修改密码对话框\n    var showChangePasswordDialog = function showChangePasswordDialog() {\n      state.changePasswordDialogVisible = true;\n      state.passwordForm = {\n        old_password: '',\n        new_password: '',\n        confirm_password: ''\n      };\n    };\n\n    // 提交修改密码表单\n    var submitPasswordForm = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var requestData, response, errorMessages, _loop, field, responseData, _errorMessages, _loop2, _field;\n        return _regeneratorRuntime().wrap(function _callee7$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              console.log('提交修改密码表单');\n\n              // 确保表单数据存在\n              if (state.passwordForm) {\n                _context9.next = 5;\n                break;\n              }\n              ElMessage.error('密码表单数据不存在');\n              return _context9.abrupt(\"return\");\n            case 5:\n              if (state.passwordForm.old_password) {\n                _context9.next = 8;\n                break;\n              }\n              ElMessage.error('请输入当前密码');\n              return _context9.abrupt(\"return\");\n            case 8:\n              if (state.passwordForm.new_password) {\n                _context9.next = 11;\n                break;\n              }\n              ElMessage.error('请输入新密码');\n              return _context9.abrupt(\"return\");\n            case 11:\n              if (!(state.passwordForm.new_password !== state.passwordForm.confirm_password)) {\n                _context9.next = 14;\n                break;\n              }\n              ElMessage.error('两次输入的密码不一致');\n              return _context9.abrupt(\"return\");\n            case 14:\n              if (!(state.passwordForm.new_password.length < 6)) {\n                _context9.next = 17;\n                break;\n              }\n              ElMessage.error('新密码长度不能少于6个字符');\n              return _context9.abrupt(\"return\");\n            case 17:\n              state.submitting = true;\n\n              // 准备请求数据\n              requestData = {\n                old_password: state.passwordForm.old_password,\n                new_password: state.passwordForm.new_password,\n                confirm_password: state.passwordForm.confirm_password\n              };\n              console.log('发送修改密码请求:', requestData);\n\n              // 使用导入的changePassword函数发送请求\n              // 这样可以确保使用与其他API请求相同的配置\n              _context9.next = 22;\n              return changePassword(requestData);\n            case 22:\n              response = _context9.sent;\n              console.log('修改密码响应:', response);\n              if (!(response.code === 0 || response.status === 0)) {\n                _context9.next = 31;\n                break;\n              }\n              ElMessage.success(response.msg || '密码修改成功，请重新登录');\n              state.changePasswordDialogVisible = false;\n\n              // 退出登录\n              store.dispatch('logout');\n              router.push('/login');\n              _context9.next = 45;\n              break;\n            case 31:\n              // 处理错误信息\n              console.error('密码修改失败，错误信息:', response.msg);\n\n              // 如果错误信息是对象，提取具体错误信息\n              if (!(_typeof(response.msg) === 'object')) {\n                _context9.next = 44;\n                break;\n              }\n              errorMessages = []; // 遍历错误对象的所有字段\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(field) {\n                var errors;\n                return _regeneratorRuntime().wrap(function _loop$(_context7) {\n                  while (1) switch (_context7.prev = _context7.next) {\n                    case 0:\n                      errors = response.msg[field];\n                      if (Array.isArray(errors)) {\n                        // 如果是数组，添加每个错误信息\n                        errors.forEach(function (error) {\n                          errorMessages.push(\"\".concat(field, \": \").concat(error));\n                        });\n                      } else if (typeof errors === 'string') {\n                        // 如果是字符串，直接添加\n                        errorMessages.push(\"\".concat(field, \": \").concat(errors));\n                      }\n                    case 2:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }, _loop);\n              });\n              _context9.t0 = _regeneratorRuntime().keys(response.msg);\n            case 36:\n              if ((_context9.t1 = _context9.t0()).done) {\n                _context9.next = 41;\n                break;\n              }\n              field = _context9.t1.value;\n              return _context9.delegateYield(_loop(field), \"t2\", 39);\n            case 39:\n              _context9.next = 36;\n              break;\n            case 41:\n              // 显示所有错误信息\n              if (errorMessages.length > 0) {\n                ElMessage.error(errorMessages.join('\\n'));\n              } else {\n                ElMessage.error('密码修改失败，请检查输入');\n              }\n              _context9.next = 45;\n              break;\n            case 44:\n              // 如果错误信息是字符串，直接显示\n              ElMessage.error(response.msg || '密码修改失败');\n            case 45:\n              _context9.next = 68;\n              break;\n            case 47:\n              _context9.prev = 47;\n              _context9.t3 = _context9[\"catch\"](0);\n              console.error('密码修改失败:', _context9.t3);\n\n              // 显示详细的错误信息\n              if (!(_context9.t3.response && _context9.t3.response.data)) {\n                _context9.next = 67;\n                break;\n              }\n              responseData = _context9.t3.response.data; // 如果错误信息是对象，提取具体错误信息\n              if (!(responseData && _typeof(responseData.msg) === 'object')) {\n                _context9.next = 64;\n                break;\n              }\n              _errorMessages = []; // 遍历错误对象的所有字段\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2(_field) {\n                var errors;\n                return _regeneratorRuntime().wrap(function _loop2$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      errors = responseData.msg[_field];\n                      if (Array.isArray(errors)) {\n                        // 如果是数组，添加每个错误信息\n                        errors.forEach(function (err) {\n                          _errorMessages.push(\"\".concat(_field, \": \").concat(err));\n                        });\n                      } else if (typeof errors === 'string') {\n                        // 如果是字符串，直接添加\n                        _errorMessages.push(\"\".concat(_field, \": \").concat(errors));\n                      }\n                    case 2:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _loop2);\n              });\n              _context9.t4 = _regeneratorRuntime().keys(responseData.msg);\n            case 56:\n              if ((_context9.t5 = _context9.t4()).done) {\n                _context9.next = 61;\n                break;\n              }\n              _field = _context9.t5.value;\n              return _context9.delegateYield(_loop2(_field), \"t6\", 59);\n            case 59:\n              _context9.next = 56;\n              break;\n            case 61:\n              // 显示所有错误信息\n              if (_errorMessages.length > 0) {\n                ElMessage.error(_errorMessages.join('\\n'));\n              } else {\n                ElMessage.error('密码修改失败，请检查输入');\n              }\n              _context9.next = 65;\n              break;\n            case 64:\n              // 如果错误信息是字符串或未定义，显示默认消息\n              ElMessage.error(responseData.msg || '密码修改失败');\n            case 65:\n              _context9.next = 68;\n              break;\n            case 67:\n              if (_context9.t3.message) {\n                ElMessage.error(\"\\u5BC6\\u7801\\u4FEE\\u6539\\u5931\\u8D25: \".concat(_context9.t3.message));\n              } else {\n                ElMessage.error('密码修改失败，请检查网络连接');\n              }\n            case 68:\n              _context9.prev = 68;\n              state.submitting = false;\n              return _context9.finish(68);\n            case 71:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee7, null, [[0, 47, 68, 71]]);\n      }));\n      return function submitPasswordForm() {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    // 发送私信\n    var sendMessage = function sendMessage() {\n      if (state.userProfile && state.userProfile.id) {\n        // 使用App.vue提供的全局方法打开聊天窗口\n        if (window.chatManager && typeof window.chatManager.openChat === 'function') {\n          window.chatManager.openChat(state.userProfile.id);\n          ElMessage.success(\"\\u5DF2\\u6253\\u5F00\\u4E0E\".concat(state.userProfile.nickname || state.userProfile.username, \"\\u7684\\u804A\\u5929\\u7A97\\u53E3\"));\n        } else {\n          // 使用路由导航到消息页面\n          router.push('/messages');\n          ElMessage.info('无法直接打开聊天窗口，已跳转到消息页面');\n        }\n      } else {\n        ElMessage.warning('无法获取用户ID，请稍后再试');\n      }\n    };\n\n    // 组件挂载后执行\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      return _regeneratorRuntime().wrap(function _callee8$(_context0) {\n        while (1) switch (_context0.prev = _context0.next) {\n          case 0:\n            console.log('Profile组件挂载，开始获取用户信息');\n            _context0.next = 3;\n            return fetchUserProfile();\n          case 3:\n            // 根据激活的标签页加载数据\n            console.log('当前激活的标签页:', state.activeTab);\n            if (!(state.activeTab === 'posts')) {\n              _context0.next = 10;\n              break;\n            }\n            console.log('开始获取用户帖子');\n            _context0.next = 8;\n            return fetchUserPosts();\n          case 8:\n            _context0.next = 20;\n            break;\n          case 10:\n            if (!(state.activeTab === 'comments')) {\n              _context0.next = 16;\n              break;\n            }\n            console.log('开始获取用户评论');\n            _context0.next = 14;\n            return fetchUserComments();\n          case 14:\n            _context0.next = 20;\n            break;\n          case 16:\n            if (!(state.activeTab === 'favorites')) {\n              _context0.next = 20;\n              break;\n            }\n            console.log('开始获取用户收藏');\n            _context0.next = 20;\n            return fetchUserFavorites();\n          case 20:\n            // 无论当前标签页是什么，都预加载评论数据\n            if (state.activeTab !== 'comments') {\n              console.log('预加载用户评论数据');\n              fetchUserComments();\n            }\n          case 21:\n          case \"end\":\n            return _context0.stop();\n        }\n      }, _callee8);\n    })));\n    return _objectSpread(_objectSpread({}, toRefs(state)), {}, {\n      userId: userId,\n      isCurrentUser: isCurrentUser,\n      formatDate: formatDate,\n      handleTabClick: handleTabClick,\n      handlePostsPageChange: handlePostsPageChange,\n      handleCommentsPageChange: handleCommentsPageChange,\n      handleFavoritesPageChange: handleFavoritesPageChange,\n      viewPost: viewPost,\n      showEditProfileDialog: showEditProfileDialog,\n      // handleNicknameInput 已移除\n      beforeAvatarUpload: beforeAvatarUpload,\n      handleAvatarUpload: handleAvatarUpload,\n      submitProfileForm: submitProfileForm,\n      showChangePasswordDialog: showChangePasswordDialog,\n      submitPasswordForm: submitPasswordForm,\n      sendMessage: sendMessage\n    });\n  }\n};","map":{"version":3,"names":["computed","onMounted","toRefs","reactive","useRoute","useRouter","useStore","ElMessage","formatDateTime","UserAvatar","getUserProfile","getUserById","updateUserProfile","getUserPosts","getUserComments","getUserFavorites","uploadAvatar","changePassword","formatDate","date","name","components","setup","route","router","store","state","loading","userProfile","userStats","posts_count","comments_count","favorites_count","activeTab","postsLoading","posts","postsTotal","postsQuery","page","limit","commentsLoading","comments","commentsTotal","commentsQuery","favoritesLoading","favorites","favoritesTotal","favoritesQuery","editProfileDialogVisible","nicknameInput","avatarUrlInput","profileForm","nickname","avatar_url","profileRules","max","message","trigger","uploadHeaders","Authorization","concat","localStorage","getItem","submitting","imageUploading","changePasswordDialogVisible","passwordForm","old_password","new_password","confirm_password","passwordRules","required","min","validator","rule","value","callback","Error","userId","params","id","isCurrentUser","getters","toString","query","tab","includes","fetchUserProfile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","wrap","_callee$","_context","prev","next","console","log","sent","code","data","error","abrupt","t0","finish","stop","apply","arguments","fetchUserPosts","_ref2","_callee2","_callee2$","_context2","results","count","Array","isArray","length","fetchUserComments","_ref3","_callee3","_callee3$","_context3","fetchUserFavorites","_ref4","_callee4","_callee4$","_context4","handleTabClick","handlePostsPageChange","handleCommentsPageChange","handleFavoritesPageChange","viewPost","post","push","showEditProfileDialog","_state$userProfile","_state$userProfile2","_state$userProfile3","_state$userProfile4","beforeAvatarUpload","file","isImage","type","startsWith","isLt2M","size","handleAvatarUpload","_ref5","_callee5","options","formData","_response$data","avatarUrl","fullAvatarUrl","_callee5$","_context5","FormData","append","status","dispatch","_objectSpread","userInfo","then","success","msg","statusText","request","_x","submitProfileForm","_ref6","_callee6","_callee6$","_context6","t1","showChangePasswordDialog","submitPasswordForm","_ref7","_callee7","requestData","errorMessages","_loop","field","responseData","_errorMessages","_loop2","_field","_callee7$","_context9","_typeof","errors","_loop$","_context7","forEach","keys","done","delegateYield","join","t3","_loop2$","_context8","err","t4","t5","sendMessage","window","chatManager","openChat","username","info","warning","_callee8","_callee8$","_context0"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\user\\Profile.vue"],"sourcesContent":["<template>\n  <div class=\"profile-container\">\n    <el-row :gutter=\"20\">\n      <!-- 左侧用户信息卡片 -->\n      <el-col :span=\"6\">\n        <el-card class=\"profile-card\">\n          <div v-if=\"loading\" class=\"loading-container\">\n            <el-skeleton :rows=\"5\" animated />\n          </div>\n          <div v-else class=\"user-info\">\n            <div class=\"avatar-container\">\n              <user-avatar :user=\"userProfile\" :size=\"100\" />\n            </div>\n            <h2 class=\"username\">{{ userProfile.nickname || userProfile.username }}</h2>\n            <div class=\"user-meta\">\n              <div class=\"meta-item\">\n                <i class=\"el-icon-user\"></i>\n                <span>{{ userProfile.username }}</span>\n              </div>\n              <div class=\"meta-item\">\n                <i class=\"el-icon-message\"></i>\n                <span>{{ userProfile.email }}</span>\n              </div>\n              <div class=\"meta-item\">\n                <i class=\"el-icon-date\"></i>\n                <span>注册于 {{ formatDate(userProfile.created_at) }}</span>\n              </div>\n              <div class=\"meta-item\">\n                <i class=\"el-icon-time\"></i>\n                <span>最后登录 {{ formatDate(userProfile.last_login) }}</span>\n              </div>\n            </div>\n\n            <div class=\"user-stats\">\n              <div class=\"stat-item\">\n                <div class=\"stat-value\">{{ userStats.posts_count || 0 }}</div>\n                <div class=\"stat-label\">帖子</div>\n              </div>\n              <div class=\"stat-item\">\n                <div class=\"stat-value\">{{ userStats.comments_count || 0 }}</div>\n                <div class=\"stat-label\">评论</div>\n              </div>\n              <div class=\"stat-item\">\n                <div class=\"stat-value\">{{ userStats.favorites_count || 0 }}</div>\n                <div class=\"stat-label\">收藏</div>\n              </div>\n            </div>\n\n            <div v-if=\"isCurrentUser\" class=\"user-actions\">\n              <el-button type=\"primary\" @click=\"showEditProfileDialog\">编辑资料</el-button>\n              <el-button @click=\"showChangePasswordDialog\" class=\"user-actions-button\">修改密码</el-button>\n            </div>\n            \n            <!-- 不是当前用户时显示发送私信按钮 -->\n            <div v-else class=\"user-actions\">\n              <el-button type=\"primary\" @click=\"sendMessage\">发送私信</el-button>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n\n      <!-- 右侧内容区域 -->\n      <el-col :span=\"18\">\n        <el-card class=\"content-card\">\n          <el-tabs v-model=\"activeTab\" @tab-click=\"handleTabClick\">\n            <el-tab-pane label=\"我的帖子\" name=\"posts\">\n              <div v-if=\"postsLoading\" class=\"loading-container\">\n                <el-skeleton :rows=\"5\" animated />\n              </div>\n              <div v-else-if=\"posts.length === 0\" class=\"empty-container\">\n                <el-empty description=\"暂无帖子\" />\n              </div>\n              <div v-else class=\"post-list\">\n                <div\n                  v-for=\"post in posts\"\n                  :key=\"post.id\"\n                  class=\"post-item\"\n                  @click=\"viewPost(post)\"\n                >\n                  <div class=\"post-title\">\n                    <el-tag v-if=\"post.is_pinned\" size=\"small\" type=\"danger\">置顶</el-tag>\n                    <el-tag v-if=\"post.is_featured\" size=\"small\" type=\"success\">精华</el-tag>\n                    <span>{{ post.title }}</span>\n                  </div>\n                  <div class=\"post-meta\">\n                    <div class=\"post-board\">\n                      <i class=\"el-icon-s-grid\"></i>\n                      <span>{{ post.board_name }}</span>\n                    </div>\n                    <div class=\"post-stats\">\n                      <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n                      <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n                      <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n                    </div>\n                    <div class=\"post-time\">{{ formatDate(post.created_at) }}</div>\n                  </div>\n                </div>\n\n                <!-- 分页 -->\n                <div v-if=\"posts.length > 0\" class=\"pagination-container\">\n                  <el-pagination\n                    background\n                    layout=\"prev, pager, next\"\n                    :total=\"postsTotal\"\n                    :page-size=\"postsQuery.limit\"\n                    :current-page=\"postsQuery.page\"\n                    @update:current-page=\"handlePostsPageChange\"\n                  >\n                  </el-pagination>\n                </div>\n              </div>\n            </el-tab-pane>\n\n            <el-tab-pane label=\"我的评论\" name=\"comments\">\n              <div v-if=\"commentsLoading\" class=\"loading-container\">\n                <el-skeleton :rows=\"5\" animated />\n              </div>\n              <div v-else-if=\"comments.length === 0\" class=\"empty-container\">\n                <el-empty description=\"暂无评论\" />\n              </div>\n              <div v-else class=\"comment-list\">\n                <div\n                  v-for=\"comment in comments\"\n                  :key=\"comment.id\"\n                  class=\"comment-item\"\n                >\n                  <div class=\"comment-content\">{{ comment.content }}</div>\n                  <div class=\"comment-meta\">\n                    <div class=\"comment-post\" @click=\"viewPost({ id: comment.post })\">\n                      <i class=\"el-icon-document\"></i>\n                      <span>查看原帖</span>\n                    </div>\n                    <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n                  </div>\n                </div>\n\n                <!-- 分页 -->\n                <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n                  <el-pagination\n                    background\n                    layout=\"prev, pager, next\"\n                    :total=\"commentsTotal\"\n                    :page-size=\"commentsQuery.limit\"\n                    :current-page=\"commentsQuery.page\"\n                    @update:current-page=\"handleCommentsPageChange\"\n                  >\n                  </el-pagination>\n                </div>\n              </div>\n            </el-tab-pane>\n\n            <el-tab-pane label=\"我的收藏\" name=\"favorites\">\n              <div v-if=\"favoritesLoading\" class=\"loading-container\">\n                <el-skeleton :rows=\"5\" animated />\n              </div>\n              <div v-else-if=\"favorites.length === 0\" class=\"empty-container\">\n                <el-empty description=\"暂无收藏\" />\n              </div>\n              <div v-else class=\"favorite-list\">\n                <div\n                  v-for=\"favorite in favorites\"\n                  :key=\"favorite.id\"\n                  class=\"favorite-item\"\n                  @click=\"viewPost(favorite.post)\"\n                >\n                  <div class=\"post-title\">\n                    <el-tag v-if=\"favorite.post.is_pinned\" size=\"small\" type=\"danger\">置顶</el-tag>\n                    <el-tag v-if=\"favorite.post.is_featured\" size=\"small\" type=\"success\">精华</el-tag>\n                    <span>{{ favorite.post.title }}</span>\n                  </div>\n                  <div class=\"post-meta\">\n                    <div class=\"post-author\">\n                      <i class=\"el-icon-user\"></i>\n                      <span>{{ favorite.post.user.nickname || favorite.post.user.username }}</span>\n                    </div>\n                    <div class=\"post-board\">\n                      <i class=\"el-icon-s-grid\"></i>\n                      <span>{{ favorite.post.board_name }}</span>\n                    </div>\n                    <div class=\"post-stats\">\n                      <span><i class=\"el-icon-view\"></i> {{ favorite.post.views }}</span>\n                      <span><i class=\"el-icon-star-on\"></i> {{ favorite.post.likes_count }}</span>\n                      <span><i class=\"el-icon-chat-dot-round\"></i> {{ favorite.post.comments_count }}</span>\n                    </div>\n                    <div class=\"post-time\">{{ formatDate(favorite.created_at) }}</div>\n                  </div>\n                </div>\n\n                <!-- 分页 -->\n                <div v-if=\"favorites.length > 0\" class=\"pagination-container\">\n                  <el-pagination\n                    background\n                    layout=\"prev, pager, next\"\n                    :total=\"favoritesTotal\"\n                    :page-size=\"favoritesQuery.limit\"\n                    :current-page=\"favoritesQuery.page\"\n                    @update:current-page=\"handleFavoritesPageChange\"\n                  >\n                  </el-pagination>\n                </div>\n              </div>\n            </el-tab-pane>\n          </el-tabs>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 编辑资料对话框 -->\n    <el-dialog\n      title=\"编辑个人资料\"\n      v-model=\"editProfileDialogVisible\"\n      width=\"500px\"\n      destroy-on-close\n    >\n      <div class=\"simple-form\">\n        <div class=\"form-item\">\n          <label>昵称：</label>\n          <input\n            type=\"text\"\n            v-model=\"nicknameInput\"\n            placeholder=\"请输入昵称\"\n            class=\"simple-input\"\n          >\n        </div>\n\n        <div class=\"form-item\">\n          <label>头像：</label>\n          <div class=\"avatar-preview\">\n            <user-avatar :user=\"{nickname: nicknameInput, username: userProfile.username, avatar_url: avatarUrlInput}\" :size=\"80\" />\n          </div>\n          <div class=\"upload-options\">\n            <el-upload\n              class=\"avatar-uploader\"\n              action=\"#\"\n              :http-request=\"handleAvatarUpload\"\n              :show-file-list=\"false\"\n              :before-upload=\"beforeAvatarUpload\"\n            >\n              <el-button type=\"primary\" size=\"small\">上传头像</el-button>\n            </el-upload>\n            <div class=\"url-input\">\n              <p class=\"hint-text\">或者直接输入图片URL：</p>\n              <input\n                type=\"text\"\n                v-model=\"avatarUrlInput\"\n                placeholder=\"请输入头像URL\"\n                class=\"simple-input\"\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"editProfileDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitProfileForm\" :loading=\"submitting\">确 定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 修改密码对话框 -->\n    <el-dialog\n      title=\"修改密码\"\n      v-model=\"changePasswordDialogVisible\"\n      width=\"500px\"\n      destroy-on-close\n    >\n      <form class=\"simple-form\" @submit.prevent=\"submitPasswordForm\">\n        <div class=\"form-item\">\n          <label>当前密码：</label>\n          <input\n            type=\"password\"\n            v-model=\"passwordForm.old_password\"\n            placeholder=\"请输入当前密码\"\n            class=\"simple-input\"\n            name=\"old_password\"\n            autocomplete=\"current-password\"\n          >\n        </div>\n        <div class=\"form-item\">\n          <label>新密码：</label>\n          <input\n            type=\"password\"\n            v-model=\"passwordForm.new_password\"\n            placeholder=\"请输入新密码\"\n            class=\"simple-input\"\n            name=\"new_password\"\n            autocomplete=\"new-password\"\n          >\n        </div>\n        <div class=\"form-item\">\n          <label>确认新密码：</label>\n          <input\n            type=\"password\"\n            v-model=\"passwordForm.confirm_password\"\n            placeholder=\"请再次输入新密码\"\n            class=\"simple-input\"\n            name=\"confirm_password\"\n            autocomplete=\"new-password\"\n          >\n        </div>\n      </form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"changePasswordDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitPasswordForm\" :loading=\"submitting\">确 定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { computed, onMounted, toRefs, reactive } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport { formatDateTime } from '@/utils/index'\nimport UserAvatar from '@/components/UserAvatar.vue'\nimport {\n  getUserProfile,\n  getUserById,\n  updateUserProfile,\n  getUserPosts,\n  getUserComments,\n  getUserFavorites,\n  uploadAvatar,\n  changePassword\n} from '@/api/profile'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'UserProfile',\n  components: {\n    UserAvatar\n  },\n  setup() {\n    const route = useRoute()\n    const router = useRouter()\n    const store = useStore()\n\n    // 状态\n    const state = reactive({\n      loading: false,\n      userProfile: {},\n      userStats: {\n        posts_count: 0,\n        comments_count: 0,\n        favorites_count: 0\n      },\n      activeTab: 'posts',\n\n      // 帖子相关\n      postsLoading: false,\n      posts: [],\n      postsTotal: 0,\n      postsQuery: {\n        page: 1,\n        limit: 10\n      },\n\n      // 评论相关\n      commentsLoading: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n\n      // 收藏相关\n      favoritesLoading: false,\n      favorites: [],\n      favoritesTotal: 0,\n      favoritesQuery: {\n        page: 1,\n        limit: 10\n      },\n\n      // 编辑资料相关\n      editProfileDialogVisible: false,\n      // 使用简单的变量存储表单数据\n      nicknameInput: '',\n      avatarUrlInput: '',\n      // 保留原来的表单对象以兼容其他代码\n      profileForm: {\n        nickname: '',\n        avatar_url: ''\n      },\n      profileRules: {\n        nickname: [\n          { max: 50, message: '昵称不能超过50个字符', trigger: 'blur' }\n        ]\n      },\n      uploadHeaders: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      submitting: false,\n      imageUploading: false,\n\n      // 修改密码相关\n      changePasswordDialogVisible: false,\n      passwordForm: {\n        old_password: '',\n        new_password: '',\n        confirm_password: ''\n      },\n      passwordRules: {\n        old_password: [\n          { required: true, message: '请输入当前密码', trigger: 'blur' }\n        ],\n        new_password: [\n          { required: true, message: '请输入新密码', trigger: 'blur' },\n          { min: 6, message: '密码长度不能少于6个字符', trigger: 'blur' }\n        ],\n        confirm_password: [\n          { required: true, message: '请再次输入新密码', trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (value !== state.passwordForm.new_password) {\n                callback(new Error('两次输入的密码不一致'))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'blur'\n          }\n        ]\n      }\n    })\n\n    // 计算属性\n    const userId = computed(() => route.params.id || 'me')\n    const isCurrentUser = computed(() => !route.params.id || route.params.id === 'me' || route.params.id === store.getters.userId.toString())\n\n    // 从查询参数中获取激活的标签页\n    if (route.query.tab && ['posts', 'comments', 'favorites'].includes(route.query.tab)) {\n      state.activeTab = route.query.tab\n    }\n\n    // 获取用户信息\n    const fetchUserProfile = async () => {\n      state.loading = true\n      try {\n        // 检查本地存储的token\n        const token = localStorage.getItem('token')\n        console.log('获取用户信息前的token:', token)\n\n        let response\n        if (userId.value === 'me' || !userId.value) {\n          console.log('获取当前用户信息')\n          response = await getUserProfile()\n        } else {\n          console.log('获取指定用户信息:', userId.value)\n          response = await getUserById(userId.value)\n        }\n\n        console.log('用户信息响应:', response)\n\n        // 处理不同的响应格式\n        if (response.code === 0) {\n          state.userProfile = response.data\n        } else if (response.id) {\n          // 直接返回了用户对象\n          state.userProfile = response\n        } else {\n          ElMessage.error('获取用户信息失败: 响应格式不正确')\n          console.error('响应格式不正确:', response)\n          return\n        }\n\n        // 初始化编辑表单\n        if (!state.profileForm) {\n          state.profileForm = {\n            nickname: state.userProfile.nickname || '',\n            avatar_url: state.userProfile.avatar_url || ''\n          }\n        } else {\n          state.profileForm.nickname = state.userProfile.nickname || ''\n          state.profileForm.avatar_url = state.userProfile.avatar_url || ''\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        ElMessage.error('获取用户信息失败')\n      } finally {\n        state.loading = false\n      }\n    }\n\n    // 获取用户帖子\n    const fetchUserPosts = async () => {\n      state.postsLoading = true\n      try {\n        // 检查本地存储的token\n        const token = localStorage.getItem('token')\n        console.log('获取用户帖子前的token:', token)\n\n        const response = await getUserPosts(userId.value)\n        console.log('用户帖子响应:', response)\n\n        // 处理不同的响应格式\n        if (response.code === 0 && response.data) {\n          // 标准格式响应\n          state.posts = response.data.results || []\n          state.postsTotal = response.data.count || 0\n          state.userStats.posts_count = response.data.count || 0\n        } else if (response.results) {\n          // DRF分页响应格式\n          state.posts = response.results || []\n          state.postsTotal = response.count || 0\n          state.userStats.posts_count = response.count || 0\n        } else if (Array.isArray(response)) {\n          // 直接返回数组\n          state.posts = response\n          state.postsTotal = response.length\n          state.userStats.posts_count = response.length\n        } else {\n          // 其他格式\n          console.error('响应格式不正确:', response)\n          ElMessage.error('获取用户帖子失败: 响应格式不正确')\n          return\n        }\n      } catch (error) {\n        console.error('获取用户帖子失败:', error)\n        ElMessage.error('获取用户帖子失败')\n      } finally {\n        state.postsLoading = false\n      }\n    }\n\n    // 获取用户评论\n    const fetchUserComments = async () => {\n      state.commentsLoading = true\n      try {\n        console.log('开始获取用户评论，用户ID:', userId.value)\n        const response = await getUserComments(userId.value)\n        console.log('用户评论响应:', response)\n\n        // 处理不同的响应格式\n        if (response.code === 0 && response.data) {\n          // 标准格式响应\n          console.log('标准格式响应，评论数据:', response.data)\n          state.comments = response.data.results || []\n          state.commentsTotal = response.data.count || 0\n          state.userStats.comments_count = response.data.count || 0\n        } else if (response.results) {\n          // DRF分页响应格式\n          console.log('DRF分页响应格式，评论数据:', response.results)\n          state.comments = response.results || []\n          state.commentsTotal = response.count || 0\n          state.userStats.comments_count = response.count || 0\n        } else if (Array.isArray(response)) {\n          // 直接返回数组\n          console.log('直接返回数组格式，评论数据:', response)\n          state.comments = response\n          state.commentsTotal = response.length\n          state.userStats.comments_count = response.length\n        } else {\n          // 其他格式\n          console.error('响应格式不正确:', response)\n          ElMessage.error('获取用户评论失败: 响应格式不正确')\n          return\n        }\n        \n        // 打印获取到的评论数据\n        console.log('最终获取到的评论数据:', state.comments)\n        console.log('评论总数:', state.commentsTotal)\n      } catch (error) {\n        console.error('获取用户评论失败:', error)\n        ElMessage.error('获取用户评论失败')\n      } finally {\n        state.commentsLoading = false\n      }\n    }\n\n    // 获取用户收藏\n    const fetchUserFavorites = async () => {\n      state.favoritesLoading = true\n      try {\n        const response = await getUserFavorites(userId.value)\n        console.log('用户收藏响应:', response)\n\n        // 处理不同的响应格式\n        if (response.code === 0 && response.data) {\n          // 标准格式响应\n          state.favorites = response.data.results || []\n          state.favoritesTotal = response.data.count || 0\n          state.userStats.favorites_count = response.data.count || 0\n        } else if (response.results) {\n          // DRF分页响应格式\n          state.favorites = response.results || []\n          state.favoritesTotal = response.count || 0\n          state.userStats.favorites_count = response.count || 0\n        } else if (Array.isArray(response)) {\n          // 直接返回数组\n          state.favorites = response\n          state.favoritesTotal = response.length\n          state.userStats.favorites_count = response.length\n        } else {\n          // 其他格式\n          console.error('响应格式不正确:', response)\n          ElMessage.error('获取用户收藏失败: 响应格式不正确')\n          return\n        }\n      } catch (error) {\n        console.error('获取用户收藏失败:', error)\n        ElMessage.error('获取用户收藏失败')\n      } finally {\n        state.favoritesLoading = false\n      }\n    }\n\n    // 处理标签页切换\n    const handleTabClick = (tab) => {\n      state.activeTab = tab.name\n\n      if (tab.name === 'posts' && state.posts.length === 0) {\n        fetchUserPosts()\n      } else if (tab.name === 'comments' && state.comments.length === 0) {\n        fetchUserComments()\n      } else if (tab.name === 'favorites' && state.favorites.length === 0) {\n        fetchUserFavorites()\n      }\n    }\n\n    // 处理帖子分页变化\n    const handlePostsPageChange = (page) => {\n      console.log('帖子分页变化:', page)\n      state.postsQuery.page = page\n      fetchUserPosts()\n    }\n\n    // 处理评论分页变化\n    const handleCommentsPageChange = (page) => {\n      console.log('评论分页变化:', page)\n      state.commentsQuery.page = page\n      fetchUserComments()\n    }\n\n    // 处理收藏分页变化\n    const handleFavoritesPageChange = (page) => {\n      console.log('收藏分页变化:', page)\n      state.favoritesQuery.page = page\n      fetchUserFavorites()\n    }\n\n    // 查看帖子\n    const viewPost = (post) => {\n      router.push({ name: 'PostDetail', params: { id: post.id } })\n    }\n\n    // 显示编辑资料对话框\n    const showEditProfileDialog = () => {\n      try {\n        console.log('点击编辑资料按钮')\n\n        // 设置输入框的初始值\n        state.nicknameInput = state.userProfile?.nickname || ''\n        state.avatarUrlInput = state.userProfile?.avatar_url || ''\n\n        // 同时也设置原来的表单对象，以兼容其他代码\n        state.profileForm.nickname = state.userProfile?.nickname || ''\n        state.profileForm.avatar_url = state.userProfile?.avatar_url || ''\n\n        console.log('设置表单数据:', {\n          nicknameInput: state.nicknameInput,\n          avatarUrlInput: state.avatarUrlInput\n        })\n\n        // 更新上传头部以确保使用最新的token\n        state.uploadHeaders = {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n\n        // 显示对话框\n        state.editProfileDialogVisible = true\n      } catch (error) {\n        console.error('显示编辑资料对话框出错:', error)\n        ElMessage.error('显示编辑资料对话框出错')\n      }\n    }\n\n    // 头像上传前的验证\n    const beforeAvatarUpload = (file) => {\n      state.imageUploading = true\n      const isImage = file.type.startsWith('image/')\n      const isLt2M = file.size / 1024 / 1024 < 2\n\n      if (!isImage) {\n        ElMessage.error('头像必须是图片格式!')\n        state.imageUploading = false\n        return false\n      }\n      if (!isLt2M) {\n        ElMessage.error('头像大小不能超过 2MB!')\n        state.imageUploading = false\n        return false\n      }\n      return true\n    }\n\n    // 处理头像上传\n    const handleAvatarUpload = async (options) => {\n      const { file } = options\n      state.imageUploading = true\n\n      try {\n        console.log('开始上传头像，文件信息:', {\n          name: file.name,\n          type: file.type,\n          size: file.size\n        })\n\n        // 创建FormData\n        const formData = new FormData()\n        formData.append('file', file)\n\n        // 检查token\n        const token = localStorage.getItem('token')\n        console.log('上传头像前的token:', token)\n\n        // 调用上传API\n        console.log('调用上传API，URL:', '/api/v1/users/profile/me/avatar/')\n        const response = await uploadAvatar(formData)\n        console.log('头像上传响应:', response)\n\n        if (response.status === 0 || response.code === 0) {\n          // 更新两个地方的头像地址\n          const avatarUrl = response.data?.avatar_url || ''\n          console.log('获取到的头像URL:', avatarUrl)\n          state.avatarUrlInput = avatarUrl\n          state.profileForm.avatar_url = avatarUrl\n\n          // 立即更新用户信息中的头像\n          // 确保头像 URL 是完整的\n          const fullAvatarUrl = avatarUrl.startsWith('http') ? avatarUrl : `http://localhost:8000${avatarUrl}`\n          console.log('完整的头像 URL:', fullAvatarUrl)\n          state.userProfile.avatar_url = fullAvatarUrl\n\n          // 更新Vuex中的用户信息\n          store.dispatch('updateUserInfo', {\n            ...store.getters.userInfo,\n            avatar_url: fullAvatarUrl\n          })\n\n          // 自动保存用户资料\n          // 注意：保存到后端的头像 URL 应该保持原样，不需要完整路径\n          updateUserProfile({\n            nickname: state.nicknameInput || state.userProfile.nickname || '',\n            avatar_url: avatarUrl  // 使用原始的相对路径\n          }).then(response => {\n            console.log('自动保存用户资料响应:', response)\n          }).catch(error => {\n            console.error('自动保存用户资料失败:', error)\n          })\n\n          ElMessage.success('头像上传成功')\n        } else {\n          console.error('头像上传失败，响应:', response)\n          ElMessage.error(response.msg || '头像上传失败')\n        }\n      } catch (error) {\n        console.error('头像上传失败:', error)\n        // 显示更详细的错误信息\n        if (error.response) {\n          console.error('错误响应:', error.response)\n          ElMessage.error(`头像上传失败: ${error.response.status} ${error.response.statusText}`)\n        } else if (error.request) {\n          console.error('请求未收到响应:', error.request)\n          ElMessage.error('头像上传失败: 服务器未响应')\n        } else {\n          console.error('请求配置错误:', error.message)\n          ElMessage.error(`头像上传失败: ${error.message}`)\n        }\n      } finally {\n        state.imageUploading = false\n      }\n    }\n\n    // 提交编辑资料表单\n    const submitProfileForm = async () => {\n      try {\n        console.log('提交编辑资料表单')\n        console.log('表单数据:', {\n          nicknameInput: state.nicknameInput,\n          avatarUrlInput: state.avatarUrlInput\n        })\n\n        state.submitting = true\n\n        // 准备要提交的数据\n        const formData = {\n          nickname: state.nicknameInput || '',\n          avatar_url: state.avatarUrlInput || ''\n        }\n\n        try {\n          // 先关闭对话框，避免用户等待\n          state.editProfileDialogVisible = false\n\n          const response = await updateUserProfile(formData)\n          console.log('更新用户资料响应:', response)\n\n          // 刷新用户信息，以确保显示最新数据\n          await fetchUserProfile()\n\n          // 更新Vuex中的用户信息\n          store.dispatch('updateUserInfo', {\n            ...store.getters.userInfo,\n            nickname: formData.nickname,\n            avatar_url: formData.avatar_url\n          })\n\n          // 显示成功消息\n          ElMessage.success('个人资料更新成功')\n        } catch (apiError) {\n          console.error('调用API更新用户资料失败:', apiError)\n\n          // 尝试刷新用户信息，查看是否实际更新成功\n          await fetchUserProfile()\n\n          // 显示错误消息\n          ElMessage.error('个人资料更新失败，请刷新页面查看最新状态')\n        }\n      } catch (error) {\n        console.error('个人资料更新失败:', error)\n        ElMessage.error('个人资料更新失败')\n        // 关闭对话框\n        state.editProfileDialogVisible = false\n      } finally {\n        state.submitting = false\n      }\n    }\n\n    // 显示修改密码对话框\n    const showChangePasswordDialog = () => {\n      state.changePasswordDialogVisible = true\n      state.passwordForm = {\n        old_password: '',\n        new_password: '',\n        confirm_password: ''\n      }\n    }\n\n    // 提交修改密码表单\n    const submitPasswordForm = async () => {\n      try {\n        console.log('提交修改密码表单')\n\n        // 确保表单数据存在\n        if (!state.passwordForm) {\n          ElMessage.error('密码表单数据不存在')\n          return\n        }\n\n        // 验证密码\n        if (!state.passwordForm.old_password) {\n          ElMessage.error('请输入当前密码')\n          return\n        }\n\n        if (!state.passwordForm.new_password) {\n          ElMessage.error('请输入新密码')\n          return\n        }\n\n        if (state.passwordForm.new_password !== state.passwordForm.confirm_password) {\n          ElMessage.error('两次输入的密码不一致')\n          return\n        }\n\n        // 密码长度验证\n        if (state.passwordForm.new_password.length < 6) {\n          ElMessage.error('新密码长度不能少于6个字符')\n          return\n        }\n\n        state.submitting = true\n\n        // 准备请求数据\n        const requestData = {\n          old_password: state.passwordForm.old_password,\n          new_password: state.passwordForm.new_password,\n          confirm_password: state.passwordForm.confirm_password\n        }\n\n        console.log('发送修改密码请求:', requestData)\n\n        // 使用导入的changePassword函数发送请求\n        // 这样可以确保使用与其他API请求相同的配置\n        const response = await changePassword(requestData)\n\n        console.log('修改密码响应:', response)\n\n        if (response.code === 0 || response.status === 0) {\n          ElMessage.success(response.msg || '密码修改成功，请重新登录')\n          state.changePasswordDialogVisible = false\n\n          // 退出登录\n          store.dispatch('logout')\n          router.push('/login')\n        } else {\n          // 处理错误信息\n          console.error('密码修改失败，错误信息:', response.msg)\n\n          // 如果错误信息是对象，提取具体错误信息\n          if (typeof response.msg === 'object') {\n            const errorMessages = []\n\n            // 遍历错误对象的所有字段\n            for (const field in response.msg) {\n              const errors = response.msg[field]\n              if (Array.isArray(errors)) {\n                // 如果是数组，添加每个错误信息\n                errors.forEach(error => {\n                  errorMessages.push(`${field}: ${error}`)\n                })\n              } else if (typeof errors === 'string') {\n                // 如果是字符串，直接添加\n                errorMessages.push(`${field}: ${errors}`)\n              }\n            }\n\n            // 显示所有错误信息\n            if (errorMessages.length > 0) {\n              ElMessage.error(errorMessages.join('\\n'))\n            } else {\n              ElMessage.error('密码修改失败，请检查输入')\n            }\n          } else {\n            // 如果错误信息是字符串，直接显示\n            ElMessage.error(response.msg || '密码修改失败')\n          }\n        }\n      } catch (error) {\n        console.error('密码修改失败:', error)\n\n        // 显示详细的错误信息\n        if (error.response && error.response.data) {\n          const responseData = error.response.data\n\n          // 如果错误信息是对象，提取具体错误信息\n          if (responseData && typeof responseData.msg === 'object') {\n            const errorMessages = []\n\n            // 遍历错误对象的所有字段\n            for (const field in responseData.msg) {\n              const errors = responseData.msg[field]\n              if (Array.isArray(errors)) {\n                // 如果是数组，添加每个错误信息\n                errors.forEach(err => {\n                  errorMessages.push(`${field}: ${err}`)\n                })\n              } else if (typeof errors === 'string') {\n                // 如果是字符串，直接添加\n                errorMessages.push(`${field}: ${errors}`)\n              }\n            }\n\n            // 显示所有错误信息\n            if (errorMessages.length > 0) {\n              ElMessage.error(errorMessages.join('\\n'))\n            } else {\n              ElMessage.error('密码修改失败，请检查输入')\n            }\n          } else {\n            // 如果错误信息是字符串或未定义，显示默认消息\n            ElMessage.error((responseData.msg) || '密码修改失败')\n          }\n        } else if (error.message) {\n          ElMessage.error(`密码修改失败: ${error.message}`)\n        } else {\n          ElMessage.error('密码修改失败，请检查网络连接')\n        }\n      } finally {\n        state.submitting = false\n      }\n    }\n\n    // 发送私信\n    const sendMessage = () => {\n      if (state.userProfile && state.userProfile.id) {\n        // 使用App.vue提供的全局方法打开聊天窗口\n        if (window.chatManager && typeof window.chatManager.openChat === 'function') {\n          window.chatManager.openChat(state.userProfile.id);\n          ElMessage.success(`已打开与${state.userProfile.nickname || state.userProfile.username}的聊天窗口`);\n        } else {\n          // 使用路由导航到消息页面\n          router.push('/messages');\n          ElMessage.info('无法直接打开聊天窗口，已跳转到消息页面');\n        }\n      } else {\n        ElMessage.warning('无法获取用户ID，请稍后再试');\n      }\n    }\n\n    // 组件挂载后执行\n    onMounted(async () => {\n      console.log('Profile组件挂载，开始获取用户信息')\n      await fetchUserProfile()\n\n      // 根据激活的标签页加载数据\n      console.log('当前激活的标签页:', state.activeTab)\n      if (state.activeTab === 'posts') {\n        console.log('开始获取用户帖子')\n        await fetchUserPosts()\n      } else if (state.activeTab === 'comments') {\n        console.log('开始获取用户评论')\n        await fetchUserComments()\n      } else if (state.activeTab === 'favorites') {\n        console.log('开始获取用户收藏')\n        await fetchUserFavorites()\n      }\n\n      // 无论当前标签页是什么，都预加载评论数据\n      if (state.activeTab !== 'comments') {\n        console.log('预加载用户评论数据')\n        fetchUserComments()\n      }\n    })\n\n    return {\n      ...toRefs(state),\n      userId,\n      isCurrentUser,\n      formatDate,\n      handleTabClick,\n      handlePostsPageChange,\n      handleCommentsPageChange,\n      handleFavoritesPageChange,\n      viewPost,\n      showEditProfileDialog,\n      // handleNicknameInput 已移除\n      beforeAvatarUpload,\n      handleAvatarUpload,\n      submitProfileForm,\n      showChangePasswordDialog,\n      submitPasswordForm,\n      sendMessage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.profile-container {\n  padding: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.profile-card,\n.content-card {\n  margin-bottom: 20px;\n}\n\n.user-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.avatar-container {\n  margin-bottom: 15px;\n}\n\n.username {\n  margin: 0 0 15px;\n  font-size: 20px;\n}\n\n.user-meta {\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.meta-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  color: #606266;\n}\n\n.meta-item i {\n  margin-right: 8px;\n  width: 16px;\n  text-align: center;\n}\n\n.user-stats {\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n  margin-bottom: 20px;\n  padding: 15px 0;\n  border-top: 1px solid #ebeef5;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.stat-item {\n  text-align: center;\n}\n\n.stat-value {\n  font-size: 20px;\n  font-weight: bold;\n  color: #409eff;\n}\n\n.stat-label {\n  font-size: 14px;\n  color: #606266;\n}\n\n.user-actions {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 10px;\n}\n\n.empty-container {\n  padding: 40px 0;\n}\n\n.post-list,\n.comment-list,\n.favorite-list {\n  margin-bottom: 20px;\n}\n\n.post-item,\n.favorite-item {\n  padding: 15px;\n  border-bottom: 1px solid #ebeef5;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.post-item:hover,\n.favorite-item:hover {\n  background-color: #f5f7fa;\n}\n\n.post-item:last-child,\n.favorite-item:last-child {\n  border-bottom: none;\n}\n\n.post-title {\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 8px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 13px;\n  color: #909399;\n}\n\n.post-board,\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.post-board i,\n.post-author i {\n  margin-right: 5px;\n}\n\n.post-stats {\n  display: flex;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.comment-item {\n  padding: 15px;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-content {\n  margin-bottom: 10px;\n  line-height: 1.5;\n  white-space: pre-wrap;\n}\n\n.comment-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 13px;\n  color: #909399;\n}\n\n.comment-post {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409eff;\n}\n\n.comment-post i {\n  margin-right: 5px;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n.avatar-upload-container {\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 15px;\n}\n\n.avatar-preview {\n  margin-right: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.upload-options {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.avatar-uploader {\n  margin-bottom: 15px;\n}\n\n.url-input {\n  margin-top: 10px;\n}\n\n.hint-text {\n  font-size: 12px;\n  color: #909399;\n  margin-bottom: 5px;\n}\n\n.debug-info {\n  font-size: 12px;\n  color: #409EFF;\n  margin-top: 5px;\n  padding: 5px;\n  background-color: #f0f9ff;\n  border-radius: 4px;\n}\n\n.simple-form {\n  padding: 10px;\n}\n\n.form-item {\n  margin-bottom: 20px;\n}\n\n.form-item label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n}\n\n.simple-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  font-size: 14px;\n  transition: border-color 0.2s;\n}\n\n.simple-input:focus {\n  outline: none;\n  border-color: #409EFF;\n}\n.user-actions-button{\n  margin-left:0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}