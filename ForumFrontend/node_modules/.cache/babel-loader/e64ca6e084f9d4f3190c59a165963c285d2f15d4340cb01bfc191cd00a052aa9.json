{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$2 = require('../../checkbox/index.js');\nvar index$3 = require('../../input/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar transferPanel = require('./transfer-panel2.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar usePropsAlias = require('./composables/use-props-alias.js');\nvar useCheck = require('./composables/use-check.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElTransferPanel\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: transferPanel.transferPanelProps,\n  emits: transferPanel.transferPanelEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var slots = vue.useSlots();\n    var OptionContent = function OptionContent(_ref2) {\n      var option = _ref2.option;\n      return option;\n    };\n    var _index$useLocale = index.useLocale(),\n      t = _index$useLocale.t;\n    var ns = index$1.useNamespace(\"transfer\");\n    var panelState = vue.reactive({\n      checked: [],\n      allChecked: false,\n      query: \"\",\n      checkChangeByUser: true\n    });\n    var propsAlias = usePropsAlias.usePropsAlias(props);\n    var _useCheck$useCheck = useCheck.useCheck(props, panelState, emit),\n      filteredData = _useCheck$useCheck.filteredData,\n      checkedSummary = _useCheck$useCheck.checkedSummary,\n      isIndeterminate = _useCheck$useCheck.isIndeterminate,\n      handleAllCheckedChange = _useCheck$useCheck.handleAllCheckedChange;\n    var hasNoMatch = vue.computed(function () {\n      return !types.isEmpty(panelState.query) && types.isEmpty(filteredData.value);\n    });\n    var hasFooter = vue.computed(function () {\n      return !types.isEmpty(slots[\"default\"]()[0].children);\n    });\n    var _vue$toRefs = vue.toRefs(panelState),\n      checked = _vue$toRefs.checked,\n      allChecked = _vue$toRefs.allChecked,\n      query = _vue$toRefs.query;\n    expose({\n      query: query\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).b(\"panel\"))\n      }, [vue.createElementVNode(\"p\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"panel\", \"header\"))\n      }, [vue.createVNode(vue.unref(index$2.ElCheckbox), {\n        modelValue: vue.unref(allChecked),\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return vue.isRef(allChecked) ? allChecked.value = $event : null;\n        },\n        indeterminate: vue.unref(isIndeterminate),\n        \"validate-event\": false,\n        onChange: vue.unref(handleAllCheckedChange)\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.createTextVNode(vue.toDisplayString(_ctx.title) + \" \", 1), vue.createElementVNode(\"span\", null, vue.toDisplayString(vue.unref(checkedSummary)), 1)];\n        }),\n        _: 1\n      }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"indeterminate\", \"onChange\"])], 2), vue.createElementVNode(\"div\", {\n        \"class\": vue.normalizeClass([vue.unref(ns).be(\"panel\", \"body\"), vue.unref(ns).is(\"with-footer\", vue.unref(hasFooter))])\n      }, [_ctx.filterable ? (vue.openBlock(), vue.createBlock(vue.unref(index$3.ElInput), {\n        key: 0,\n        modelValue: vue.unref(query),\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return vue.isRef(query) ? query.value = $event : null;\n        },\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"panel\", \"filter\")),\n        size: \"default\",\n        placeholder: _ctx.placeholder,\n        \"prefix-icon\": vue.unref(iconsVue.Search),\n        clearable: \"\",\n        \"validate-event\": false\n      }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"class\", \"placeholder\", \"prefix-icon\"])) : vue.createCommentVNode(\"v-if\", true), vue.withDirectives(vue.createVNode(vue.unref(index$2.ElCheckboxGroup), {\n        modelValue: vue.unref(checked),\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return vue.isRef(checked) ? checked.value = $event : null;\n        },\n        \"validate-event\": false,\n        \"class\": vue.normalizeClass([vue.unref(ns).is(\"filterable\", _ctx.filterable), vue.unref(ns).be(\"panel\", \"list\")])\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(filteredData), function (item) {\n            return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElCheckbox), {\n              key: item[vue.unref(propsAlias).key],\n              \"class\": vue.normalizeClass(vue.unref(ns).be(\"panel\", \"item\")),\n              value: item[vue.unref(propsAlias).key],\n              disabled: item[vue.unref(propsAlias).disabled],\n              \"validate-event\": false\n            }, {\n              \"default\": vue.withCtx(function () {\n                var _a;\n                return [vue.createVNode(OptionContent, {\n                  option: (_a = _ctx.optionRender) == null ? void 0 : _a.call(_ctx, item)\n                }, null, 8, [\"option\"])];\n              }),\n              _: 2\n            }, 1032, [\"class\", \"value\", \"disabled\"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"class\"]), [[vue.vShow, !vue.unref(hasNoMatch) && !vue.unref(types.isEmpty)(_ctx.data)]]), vue.withDirectives(vue.createElementVNode(\"div\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"panel\", \"empty\"))\n      }, [vue.renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        return [vue.createTextVNode(vue.toDisplayString(vue.unref(hasNoMatch) ? vue.unref(t)(\"el.transfer.noMatch\") : vue.unref(t)(\"el.transfer.noData\")), 1)];\n      })], 2), [[vue.vShow, vue.unref(hasNoMatch) || vue.unref(types.isEmpty)(_ctx.data)]])], 2), vue.unref(hasFooter) ? (vue.openBlock(), vue.createElementBlock(\"p\", {\n        key: 0,\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"panel\", \"footer\"))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 2)) : vue.createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n}));\nvar TransferPanel = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"transfer-panel.vue\"]]);\nexports[\"default\"] = TransferPanel;","map":{"version":3,"names":["name","slots","vue","useSlots","OptionContent","_ref2","option","_index$useLocale","index","useLocale","t","ns","index$1","useNamespace","panelState","reactive","checked","allChecked","query","checkChangeByUser","propsAlias","usePropsAlias","props","_useCheck$useCheck","useCheck","emit","filteredData","checkedSummary","isIndeterminate","handleAllCheckedChange","hasNoMatch","computed","types","isEmpty","value","hasFooter","children","_vue$toRefs","toRefs","expose","_ctx","_cache","openBlock","createElementBlock","normalizeClass","unref","b"],"sources":["../../../../../../packages/components/transfer/src/transfer-panel.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b('panel')\">\n    <p :class=\"ns.be('panel', 'header')\">\n      <el-checkbox\n        v-model=\"allChecked\"\n        :indeterminate=\"isIndeterminate\"\n        :validate-event=\"false\"\n        @change=\"handleAllCheckedChange\"\n      >\n        {{ title }}\n        <span>{{ checkedSummary }}</span>\n      </el-checkbox>\n    </p>\n\n    <div :class=\"[ns.be('panel', 'body'), ns.is('with-footer', hasFooter)]\">\n      <el-input\n        v-if=\"filterable\"\n        v-model=\"query\"\n        :class=\"ns.be('panel', 'filter')\"\n        size=\"default\"\n        :placeholder=\"placeholder\"\n        :prefix-icon=\"Search\"\n        clearable\n        :validate-event=\"false\"\n      />\n      <el-checkbox-group\n        v-show=\"!hasNoMatch && !isEmpty(data)\"\n        v-model=\"checked\"\n        :validate-event=\"false\"\n        :class=\"[ns.is('filterable', filterable), ns.be('panel', 'list')]\"\n      >\n        <el-checkbox\n          v-for=\"item in filteredData\"\n          :key=\"item[propsAlias.key]\"\n          :class=\"ns.be('panel', 'item')\"\n          :value=\"item[propsAlias.key]\"\n          :disabled=\"item[propsAlias.disabled]\"\n          :validate-event=\"false\"\n        >\n          <option-content :option=\"optionRender?.(item)\" />\n        </el-checkbox>\n      </el-checkbox-group>\n      <div\n        v-show=\"hasNoMatch || isEmpty(data)\"\n        :class=\"ns.be('panel', 'empty')\"\n      >\n        <slot name=\"empty\">\n          {{ hasNoMatch ? t('el.transfer.noMatch') : t('el.transfer.noData') }}\n        </slot>\n      </div>\n    </div>\n    <p v-if=\"hasFooter\" :class=\"ns.be('panel', 'footer')\">\n      <slot />\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, reactive, toRefs, useSlots } from 'vue'\nimport { isEmpty } from '@element-plus/utils'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { ElCheckbox, ElCheckboxGroup } from '@element-plus/components/checkbox'\nimport { ElInput } from '@element-plus/components/input'\nimport { Search } from '@element-plus/icons-vue'\nimport { transferPanelEmits, transferPanelProps } from './transfer-panel'\nimport { useCheck, usePropsAlias } from './composables'\n\nimport type { VNode } from 'vue'\nimport type { TransferPanelState } from './transfer-panel'\n\ndefineOptions({\n  name: 'ElTransferPanel',\n})\n\nconst props = defineProps(transferPanelProps)\nconst emit = defineEmits(transferPanelEmits)\nconst slots = useSlots()\n\nconst OptionContent = ({ option }: { option?: VNode | VNode[] }) => option\n\nconst { t } = useLocale()\nconst ns = useNamespace('transfer')\n\nconst panelState = reactive<TransferPanelState>({\n  checked: [],\n  allChecked: false,\n  query: '',\n  checkChangeByUser: true,\n})\n\nconst propsAlias = usePropsAlias(props)\n\nconst {\n  filteredData,\n  checkedSummary,\n  isIndeterminate,\n  handleAllCheckedChange,\n} = useCheck(props, panelState, emit)\n\nconst hasNoMatch = computed(\n  () => !isEmpty(panelState.query) && isEmpty(filteredData.value)\n)\n\nconst hasFooter = computed(() => !isEmpty(slots.default!()[0].children))\n\nconst { checked, allChecked, query } = toRefs(panelState)\n\ndefineExpose({\n  /** @description filter keyword */\n  query,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;qCAsEc;EACZA,IAAM;AACR;;;;;;;;IAIA,IAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEvB,IAAMC,aAAgB,YAAhBA,aAAgBA,CAAAC,KAAA;MAAA,IAAGC,MAAA,GAAAD,KAAA,CAAAC,MAAA;MAAA,OAA2CA,MAAA;IAAA;IAE9D,IAAAC,gBAAA,GAAQC,KAAA,CAAAC,SAAU;MAAhBC,CAAE,GAAAH,gBAAA,CAAFG,CAAE;IACJ,IAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,UAAU;IAElC,IAAMC,UAAA,GAAaZ,GAAA,CAAAa,QAA6B;MAC9CC,OAAA,EAAS,EAAC;MACVC,UAAY;MACZC,KAAO;MACPC,iBAAmB;IAAA,CACpB;IAEK,IAAAC,UAAA,GAAaC,aAAA,CAAAA,aAAA,CAAcC,KAAK;IAEhC,IAAAC,kBAAA,GAKFC,QAAA,CAAAA,QAAA,CAASF,KAAO,EAAAR,UAAA,EAAYW,IAAI;MAJlCC,YAAA,GAAAH,kBAAA,CAAAG,YAAA;MACAC,cAAA,GAAAJ,kBAAA,CAAAI,cAAA;MACAC,eAAA,GAAAL,kBAAA,CAAAK,eAAA;MACAC,sBAAA,GAAAN,kBAAA,CAAAM,sBAAA;IAGF,IAAMC,UAAa,GAAA5B,GAAA,CAAA6B,QAAA;MAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAnB,UAAA,CAAAI,KAAA,KAAAc,KAAA,CAAAC,OAAA,CAAAP,YAAA,CAAAQ,KAAA;IAAA;IACjB,IAAAC,SAAe,GAAAjC,GAAA,CAAA6B,QAAA;MAAA,OAAgB,CAAKC,KAAA,CAAAC,OAAA,CAAAhC,KAAA,eAAqB,CAAK,CAAAmC,QAAA;IAAA;IAChE,IAAAC,WAAA,GAAAnC,GAAA,CAAAoC,MAAA,CAAAxB,UAAA;MAAAE,OAAA,GAAAqB,WAAA,CAAArB,OAAA;MAAAC,UAAA,GAAAoB,WAAA,CAAApB,UAAA;MAAAC,KAAA,GAAAmB,WAAA,CAAAnB,KAAA;IAEMqB,MAAA;MAENrB,KAAA,EAAAA;IAEA,CAAa;IAAA,iBAAAsB,IAAA,EAAAC,MAAA;MAEX,OAAAvC,GAAA,CAAAwC,SAAA,IAAAxC,GAAA,CAAAyC,kBAAA;QACD,SAAAzC,GAAA,CAAA0C,cAAA,CAAA1C,GAAA,CAAA2C,KAAA,CAAAlC,EAAA,EAAAmC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}