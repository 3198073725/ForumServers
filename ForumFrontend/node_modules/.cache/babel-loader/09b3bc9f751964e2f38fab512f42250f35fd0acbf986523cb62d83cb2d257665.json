{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted } from 'vue';\nimport { getBoardList } from '@/api/board';\nimport { createPost, getPostDetail, updatePost } from '@/api/post';\nimport { mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\nimport { useRouter } from 'vue-router';\nimport { inject } from 'vue';\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  setup: function setup() {\n    var router = useRouter();\n    // 注入刷新函数\n    var refreshLatestPosts = inject('refreshLatestPosts', function () {\n      console.log('未找到刷新函数');\n    });\n    return {\n      refreshLatestPosts: refreshLatestPosts\n    };\n  },\n  data: function data() {\n    return {\n      isEdit: false,\n      postId: null,\n      submitting: false,\n      boardOptions: [],\n      postForm: {\n        title: '',\n        board: null,\n        content: ''\n      },\n      postRules: {\n        title: [{\n          required: true,\n          message: '请输入帖子标题',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 100,\n          message: '长度在 2 到 100 个字符',\n          trigger: 'blur'\n        }],\n        board: [{\n          required: true,\n          message: '请选择板块',\n          trigger: 'change'\n        }],\n        content: [{\n          required: true,\n          message: '请输入帖子内容',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAdmin', 'isLoggedIn'])), {}, {\n    isLogin: function isLogin() {\n      return this.isAuthenticated;\n    }\n  }),\n  created: function created() {\n    var _this = this;\n    console.log('发帖页面创建, 登录状态:', this.isLogin, '认证状态:', this.isLoggedIn);\n\n    // 检查是否登录\n    if (!this.isLogin) {\n      console.log('发帖页面检测到未登录，跳转到登录页面');\n      this.$message.warning('请先登录');\n      this.$router.push({\n        name: 'Login',\n        query: {\n          redirect: this.$route.fullPath\n        }\n      });\n      return;\n    }\n    console.log('发帖页面检测到已登录，继续加载页面');\n\n    // 清除可能的成功消息提示\n    this.$message.closeAll();\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(function () {\n      console.log('组件内延时清除消息');\n      _this.$message.closeAll();\n    }, 200);\n\n    // 获取板块选项\n    this.fetchBoardOptions();\n\n    // 检查是否是编辑模式\n    var id = this.$route.params.id;\n    if (id) {\n      this.isEdit = true;\n      this.postId = id;\n      this.fetchPostDetail(id);\n    } else {\n      // 如果是从板块详情页跳转过来，预设板块\n      var boardId = this.$route.params.boardId;\n      if (boardId) {\n        this.postForm.board = parseInt(boardId);\n      }\n    }\n  },\n  methods: {\n    // 获取板块选项\n    fetchBoardOptions: function fetchBoardOptions() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, boardsData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // 清除所有消息，确保不显示\"操作成功\"\n              _this2.$message.closeAll();\n              console.log('开始获取板块列表...');\n              _context.next = 5;\n              return getBoardList();\n            case 5:\n              response = _context.sent;\n              console.log('板块列表响应:', response);\n              boardsData = [];\n              if (response && response.status === 0 && response.data) {\n                // 处理Django REST framework自定义响应格式\n                console.log('使用status=0格式处理板块列表数据');\n                boardsData = response.data || [];\n              } else if (response && response.code === 0 && response.data) {\n                // 处理另一种自定义响应格式\n                console.log('使用code=0格式处理板块列表数据');\n                boardsData = response.data || [];\n              } else if (response && Array.isArray(response)) {\n                // 直接返回数组的情况\n                console.log('使用数组格式处理板块列表数据');\n                boardsData = response;\n              } else {\n                console.error('获取板块列表失败:', response ? response.msg : '未知错误');\n                boardsData = []; // 如果获取失败，设置为空数组\n                _this2.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '获取板块列表失败');\n              }\n\n              // 过滤板块列表，如果不是管理员，则过滤掉\"推荐\"和\"精选\"板块\n              if (!_this2.isAdmin) {\n                console.log('非管理员用户，过滤掉推荐和精选板块');\n                boardsData = boardsData.filter(function (board) {\n                  return board.name !== '推荐' && board.name !== '精选';\n                });\n              }\n              _this2.boardOptions = boardsData;\n\n              // 再次清除所有消息，确保不显示\"操作成功\"\n              _this2.$message.closeAll();\n              console.log('获取到的板块选项:', _this2.boardOptions);\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('获取板块列表失败:', _context.t0);\n              _this2.$message.error('获取板块列表失败');\n            case 19:\n              // 添加延时清除，确保异步请求完成后也不会显示消息\n              setTimeout(function () {\n                console.log('获取板块列表后延时清除消息');\n                _this2.$message.closeAll();\n              }, 300);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 15]]);\n      }))();\n    },\n    // 获取帖子详情（编辑模式）\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, post;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return getPostDetail(id);\n            case 3:\n              response = _context2.sent;\n              if (response.code === 0) {\n                post = response.data;\n                _this3.postForm = {\n                  title: post.title,\n                  board: post.board.id,\n                  content: post.content\n                };\n\n                // 检查是否有权限编辑\n                if (!_this3.isAdmin && post.user.id !== _this3.$store.getters.userId) {\n                  _this3.$message.error('您没有权限编辑该帖子');\n                  _this3.$router.push({\n                    name: 'PostDetail',\n                    params: {\n                      id: id\n                    }\n                  });\n                }\n              } else {\n                _this3.$message.error(response.msg || '获取帖子详情失败');\n                _this3.$router.push({\n                  name: 'PostList'\n                });\n              }\n              _context2.next = 12;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('获取帖子详情失败:', _context2.t0);\n              _this3.$message.error('获取帖子详情失败');\n              _this3.$router.push({\n                name: 'PostList'\n              });\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 7]]);\n      }))();\n    },\n    // 取消\n    cancel: function cancel() {\n      // 使用router.back()返回上一页\n      this.$router.back();\n    },\n    // 提交表单\n    submitForm: function submitForm() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log('开始提交表单，当前表单数据:', _this4.postForm);\n\n              // 先检查内容是否为空\n              if (!(!_this4.postForm.content || _this4.postForm.content === '<p><br></p>')) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请输入帖子内容');\n              return _context4.abrupt(\"return\");\n            case 4:\n              _this4.$refs.postForm.validate(/*#__PURE__*/function () {\n                var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(valid, fields) {\n                  var loadingInstance, response, _response$data, _response$data2, postId, match, boardId, _response, errorMsg, _errorMsg;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        console.log('表单验证结果:', valid, '验证失败字段:', fields);\n                        if (!valid) {\n                          _context3.next = 53;\n                          break;\n                        }\n                        _this4.submitting = true;\n                        _context3.prev = 3;\n                        // 显示提交中的加载提示\n                        loadingInstance = _this4.$loading({\n                          lock: true,\n                          text: _this4.isEdit ? '正在更新...' : '正在发布...',\n                          spinner: 'el-icon-loading',\n                          background: 'rgba(0, 0, 0, 0.7)'\n                        });\n                        _context3.prev = 5;\n                        if (!_this4.isEdit) {\n                          _context3.next = 12;\n                          break;\n                        }\n                        _context3.next = 9;\n                        return updatePost(_this4.postId, _this4.postForm);\n                      case 9:\n                        response = _context3.sent;\n                        _context3.next = 15;\n                        break;\n                      case 12:\n                        _context3.next = 14;\n                        return createPost(_this4.postForm);\n                      case 14:\n                        response = _context3.sent;\n                      case 15:\n                        // 请求完成后关闭加载提示\n                        loadingInstance.close();\n                        console.log('提交帖子响应:', response);\n                        if (!(response && (response.code === 0 || response.status === 0))) {\n                          _context3.next = 37;\n                          break;\n                        }\n                        // 打印完整的响应对象\n                        console.log('发布成功，完整响应对象:', {\n                          response: response,\n                          responseData: response.data,\n                          responseType: _typeof(response.data),\n                          hasId: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.id,\n                          hasPostId: (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.post_id\n                        });\n\n                        // 获取帖子ID\n\n                        if (_this4.isEdit) {\n                          postId = _this4.postId;\n                        } else {\n                          // 尝试从不同位置获取帖子ID\n                          if (response.data) {\n                            if (typeof response.data === 'number') {\n                              postId = response.data;\n                            } else if (_typeof(response.data) === 'object') {\n                              postId = response.data.id || response.data.post_id || response.data.postId;\n                            }\n                          }\n\n                          // 如果在data中没找到，尝试在response根级别查找\n                          if (!postId) {\n                            postId = response.id || response.post_id || response.postId;\n                          }\n\n                          // 如果还是没找到，尝试解析响应消息中的ID\n                          if (!postId && response.msg) {\n                            match = response.msg.match(/ID[:：]?\\s*(\\d+)/i);\n                            if (match) {\n                              postId = parseInt(match[1]);\n                            }\n                          }\n                        }\n                        console.log('解析后的帖子ID:', postId);\n                        if (!postId) {\n                          _context3.next = 31;\n                          break;\n                        }\n                        // 先显示成功消息\n                        _this4.$message({\n                          message: _this4.isEdit ? '更新成功' : '发布成功',\n                          type: 'success',\n                          duration: 2000\n                        });\n\n                        // 刷新首页的帖子列表\n                        _context3.next = 25;\n                        return _this4.refreshLatestPosts();\n                      case 25:\n                        console.log('已刷新最新帖子列表');\n\n                        // 获取当前选择的板块ID\n                        boardId = _this4.postForm.board;\n                        console.log('跳转到板块详情页，板块ID:', boardId);\n\n                        // 延迟跳转到板块详情页\n                        setTimeout(function () {\n                          _this4.$router.push({\n                            name: 'BoardDetail',\n                            params: {\n                              id: boardId\n                            }\n                          });\n                        }, 1000);\n                        _context3.next = 35;\n                        break;\n                      case 31:\n                        _this4.$message({\n                          message: '操作成功，正在返回列表页...',\n                          type: 'success',\n                          duration: 2000\n                        });\n\n                        // 刷新首页的帖子列表\n                        _context3.next = 34;\n                        return _this4.refreshLatestPosts();\n                      case 34:\n                        // 延迟跳转到列表页\n                        setTimeout(function () {\n                          _this4.$router.push({\n                            name: 'PostList'\n                          });\n                        }, 1000);\n                      case 35:\n                        _context3.next = 40;\n                        break;\n                      case 37:\n                        // 发布失败的处理\n                        errorMsg = ((_response = response) === null || _response === void 0 ? void 0 : _response.msg) || (_this4.isEdit ? '更新失败' : '发布失败');\n                        _this4.$message({\n                          message: errorMsg,\n                          type: 'error',\n                          duration: 3000\n                        });\n                        console.error('提交失败，响应:', response);\n                      case 40:\n                        _context3.next = 48;\n                        break;\n                      case 42:\n                        _context3.prev = 42;\n                        _context3.t0 = _context3[\"catch\"](5);\n                        // 异常错误处理\n                        loadingInstance.close();\n                        _errorMsg = _this4.isEdit ? '更新帖子失败' : '发布帖子失败';\n                        console.error(_errorMsg + ':', _context3.t0);\n                        _this4.$message({\n                          message: _errorMsg + '，请稍后重试',\n                          type: 'error',\n                          duration: 3000\n                        });\n                      case 48:\n                        _context3.prev = 48;\n                        _this4.submitting = false;\n                        return _context3.finish(48);\n                      case 51:\n                        _context3.next = 56;\n                        break;\n                      case 53:\n                        console.log('表单验证失败');\n                        // 显示具体的验证错误信息\n                        if (fields) {\n                          if (fields.title) {\n                            _this4.$message.warning(fields.title[0].message);\n                          } else if (fields.board) {\n                            _this4.$message.warning(fields.board[0].message);\n                          } else if (fields.content) {\n                            _this4.$message.warning(fields.content[0].message);\n                          } else {\n                            _this4.$message.warning('请填写完整的表单信息');\n                          }\n                        }\n                        return _context3.abrupt(\"return\", false);\n                      case 56:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, null, [[3,, 48, 51], [5, 42]]);\n                }));\n                return function (_x, _x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    },\n    // 处理内容变化\n    handleContentChange: function handleContentChange(content) {\n      var _this5 = this;\n      console.log('内容变化:', content);\n\n      // 处理空内容的情况\n      if (!content || content === '<p><br></p>') {\n        this.postForm.content = '';\n        this.$message.warning('请输入帖子内容');\n      } else {\n        this.postForm.content = content;\n      }\n\n      // 手动触发表单验证\n      this.$nextTick(function () {\n        _this5.$refs.postForm.validateField('content');\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","onMounted","getBoardList","createPost","getPostDetail","updatePost","mapGetters","RichTextEditor","useRouter","inject","name","components","setup","router","refreshLatestPosts","console","log","data","isEdit","postId","submitting","boardOptions","postForm","title","board","content","postRules","required","message","trigger","min","max","computed","_objectSpread","isLogin","isAuthenticated","created","_this","isLoggedIn","$message","warning","$router","push","query","redirect","$route","fullPath","closeAll","setTimeout","fetchBoardOptions","id","params","fetchPostDetail","boardId","parseInt","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","boardsData","wrap","_callee$","_context","prev","next","sent","status","code","Array","isArray","error","msg","isAdmin","filter","t0","stop","_this3","_callee2","post","_callee2$","_context2","user","$store","getters","userId","cancel","back","submitForm","_this4","_callee4","_callee4$","_context4","abrupt","$refs","validate","_ref","_callee3","valid","fields","loadingInstance","_response$data","_response$data2","match","_response","errorMsg","_errorMsg","_callee3$","_context3","$loading","lock","text","spinner","background","close","responseData","responseType","_typeof","hasId","hasPostId","post_id","type","duration","finish","_x","_x2","apply","arguments","handleContentChange","_this5","$nextTick","validateField"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostCreate.vue"],"sourcesContent":["<template>\n  <div class=\"post-create-container\">\n    <el-card class=\"post-form-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>{{ isEdit ? '编辑帖子' : '发布新帖' }}</span>\n      </div>\n\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"postRules\"\n        label-width=\"80px\"\n        :validate-on-rule-change=\"false\"\n        @submit.prevent\n      >\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"postForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"板块\" prop=\"board\">\n          <el-select\n            v-model=\"postForm.board\"\n            placeholder=\"请选择板块\"\n            style=\"width: 100%\"\n            :disabled=\"isEdit && !isAdmin\"\n          >\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.id\"\n              :label=\"board.name\"\n              :value=\"board.id\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\" :show-message=\"false\">\n          <rich-text-editor\n            v-model=\"postForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button @click=\"cancel\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\n            {{ isEdit ? '保存修改' : '发布帖子' }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { getBoardList } from '@/api/board'\nimport { createPost, getPostDetail, updatePost } from '@/api/post'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\nimport { useRouter } from 'vue-router'\nimport { inject } from 'vue'\n\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor\n  },\n  setup() {\n    const router = useRouter()\n    // 注入刷新函数\n    const refreshLatestPosts = inject('refreshLatestPosts', () => {\n      console.log('未找到刷新函数')\n    })\n    \n    return {\n      refreshLatestPosts\n    }\n  },\n  data() {\n    return {\n      isEdit: false,\n      postId: null,\n      submitting: false,\n      boardOptions: [],\n      postForm: {\n        title: '',\n        board: null,\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }\n        ],\n        board: [\n          { required: true, message: '请选择板块', trigger: 'change' }\n        ],\n        content: [\n          { \n            required: true, \n            message: '请输入帖子内容', \n            trigger: 'change'\n          }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAdmin',\n      'isLoggedIn'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    }\n  },\n  created() {\n    console.log('发帖页面创建, 登录状态:', this.isLogin, '认证状态:', this.isLoggedIn)\n\n    // 检查是否登录\n    if (!this.isLogin) {\n      console.log('发帖页面检测到未登录，跳转到登录页面')\n      this.$message.warning('请先登录')\n      this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n      return\n    }\n\n    console.log('发帖页面检测到已登录，继续加载页面')\n\n    // 清除可能的成功消息提示\n    this.$message.closeAll()\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(() => {\n      console.log('组件内延时清除消息')\n      this.$message.closeAll()\n    }, 200)\n\n    // 获取板块选项\n    this.fetchBoardOptions()\n\n    // 检查是否是编辑模式\n    const id = this.$route.params.id\n    if (id) {\n      this.isEdit = true\n      this.postId = id\n      this.fetchPostDetail(id)\n    } else {\n      // 如果是从板块详情页跳转过来，预设板块\n      const boardId = this.$route.params.boardId\n      if (boardId) {\n        this.postForm.board = parseInt(boardId)\n      }\n    }\n  },\n  methods: {\n    // 获取板块选项\n    async fetchBoardOptions() {\n      try {\n        // 清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n\n        console.log('开始获取板块列表...')\n        const response = await getBoardList()\n        console.log('板块列表响应:', response)\n\n        let boardsData = []\n        if (response && response.status === 0 && response.data) {\n          // 处理Django REST framework自定义响应格式\n          console.log('使用status=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          // 处理另一种自定义响应格式\n          console.log('使用code=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          console.log('使用数组格式处理板块列表数据')\n          boardsData = response\n        } else {\n          console.error('获取板块列表失败:', response ? response.msg : '未知错误')\n          boardsData = [] // 如果获取失败，设置为空数组\n          this.$message.error(response?.msg || '获取板块列表失败')\n        }\n        \n        // 过滤板块列表，如果不是管理员，则过滤掉\"推荐\"和\"精选\"板块\n        if (!this.isAdmin) {\n          console.log('非管理员用户，过滤掉推荐和精选板块')\n          boardsData = boardsData.filter(board => \n            board.name !== '推荐' && board.name !== '精选'\n          )\n        }\n        \n        this.boardOptions = boardsData\n        \n        // 再次清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n        \n        console.log('获取到的板块选项:', this.boardOptions)\n      } catch (error) {\n        console.error('获取板块列表失败:', error)\n        this.$message.error('获取板块列表失败')\n      }\n\n      // 添加延时清除，确保异步请求完成后也不会显示消息\n      setTimeout(() => {\n        console.log('获取板块列表后延时清除消息')\n        this.$message.closeAll()\n      }, 300)\n    },\n\n    // 获取帖子详情（编辑模式）\n    async fetchPostDetail(id) {\n      try {\n        const response = await getPostDetail(id)\n        if (response.code === 0) {\n          const post = response.data\n          this.postForm = {\n            title: post.title,\n            board: post.board.id,\n            content: post.content\n          }\n\n          // 检查是否有权限编辑\n          if (!this.isAdmin && post.user.id !== this.$store.getters.userId) {\n            this.$message.error('您没有权限编辑该帖子')\n            this.$router.push({ name: 'PostDetail', params: { id } })\n          }\n        } else {\n          this.$message.error(response.msg || '获取帖子详情失败')\n          this.$router.push({ name: 'PostList' })\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败')\n        this.$router.push({ name: 'PostList' })\n      }\n    },\n\n    // 取消\n    cancel() {\n      // 使用router.back()返回上一页\n      this.$router.back()\n    },\n\n    // 提交表单\n    async submitForm() {\n      console.log('开始提交表单，当前表单数据:', this.postForm);\n      \n      // 先检查内容是否为空\n      if (!this.postForm.content || this.postForm.content === '<p><br></p>') {\n        this.$message.warning('请输入帖子内容');\n        return;\n      }\n      \n      this.$refs.postForm.validate(async (valid, fields) => {\n        console.log('表单验证结果:', valid, '验证失败字段:', fields);\n        \n        if (valid) {\n          this.submitting = true;\n          try {\n            // 显示提交中的加载提示\n            const loadingInstance = this.$loading({\n              lock: true,\n              text: this.isEdit ? '正在更新...' : '正在发布...',\n              spinner: 'el-icon-loading',\n              background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            let response;\n            try {\n              // 发送请求到服务器\n              if (this.isEdit) {\n                response = await updatePost(this.postId, this.postForm);\n              } else {\n                response = await createPost(this.postForm);\n              }\n              \n              // 请求完成后关闭加载提示\n              loadingInstance.close();\n\n              console.log('提交帖子响应:', response);\n\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 打印完整的响应对象\n                console.log('发布成功，完整响应对象:', {\n                  response,\n                  responseData: response.data,\n                  responseType: typeof response.data,\n                  hasId: response.data?.id,\n                  hasPostId: response.data?.post_id\n                });\n\n                // 获取帖子ID\n                let postId;\n                if (this.isEdit) {\n                  postId = this.postId;\n                } else {\n                  // 尝试从不同位置获取帖子ID\n                  if (response.data) {\n                    if (typeof response.data === 'number') {\n                      postId = response.data;\n                    } else if (typeof response.data === 'object') {\n                      postId = response.data.id || response.data.post_id || response.data.postId;\n                    }\n                  }\n                  \n                  // 如果在data中没找到，尝试在response根级别查找\n                  if (!postId) {\n                    postId = response.id || response.post_id || response.postId;\n                  }\n                  \n                  // 如果还是没找到，尝试解析响应消息中的ID\n                  if (!postId && response.msg) {\n                    const match = response.msg.match(/ID[:：]?\\s*(\\d+)/i);\n                    if (match) {\n                      postId = parseInt(match[1]);\n                    }\n                  }\n                }\n\n                console.log('解析后的帖子ID:', postId);\n\n                if (postId) {\n                  // 先显示成功消息\n                  this.$message({\n                    message: this.isEdit ? '更新成功' : '发布成功',\n                    type: 'success',\n                    duration: 2000\n                  });\n\n                  // 刷新首页的帖子列表\n                  await this.refreshLatestPosts();\n                  console.log('已刷新最新帖子列表');\n\n                  // 获取当前选择的板块ID\n                  const boardId = this.postForm.board;\n                  console.log('跳转到板块详情页，板块ID:', boardId);\n\n                  // 延迟跳转到板块详情页\n                  setTimeout(() => {\n                    this.$router.push({ \n                      name: 'BoardDetail', \n                      params: { id: boardId }\n                    });\n                  }, 1000);\n                } else {\n                  this.$message({\n                    message: '操作成功，正在返回列表页...',\n                    type: 'success',\n                    duration: 2000\n                  });\n                  \n                  // 刷新首页的帖子列表\n                  await this.refreshLatestPosts();\n                  \n                  // 延迟跳转到列表页\n                  setTimeout(() => {\n                    this.$router.push({ name: 'PostList' });\n                  }, 1000);\n                }\n              } else {\n                // 发布失败的处理\n                const errorMsg = response?.msg || (this.isEdit ? '更新失败' : '发布失败');\n                this.$message({\n                  message: errorMsg,\n                  type: 'error',\n                  duration: 3000\n                });\n                console.error('提交失败，响应:', response);\n              }\n            } catch (error) {\n              // 异常错误处理\n              loadingInstance.close();\n              const errorMsg = this.isEdit ? '更新帖子失败' : '发布帖子失败';\n              console.error(errorMsg + ':', error);\n              this.$message({\n                message: errorMsg + '，请稍后重试',\n                type: 'error',\n                duration: 3000\n              });\n            }\n          } finally {\n            this.submitting = false;\n          }\n        } else {\n          console.log('表单验证失败');\n          // 显示具体的验证错误信息\n          if (fields) {\n            if (fields.title) {\n              this.$message.warning(fields.title[0].message);\n            } else if (fields.board) {\n              this.$message.warning(fields.board[0].message);\n            } else if (fields.content) {\n              this.$message.warning(fields.content[0].message);\n            } else {\n              this.$message.warning('请填写完整的表单信息');\n            }\n          }\n          return false;\n        }\n      });\n    },\n\n    // 处理内容变化\n    handleContentChange(content) {\n      console.log('内容变化:', content);\n      \n      // 处理空内容的情况\n      if (!content || content === '<p><br></p>') {\n        this.postForm.content = '';\n        this.$message.warning('请输入帖子内容');\n      } else {\n        this.postForm.content = content;\n      }\n      \n      // 手动触发表单验证\n      this.$nextTick(() => {\n        this.$refs.postForm.validateField('content');\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-create-container {\n  max-width: 1200px;\n  margin: 20px auto;\n  padding: 0 20px;\n}\n\n.post-form-card {\n  margin-bottom: 20px;\n}\n\n:deep(.el-form-item__content) {\n  line-height: normal;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}