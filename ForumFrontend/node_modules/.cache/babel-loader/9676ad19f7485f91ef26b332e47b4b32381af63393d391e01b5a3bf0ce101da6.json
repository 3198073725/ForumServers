{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.number.constructor.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/web.timers.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../scrollbar/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index = require('../../icon/index.js');\nvar node = require('./node2.js');\nvar types = require('./types.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$2 = require('../../../hooks/use-namespace/index.js');\nvar index$3 = require('../../../hooks/use-locale/index.js');\nvar index$4 = require('../../../hooks/use-id/index.js');\nvar _sfc_main = vue.defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: iconsVue.Loading,\n    ElIcon: index.ElIcon,\n    ElScrollbar: index$1.ElScrollbar,\n    ElCascaderNode: node[\"default\"]\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var instance = vue.getCurrentInstance();\n    var ns = index$2.useNamespace(\"cascader-menu\");\n    var _index$3$useLocale = index$3.useLocale(),\n      t = _index$3$useLocale.t;\n    var id = index$4.useId();\n    var activeNode = null;\n    var hoverTimer = null;\n    var panel = vue.inject(types.CASCADER_PANEL_INJECTION_KEY);\n    var hoverZone = vue.ref(null);\n    var isEmpty = vue.computed(function () {\n      return !props.nodes.length;\n    });\n    var isLoading = vue.computed(function () {\n      return !panel.initialLoaded;\n    });\n    var menuId = vue.computed(function () {\n      return \"\".concat(id.value, \"-\").concat(props.index);\n    });\n    var handleExpand = function handleExpand(e) {\n      activeNode = e.target;\n    };\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        var el = instance.vnode.el;\n        var _el$getBoundingClient = el.getBoundingClientRect(),\n          left = _el$getBoundingClient.left;\n        var offsetWidth = el.offsetWidth,\n          offsetHeight = el.offsetHeight;\n        var startX = e.clientX - left;\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = \"\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\".concat(startX, \" \").concat(top, \" L\").concat(offsetWidth, \" 0 V\").concat(top, \" Z\\\" />\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\").concat(startX, \" \").concat(bottom, \" L\").concat(offsetWidth, \" \").concat(offsetHeight, \" V\").concat(bottom, \" Z\\\" />\\n        \");\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    var clearHoverTimer = function clearHoverTimer() {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    var clearHoverZone = function clearHoverZone() {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      ns: ns,\n      panel: panel,\n      hoverZone: hoverZone,\n      isEmpty: isEmpty,\n      isLoading: isLoading,\n      menuId: menuId,\n      t: t,\n      handleExpand: handleExpand,\n      handleMouseMove: handleMouseMove,\n      clearHoverZone: clearHoverZone\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_node = vue.resolveComponent(\"el-cascader-node\");\n  var _component_loading = vue.resolveComponent(\"loading\");\n  var _component_el_icon = vue.resolveComponent(\"el-icon\");\n  var _component_el_scrollbar = vue.resolveComponent(\"el-scrollbar\");\n  return vue.openBlock(), vue.createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    \"class\": vue.normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    \"default\": vue.withCtx(function () {\n      var _a;\n      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.nodes, function (node) {\n        return vue.openBlock(), vue.createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node: node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        \"class\": vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [vue.createVNode(_component_el_icon, {\n        size: \"14\",\n        \"class\": vue.normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.createVNode(_component_loading)];\n        }),\n        _: 1\n      }, 8, [\"class\"]), vue.createTextVNode(\" \" + vue.toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        \"class\": vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [vue.renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        return [vue.createTextVNode(vue.toDisplayString(_ctx.t(\"el.cascader.noData\")), 1)];\n      })], 2)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n        key: 2\n      }, [vue.createCommentVNode(\" eslint-disable-next-line vue/html-self-closing \"), (vue.openBlock(), vue.createElementBlock(\"svg\", {\n        ref: \"hoverZone\",\n        \"class\": vue.normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2))], 2112)) : vue.createCommentVNode(\"v-if\", true)];\n    }),\n    _: 3\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar ElCascaderMenu = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"menu.vue\"]]);\nexports[\"default\"] = ElCascaderMenu;","map":{"version":3,"names":["_sfc_main","vue","defineComponent","name","components","Loading","iconsVue","ElIcon","index","ElScrollbar","index$1","ElCascaderNode","node","props","nodes","type","Array","required","Number","setup","instance","getCurrentInstance","ns","index$2","useNamespace","_index$3$useLocale","index$3","useLocale","t","id","index$4","useId","activeNode","hoverTimer","panel","inject","types","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","isLoading","initialLoaded","menuId","concat","value","handleExpand","e","target","handleMouseMove","isHoverMenu","contains","clearHoverTimer","el","vnode","_el$getBoundingClient","getBoundingClientRect","left","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout","createBlock","_component_el_scrollbar","key","_ctx","tag","role","normalizeClass","b","is","onMousemove","onMouseleave","_a","openBlock","createElementBlock","Fragment","renderList","_component_el_cascader_node","onExpand","createVNode","_component_el_icon","size","withCtx","_component_loading","_","createTextVNode","toDisplayString","createCommentVNode","ElCascaderMenu","pluginVue_exportHelper","_sfc_render"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      <slot name=\"empty\">{{ t('el.cascader.noData') }}</slot>\n    </div>\n    <!-- eslint-disable-next-line vue/html-self-closing -->\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useId, useLocale, useNamespace } from '@element-plus/hooks'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = useId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `${id.value}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}