{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getNotifications, markNotificationRead, markAllNotificationsRead } from '@/api/notifications';\nvar state = {\n  notifications: [],\n  unreadCount: 0,\n  loading: false,\n  hasMore: true,\n  currentPage: 1,\n  pageSize: 10\n};\nvar getters = {\n  allNotifications: function allNotifications(state) {\n    return state.notifications;\n  },\n  unreadNotifications: function unreadNotifications(state) {\n    return state.notifications.filter(function (n) {\n      return !n.is_read;\n    });\n  },\n  hasUnreadNotifications: function hasUnreadNotifications(state) {\n    return state.unreadCount > 0;\n  }\n};\nvar mutations = {\n  setNotifications: function setNotifications(state, notifications) {\n    state.notifications = notifications;\n  },\n  addNotification: function addNotification(state, notification) {\n    // 避免重复添加\n    var exists = state.notifications.some(function (n) {\n      return n.id === notification.id;\n    });\n    if (!exists) {\n      state.notifications.unshift(notification);\n    }\n  },\n  setUnreadCount: function setUnreadCount(state, count) {\n    state.unreadCount = count;\n  },\n  incrementUnreadCount: function incrementUnreadCount(state) {\n    state.unreadCount++;\n  },\n  markAsRead: function markAsRead(state, notificationId) {\n    var notification = state.notifications.find(function (n) {\n      return n.id === notificationId;\n    });\n    if (notification && !notification.is_read) {\n      notification.is_read = true;\n      state.unreadCount = Math.max(0, state.unreadCount - 1);\n    }\n  },\n  markAllAsRead: function markAllAsRead(state) {\n    state.notifications.forEach(function (notification) {\n      notification.is_read = true;\n    });\n    state.unreadCount = 0;\n  },\n  setLoading: function setLoading(state, status) {\n    state.loading = status;\n  },\n  setHasMore: function setHasMore(state, status) {\n    state.hasMore = status;\n  },\n  setCurrentPage: function setCurrentPage(state, page) {\n    state.currentPage = page;\n  }\n};\nvar actions = {\n  fetchNotifications: function fetchNotifications(_ref) {\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var commit, state, response, data, results, count, newNotifications;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            commit = _ref.commit, state = _ref.state;\n            commit('setLoading', true);\n            _context.prev = 2;\n            _context.next = 5;\n            return getNotifications({\n              page: state.currentPage,\n              page_size: state.pageSize,\n              is_read: false\n            });\n          case 5:\n            response = _context.sent;\n            if (response) {\n              _context.next = 9;\n              break;\n            }\n            console.warn('通知API返回空响应');\n            return _context.abrupt(\"return\");\n          case 9:\n            // 兼容不同的响应格式\n            data = response.data || response;\n            if (data) {\n              _context.next = 13;\n              break;\n            }\n            console.warn('通知API响应缺少数据');\n            return _context.abrupt(\"return\");\n          case 13:\n            results = data.results || [];\n            count = data.count || 0;\n            if (state.currentPage === 1) {\n              commit('setNotifications', results);\n            } else {\n              // 合并通知列表，避免重复\n              newNotifications = _toConsumableArray(state.notifications);\n              results.forEach(function (notification) {\n                if (!newNotifications.some(function (n) {\n                  return n.id === notification.id;\n                })) {\n                  newNotifications.push(notification);\n                }\n              });\n              commit('setNotifications', newNotifications);\n            }\n\n            // 更新分页信息\n            commit('setHasMore', state.currentPage * state.pageSize < count);\n            commit('setUnreadCount', count);\n            _context.next = 24;\n            break;\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('获取通知失败:', _context.t0);\n            // 如果是网络错误，设置合适的状态\n            if (_context.t0.message === 'Network Error') {\n              commit('setNotifications', []);\n              commit('setUnreadCount', 0);\n              commit('setHasMore', false);\n            }\n          case 24:\n            _context.prev = 24;\n            commit('setLoading', false);\n            return _context.finish(24);\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 20, 24, 27]]);\n    }))();\n  },\n  loadMoreNotifications: function loadMoreNotifications(_ref2) {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var commit, state;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            commit = _ref2.commit, state = _ref2.state;\n            if (!(!state.hasMore || state.loading)) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            commit('setCurrentPage', state.currentPage + 1);\n            _context2.next = 6;\n            return _this.dispatch('notifications/fetchNotifications');\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  },\n  markAsRead: function markAsRead(_ref3, notificationId) {\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var commit, _response$data, response;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            commit = _ref3.commit;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return markNotificationRead(notificationId);\n          case 4:\n            response = _context3.sent;\n            // 兼容不同的响应格式\n            if (response && (response.success || (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success)) {\n              commit('markAsRead', notificationId);\n            }\n            _context3.next = 12;\n            break;\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.error('标记通知已读失败:', _context3.t0);\n            // 如果是网络错误，可以选择乐观更新\n            if (_context3.t0.message === 'Network Error') {\n              commit('markAsRead', notificationId);\n            }\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[1, 8]]);\n    }))();\n  },\n  markAllAsRead: function markAllAsRead(_ref4) {\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var commit, _response$data2, response;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            commit = _ref4.commit;\n            _context4.prev = 1;\n            _context4.next = 4;\n            return markAllNotificationsRead();\n          case 4:\n            response = _context4.sent;\n            // 兼容不同的响应格式\n            if (response && (response.success || (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.success)) {\n              commit('markAllAsRead');\n            }\n            _context4.next = 12;\n            break;\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](1);\n            console.error('标记所有通知已读失败:', _context4.t0);\n            // 如果是网络错误，可以选择乐观更新\n            if (_context4.t0.message === 'Network Error') {\n              commit('markAllAsRead');\n            }\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[1, 8]]);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"names":["getNotifications","markNotificationRead","markAllNotificationsRead","state","notifications","unreadCount","loading","hasMore","currentPage","pageSize","getters","allNotifications","unreadNotifications","filter","n","is_read","hasUnreadNotifications","mutations","setNotifications","addNotification","notification","exists","some","id","unshift","setUnreadCount","count","incrementUnreadCount","markAsRead","notificationId","find","Math","max","markAllAsRead","forEach","setLoading","status","setHasMore","setCurrentPage","page","actions","fetchNotifications","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commit","response","data","results","newNotifications","wrap","_callee$","_context","prev","next","page_size","sent","console","warn","abrupt","_toConsumableArray","push","t0","error","message","finish","stop","loadMoreNotifications","_ref2","_this","_callee2","_callee2$","_context2","dispatch","_ref3","_callee3","_response$data","_callee3$","_context3","success","_ref4","_callee4","_response$data2","_callee4$","_context4","namespaced"],"sources":["H:/ForumServers/ForumFrontend/src/store/modules/notifications.js"],"sourcesContent":["import { getNotifications, markNotificationRead, markAllNotificationsRead } from '@/api/notifications';\r\n\r\nconst state = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  loading: false,\r\n  hasMore: true,\r\n  currentPage: 1,\r\n  pageSize: 10\r\n};\r\n\r\nconst getters = {\r\n  allNotifications: state => state.notifications,\r\n  unreadNotifications: state => state.notifications.filter(n => !n.is_read),\r\n  hasUnreadNotifications: state => state.unreadCount > 0\r\n};\r\n\r\nconst mutations = {\r\n  setNotifications(state, notifications) {\r\n    state.notifications = notifications;\r\n  },\r\n  \r\n  addNotification(state, notification) {\r\n    // 避免重复添加\r\n    const exists = state.notifications.some(n => n.id === notification.id);\r\n    if (!exists) {\r\n      state.notifications.unshift(notification);\r\n    }\r\n  },\r\n  \r\n  setUnreadCount(state, count) {\r\n    state.unreadCount = count;\r\n  },\r\n  \r\n  incrementUnreadCount(state) {\r\n    state.unreadCount++;\r\n  },\r\n  \r\n  markAsRead(state, notificationId) {\r\n    const notification = state.notifications.find(n => n.id === notificationId);\r\n    if (notification && !notification.is_read) {\r\n      notification.is_read = true;\r\n      state.unreadCount = Math.max(0, state.unreadCount - 1);\r\n    }\r\n  },\r\n  \r\n  markAllAsRead(state) {\r\n    state.notifications.forEach(notification => {\r\n      notification.is_read = true;\r\n    });\r\n    state.unreadCount = 0;\r\n  },\r\n  \r\n  setLoading(state, status) {\r\n    state.loading = status;\r\n  },\r\n  \r\n  setHasMore(state, status) {\r\n    state.hasMore = status;\r\n  },\r\n  \r\n  setCurrentPage(state, page) {\r\n    state.currentPage = page;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  async fetchNotifications({ commit, state }) {\r\n    commit('setLoading', true);\r\n    try {\r\n      const response = await getNotifications({\r\n        page: state.currentPage,\r\n        page_size: state.pageSize,\r\n        is_read: false\r\n      });\r\n      \r\n      // 检查响应格式\r\n      if (!response) {\r\n        console.warn('通知API返回空响应');\r\n        return;\r\n      }\r\n      \r\n      // 兼容不同的响应格式\r\n      const data = response.data || response;\r\n      if (!data) {\r\n        console.warn('通知API响应缺少数据');\r\n        return;\r\n      }\r\n      \r\n      const results = data.results || [];\r\n      const count = data.count || 0;\r\n      \r\n      if (state.currentPage === 1) {\r\n        commit('setNotifications', results);\r\n      } else {\r\n        // 合并通知列表，避免重复\r\n        const newNotifications = [...state.notifications];\r\n        results.forEach(notification => {\r\n          if (!newNotifications.some(n => n.id === notification.id)) {\r\n            newNotifications.push(notification);\r\n          }\r\n        });\r\n        commit('setNotifications', newNotifications);\r\n      }\r\n      \r\n      // 更新分页信息\r\n      commit('setHasMore', state.currentPage * state.pageSize < count);\r\n      commit('setUnreadCount', count);\r\n    } catch (error) {\r\n      console.error('获取通知失败:', error);\r\n      // 如果是网络错误，设置合适的状态\r\n      if (error.message === 'Network Error') {\r\n        commit('setNotifications', []);\r\n        commit('setUnreadCount', 0);\r\n        commit('setHasMore', false);\r\n      }\r\n    } finally {\r\n      commit('setLoading', false);\r\n    }\r\n  },\r\n  \r\n  async loadMoreNotifications({ commit, state }) {\r\n    if (!state.hasMore || state.loading) return;\r\n    \r\n    commit('setCurrentPage', state.currentPage + 1);\r\n    await this.dispatch('notifications/fetchNotifications');\r\n  },\r\n  \r\n  async markAsRead({ commit }, notificationId) {\r\n    try {\r\n      const response = await markNotificationRead(notificationId);\r\n      // 兼容不同的响应格式\r\n      if (response && (response.success || response.data?.success)) {\r\n        commit('markAsRead', notificationId);\r\n      }\r\n    } catch (error) {\r\n      console.error('标记通知已读失败:', error);\r\n      // 如果是网络错误，可以选择乐观更新\r\n      if (error.message === 'Network Error') {\r\n        commit('markAsRead', notificationId);\r\n      }\r\n    }\r\n  },\r\n  \r\n  async markAllAsRead({ commit }) {\r\n    try {\r\n      const response = await markAllNotificationsRead();\r\n      // 兼容不同的响应格式\r\n      if (response && (response.success || response.data?.success)) {\r\n        commit('markAllAsRead');\r\n      }\r\n    } catch (error) {\r\n      console.error('标记所有通知已读失败:', error);\r\n      // 如果是网络错误，可以选择乐观更新\r\n      if (error.message === 'Network Error') {\r\n        commit('markAllAsRead');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}