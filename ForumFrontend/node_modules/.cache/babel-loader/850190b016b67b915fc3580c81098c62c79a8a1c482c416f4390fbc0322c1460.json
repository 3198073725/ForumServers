{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { computed, onMounted, watch, ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter, useRoute } from 'vue-router';\nimport NotificationBell from '@/components/NotificationBell.vue';\nimport ChatWindow from '@/components/ChatWindow.vue';\nimport wsManager from '@/utils/websocket';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'App',\n  components: {\n    NotificationBell: NotificationBell,\n    ChatWindow: ChatWindow\n  },\n  setup: function setup() {\n    var store = useStore();\n    var router = useRouter();\n    var route = useRoute();\n\n    // 活跃聊天用户列表\n    var activeChatUsers = ref([]);\n\n    // 登录状态\n    var isLoggedIn = computed(function () {\n      return store.getters.isLoggedIn;\n    });\n    var isAdmin = computed(function () {\n      return store.getters.isAdmin;\n    });\n    var user = computed(function () {\n      return store.state.user;\n    });\n    var username = computed(function () {\n      return store.getters.username;\n    });\n    var userAvatar = computed(function () {\n      return store.getters.userAvatar;\n    });\n\n    // 检查通知功能是否可用\n    var notificationsEnabled = ref(false);\n\n    // 当前激活的路由\n    var activeRoute = computed(function () {\n      return route.path;\n    });\n\n    // 路由导航\n    var goToLogin = function goToLogin() {\n      return router.push('/login');\n    };\n    var goToRegister = function goToRegister() {\n      return router.push('/register');\n    };\n\n    // 处理下拉菜单命令\n    var handleCommand = function handleCommand(command) {\n      var _user$value, _store$state$user;\n      var userId;\n      switch (command) {\n        case 'profile':\n          // 确保用户ID存在\n          userId = ((_user$value = user.value) === null || _user$value === void 0 ? void 0 : _user$value.id) || ((_store$state$user = store.state.user) === null || _store$state$user === void 0 ? void 0 : _store$state$user.id);\n          if (userId) {\n            router.push(\"/profile/\".concat(userId));\n          } else {\n            console.error('无法获取用户ID');\n            ElMessage.error('获取用户信息失败');\n          }\n          break;\n        case 'messages':\n          router.push('/messages');\n          break;\n        case 'admin':\n          router.push('/admin');\n          break;\n        case 'logout':\n          logout();\n          break;\n      }\n    };\n\n    // 登出\n    var logout = function logout() {\n      // 关闭所有WebSocket连接\n      wsManager.closeAll();\n\n      // 登出并重定向到首页\n      store.dispatch('logout');\n      router.push('/');\n    };\n\n    // 打开聊天窗口\n    var openChatWindow = function openChatWindow(userId) {\n      if (!activeChatUsers.value.includes(userId)) {\n        activeChatUsers.value.push(userId);\n      }\n    };\n\n    // 关闭聊天窗口\n    var closeChatWindow = function closeChatWindow(userId) {\n      var index = activeChatUsers.value.indexOf(userId);\n      if (index !== -1) {\n        activeChatUsers.value.splice(index, 1);\n      }\n    };\n\n    // 初始化WebSocket连接\n    var initWebSockets = function initWebSockets() {\n      if (isLoggedIn.value) {\n        wsManager.init(store.state.token);\n      }\n    };\n\n    // 监听登录状态变化\n    watch(isLoggedIn, function (newValue) {\n      if (newValue) {\n        // 用户登录后初始化WebSocket\n        initWebSockets();\n      } else {\n        // 用户登出后关闭WebSocket\n        wsManager.closeAll();\n      }\n    });\n    onMounted(function () {\n      // 页面加载时初始化WebSocket\n      initWebSockets();\n\n      // 如果已登录，刷新用户信息\n      if (isLoggedIn.value) {\n        store.dispatch('getUserInfo').then(function (userInfo) {\n          console.log('用户信息已刷新:', userInfo);\n        })[\"catch\"](function (err) {\n          console.error('刷新用户信息失败:', err);\n        });\n      }\n\n      // 检查通知API是否可用\n      fetch(\"\".concat(window.location.protocol, \"//\").concat(window.location.host, \"/api/v1/notifications/\")).then(function (response) {\n        notificationsEnabled.value = response.status !== 404;\n        console.log('通知功能' + (notificationsEnabled.value ? '可用' : '不可用'));\n      })[\"catch\"](function () {\n        notificationsEnabled.value = false;\n      });\n    });\n    return {\n      isLoggedIn: isLoggedIn,\n      isAdmin: isAdmin,\n      user: user,\n      username: username,\n      userAvatar: userAvatar,\n      activeRoute: activeRoute,\n      activeChatUsers: activeChatUsers,\n      goToLogin: goToLogin,\n      goToRegister: goToRegister,\n      handleCommand: handleCommand,\n      openChatWindow: openChatWindow,\n      closeChatWindow: closeChatWindow,\n      notificationsEnabled: notificationsEnabled\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","watch","ref","useStore","useRouter","useRoute","NotificationBell","ChatWindow","wsManager","ElMessage","name","components","setup","store","router","route","activeChatUsers","isLoggedIn","getters","isAdmin","user","state","username","userAvatar","notificationsEnabled","activeRoute","path","goToLogin","push","goToRegister","handleCommand","command","_user$value","_store$state$user","userId","value","id","concat","console","error","logout","closeAll","dispatch","openChatWindow","includes","closeChatWindow","index","indexOf","splice","initWebSockets","init","token","newValue","then","userInfo","log","err","fetch","window","location","protocol","host","response","status"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <el-container>\n      <el-header>\n        <div class=\"header-content\">\n          <div class=\"logo\">\n            <router-link to=\"/\">论坛系统</router-link>\n          </div>\n          <div class=\"nav\">\n            <el-menu mode=\"horizontal\" :router=\"true\" :default-active=\"activeRoute\">\n              <el-menu-item index=\"/\">首页</el-menu-item>\n              <el-menu-item index=\"/boards\">板块</el-menu-item>\n              <el-menu-item index=\"/posts\">帖子</el-menu-item>\n              <el-menu-item index=\"/ranking\">排行榜</el-menu-item>\n              <el-menu-item index=\"/complaints\">投诉中心</el-menu-item>\n            </el-menu>\n          </div>\n          <div class=\"user-actions\">\n            <template v-if=\"isLoggedIn\">\n              <!-- 通知铃铛 -->\n              <NotificationBell v-if=\"notificationsEnabled\" />\n              \n              <!-- 用户头像和下拉菜单 -->\n              <el-dropdown trigger=\"click\" @command=\"handleCommand\">\n                <div class=\"user-avatar\">\n                  <el-avatar :size=\"32\" :src=\"userAvatar\">\n                    {{ username.substring(0, 1).toUpperCase() }}\n                  </el-avatar>\n                  <span class=\"username\">{{ user.nickname || user.username }}</span>\n                </div>\n                <template #dropdown>\n                  <el-dropdown-menu>\n                    <el-dropdown-item command=\"profile\">个人中心</el-dropdown-item>\n                    <el-dropdown-item command=\"messages\">我的私信</el-dropdown-item>\n                    <el-dropdown-item v-if=\"isAdmin\" command=\"admin\">管理后台</el-dropdown-item>\n                    <el-dropdown-item divided command=\"logout\">退出登录</el-dropdown-item>\n                  </el-dropdown-menu>\n                </template>\n              </el-dropdown>\n            </template>\n            <template v-else>\n              <el-button type=\"primary\" @click=\"goToLogin\">登录</el-button>\n              <el-button @click=\"goToRegister\">注册</el-button>\n            </template>\n          </div>\n        </div>\n      </el-header>\n      \n      <el-container class=\"main-container\">\n        <el-main>\n          <router-view />\n        </el-main>\n      </el-container>\n    \n    </el-container>\n    \n    <!-- 聊天窗口 -->\n    <div v-if=\"activeChatUsers.length > 0\" class=\"chat-windows-container\">\n      <ChatWindow \n        v-for=\"userId in activeChatUsers\"\n        :key=\"userId\"\n        :userId=\"userId\" \n        @close=\"closeChatWindow\" \n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed, onMounted, watch, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport NotificationBell from '@/components/NotificationBell.vue'\nimport ChatWindow from '@/components/ChatWindow.vue'\nimport wsManager from '@/utils/websocket'\nimport { ElMessage } from 'element-plus'\n\nexport default {\n  name: 'App',\n  components: {\n    NotificationBell,\n    ChatWindow\n  },\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n    const route = useRoute()\n    \n    // 活跃聊天用户列表\n    const activeChatUsers = ref([])\n    \n    // 登录状态\n    const isLoggedIn = computed(() => store.getters.isLoggedIn)\n    const isAdmin = computed(() => store.getters.isAdmin)\n    const user = computed(() => store.state.user)\n    const username = computed(() => store.getters.username)\n    const userAvatar = computed(() => store.getters.userAvatar)\n    \n    // 检查通知功能是否可用\n    const notificationsEnabled = ref(false)\n    \n    // 当前激活的路由\n    const activeRoute = computed(() => route.path)\n    \n    // 路由导航\n    const goToLogin = () => router.push('/login')\n    const goToRegister = () => router.push('/register')\n    \n    // 处理下拉菜单命令\n    const handleCommand = (command) => {\n      let userId;\n      \n      switch (command) {\n        case 'profile':\n          // 确保用户ID存在\n          userId = user.value?.id || store.state.user?.id;\n          if (userId) {\n            router.push(`/profile/${userId}`);\n          } else {\n            console.error('无法获取用户ID');\n            ElMessage.error('获取用户信息失败');\n          }\n          break;\n        case 'messages':\n          router.push('/messages');\n          break;\n        case 'admin':\n          router.push('/admin');\n          break;\n        case 'logout':\n          logout();\n          break;\n      }\n    }\n    \n    // 登出\n    const logout = () => {\n      // 关闭所有WebSocket连接\n      wsManager.closeAll()\n      \n      // 登出并重定向到首页\n      store.dispatch('logout')\n      router.push('/')\n    }\n    \n    // 打开聊天窗口\n    const openChatWindow = (userId) => {\n      if (!activeChatUsers.value.includes(userId)) {\n        activeChatUsers.value.push(userId)\n      }\n    }\n    \n    // 关闭聊天窗口\n    const closeChatWindow = (userId) => {\n      const index = activeChatUsers.value.indexOf(userId)\n      if (index !== -1) {\n        activeChatUsers.value.splice(index, 1)\n      }\n    }\n    \n    // 初始化WebSocket连接\n    const initWebSockets = () => {\n      if (isLoggedIn.value) {\n        wsManager.init(store.state.token)\n      }\n    }\n    \n    // 监听登录状态变化\n    watch(isLoggedIn, (newValue) => {\n      if (newValue) {\n        // 用户登录后初始化WebSocket\n        initWebSockets()\n      } else {\n        // 用户登出后关闭WebSocket\n        wsManager.closeAll()\n      }\n    })\n    \n    onMounted(() => {\n      // 页面加载时初始化WebSocket\n      initWebSockets()\n      \n      // 如果已登录，刷新用户信息\n      if (isLoggedIn.value) {\n        store.dispatch('getUserInfo').then(userInfo => {\n          console.log('用户信息已刷新:', userInfo)\n        }).catch(err => {\n          console.error('刷新用户信息失败:', err)\n        })\n      }\n      \n      // 检查通知API是否可用\n      fetch(`${window.location.protocol}//${window.location.host}/api/v1/notifications/`)\n        .then(response => {\n          notificationsEnabled.value = response.status !== 404\n          console.log('通知功能' + (notificationsEnabled.value ? '可用' : '不可用'))\n        })\n        .catch(() => {\n          notificationsEnabled.value = false\n        })\n    })\n    \n    return {\n      isLoggedIn,\n      isAdmin,\n      user,\n      username,\n      userAvatar,\n      activeRoute,\n      activeChatUsers,\n      goToLogin,\n      goToRegister,\n      handleCommand,\n      openChatWindow,\n      closeChatWindow,\n      notificationsEnabled\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  min-height: 100vh;\n}\n\n.el-container {\n  min-height: 100vh;\n}\n\n.el-header {\n  padding: 0;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  position: fixed;\n  width: 100%;\n  z-index: 1000;\n}\n\n.header-content {\n  max-width: 1400px;\n  margin: 0 auto;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px;\n}\n\n.logo {\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.logo a {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.nav {\n  flex: 1;\n  margin: 0 20px;\n}\n\n.nav .el-menu {\n  border: none;\n  background: transparent;\n}\n\n.user-actions {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.user-avatar {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.username {\n  margin-left: 8px;\n  font-size: 14px;\n}\n\n.main-container {\n  padding-top: 60px;\n  min-height: calc(100vh - 60px);\n  background-color: #f5f7fa;\n}\n\n.el-main {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.el-footer {\n  height: 60px !important;\n  background-color: #fff;\n  border-top: 1px solid #e4e7ed;\n  margin-top: auto;\n}\n\n.footer-content {\n  max-width: 1400px;\n  margin: 0 auto;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #909399;\n}\n\n.chat-windows-container {\n  position: fixed;\n  bottom: 0;\n  right: 20px;\n  display: flex;\n  gap: 16px;\n  z-index: 1000;\n}\n</style>"],"mappings":";;;;;;;AAqEA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAEC,GAAE,QAAS,KAAI;AACpD,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAS,EAAEC,QAAO,QAAS,YAAW;AAC/C,OAAOC,gBAAe,MAAO,mCAAkC;AAC/D,OAAOC,UAAS,MAAO,6BAA4B;AACnD,OAAOC,SAAQ,MAAO,mBAAkB;AACxC,SAASC,SAAQ,QAAS,cAAa;AAEvC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVL,gBAAgB,EAAhBA,gBAAgB;IAChBC,UAAS,EAATA;EACF,CAAC;EACDK,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,KAAI,GAAIV,QAAQ,CAAC;IACvB,IAAMW,MAAK,GAAIV,SAAS,CAAC;IACzB,IAAMW,KAAI,GAAIV,QAAQ,CAAC;;IAEvB;IACA,IAAMW,eAAc,GAAId,GAAG,CAAC,EAAE;;IAE9B;IACA,IAAMe,UAAS,GAAIlB,QAAQ,CAAC;MAAA,OAAMc,KAAK,CAACK,OAAO,CAACD,UAAU;IAAA;IAC1D,IAAME,OAAM,GAAIpB,QAAQ,CAAC;MAAA,OAAMc,KAAK,CAACK,OAAO,CAACC,OAAO;IAAA;IACpD,IAAMC,IAAG,GAAIrB,QAAQ,CAAC;MAAA,OAAMc,KAAK,CAACQ,KAAK,CAACD,IAAI;IAAA;IAC5C,IAAME,QAAO,GAAIvB,QAAQ,CAAC;MAAA,OAAMc,KAAK,CAACK,OAAO,CAACI,QAAQ;IAAA;IACtD,IAAMC,UAAS,GAAIxB,QAAQ,CAAC;MAAA,OAAMc,KAAK,CAACK,OAAO,CAACK,UAAU;IAAA;;IAE1D;IACA,IAAMC,oBAAmB,GAAItB,GAAG,CAAC,KAAK;;IAEtC;IACA,IAAMuB,WAAU,GAAI1B,QAAQ,CAAC;MAAA,OAAMgB,KAAK,CAACW,IAAI;IAAA;;IAE7C;IACA,IAAMC,SAAQ,GAAI,SAAZA,SAAQA,CAAA;MAAA,OAAUb,MAAM,CAACc,IAAI,CAAC,QAAQ;IAAA;IAC5C,IAAMC,YAAW,GAAI,SAAfA,YAAWA,CAAA;MAAA,OAAUf,MAAM,CAACc,IAAI,CAAC,WAAW;IAAA;;IAElD;IACA,IAAME,aAAY,GAAI,SAAhBA,aAAYA,CAAKC,OAAO,EAAK;MAAA,IAAAC,WAAA,EAAAC,iBAAA;MACjC,IAAIC,MAAM;MAEV,QAAQH,OAAO;QACb,KAAK,SAAS;UACZ;UACAG,MAAK,GAAI,EAAAF,WAAA,GAAAZ,IAAI,CAACe,KAAK,cAAAH,WAAA,uBAAVA,WAAA,CAAYI,EAAC,OAAAH,iBAAA,GAAKpB,KAAK,CAACQ,KAAK,CAACD,IAAI,cAAAa,iBAAA,uBAAhBA,iBAAA,CAAkBG,EAAE;UAC/C,IAAIF,MAAM,EAAE;YACVpB,MAAM,CAACc,IAAI,aAAAS,MAAA,CAAaH,MAAM,CAAE,CAAC;UACnC,OAAO;YACLI,OAAO,CAACC,KAAK,CAAC,UAAU,CAAC;YACzB9B,SAAS,CAAC8B,KAAK,CAAC,UAAU,CAAC;UAC7B;UACA;QACF,KAAK,UAAU;UACbzB,MAAM,CAACc,IAAI,CAAC,WAAW,CAAC;UACxB;QACF,KAAK,OAAO;UACVd,MAAM,CAACc,IAAI,CAAC,QAAQ,CAAC;UACrB;QACF,KAAK,QAAQ;UACXY,MAAM,CAAC,CAAC;UACR;MACJ;IACF;;IAEA;IACA,IAAMA,MAAK,GAAI,SAATA,MAAKA,CAAA,EAAU;MACnB;MACAhC,SAAS,CAACiC,QAAQ,CAAC;;MAEnB;MACA5B,KAAK,CAAC6B,QAAQ,CAAC,QAAQ;MACvB5B,MAAM,CAACc,IAAI,CAAC,GAAG;IACjB;;IAEA;IACA,IAAMe,cAAa,GAAI,SAAjBA,cAAaA,CAAKT,MAAM,EAAK;MACjC,IAAI,CAAClB,eAAe,CAACmB,KAAK,CAACS,QAAQ,CAACV,MAAM,CAAC,EAAE;QAC3ClB,eAAe,CAACmB,KAAK,CAACP,IAAI,CAACM,MAAM;MACnC;IACF;;IAEA;IACA,IAAMW,eAAc,GAAI,SAAlBA,eAAcA,CAAKX,MAAM,EAAK;MAClC,IAAMY,KAAI,GAAI9B,eAAe,CAACmB,KAAK,CAACY,OAAO,CAACb,MAAM;MAClD,IAAIY,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB9B,eAAe,CAACmB,KAAK,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC;MACvC;IACF;;IAEA;IACA,IAAMG,cAAa,GAAI,SAAjBA,cAAaA,CAAA,EAAU;MAC3B,IAAIhC,UAAU,CAACkB,KAAK,EAAE;QACpB3B,SAAS,CAAC0C,IAAI,CAACrC,KAAK,CAACQ,KAAK,CAAC8B,KAAK;MAClC;IACF;;IAEA;IACAlD,KAAK,CAACgB,UAAU,EAAE,UAACmC,QAAQ,EAAK;MAC9B,IAAIA,QAAQ,EAAE;QACZ;QACAH,cAAc,CAAC;MACjB,OAAO;QACL;QACAzC,SAAS,CAACiC,QAAQ,CAAC;MACrB;IACF,CAAC;IAEDzC,SAAS,CAAC,YAAM;MACd;MACAiD,cAAc,CAAC;;MAEf;MACA,IAAIhC,UAAU,CAACkB,KAAK,EAAE;QACpBtB,KAAK,CAAC6B,QAAQ,CAAC,aAAa,CAAC,CAACW,IAAI,CAAC,UAAAC,QAAO,EAAK;UAC7ChB,OAAO,CAACiB,GAAG,CAAC,UAAU,EAAED,QAAQ;QAClC,CAAC,CAAC,SAAM,CAAC,UAAAE,GAAE,EAAK;UACdlB,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEiB,GAAG;QAChC,CAAC;MACH;;MAEA;MACAC,KAAK,IAAApB,MAAA,CAAIqB,MAAM,CAACC,QAAQ,CAACC,QAAQ,QAAAvB,MAAA,CAAKqB,MAAM,CAACC,QAAQ,CAACE,IAAI,2BAAwB,EAC/ER,IAAI,CAAC,UAAAS,QAAO,EAAK;QAChBtC,oBAAoB,CAACW,KAAI,GAAI2B,QAAQ,CAACC,MAAK,KAAM,GAAE;QACnDzB,OAAO,CAACiB,GAAG,CAAC,MAAK,IAAK/B,oBAAoB,CAACW,KAAI,GAAI,IAAG,GAAI,KAAK,CAAC;MAClE,CAAC,UACK,CAAC,YAAM;QACXX,oBAAoB,CAACW,KAAI,GAAI,KAAI;MACnC,CAAC;IACL,CAAC;IAED,OAAO;MACLlB,UAAU,EAAVA,UAAU;MACVE,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA,IAAI;MACJE,QAAQ,EAARA,QAAQ;MACRC,UAAU,EAAVA,UAAU;MACVE,WAAW,EAAXA,WAAW;MACXT,eAAe,EAAfA,eAAe;MACfW,SAAS,EAATA,SAAS;MACTE,YAAY,EAAZA,YAAY;MACZC,aAAa,EAAbA,aAAa;MACba,cAAc,EAAdA,cAAc;MACdE,eAAe,EAAfA,eAAe;MACfrB,oBAAmB,EAAnBA;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}