{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 增强的消息去重机制\nvar messageTracker = {\n  lastMessage: '',\n  lastTime: 0,\n  messageQueue: [],\n  showMessage: function showMessage(message, type) {\n    var _this = this;\n    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';\n    var now = Date.now();\n    var messageInfo = {\n      message: message,\n      type: type,\n      time: now,\n      source: source\n    };\n    console.log(\"\\u6D88\\u606F\\u89E6\\u53D1 [\".concat(source, \"]: \").concat(message, \" (\").concat(type, \")\"), messageInfo);\n\n    // 如果相同消息在3秒内出现，则不重复显示\n    if (message === this.lastMessage && now - this.lastTime < 3000) {\n      console.log(\"\\u6D88\\u606F\\u88AB\\u53BB\\u91CD: \".concat(message, \" (\\u4E0A\\u6B21\\u663E\\u793A\\u65F6\\u95F4: \").concat(new Date(this.lastTime).toLocaleTimeString(), \")\"));\n      return;\n    }\n\n    // 清理过期的消息\n    this.messageQueue = this.messageQueue.filter(function (msg) {\n      return now - msg.time < 5000;\n    });\n\n    // 检查队列中是否已有相同消息\n    var duplicate = this.messageQueue.find(function (msg) {\n      return msg.message === message;\n    });\n    if (duplicate) {\n      console.log(\"\\u961F\\u5217\\u4E2D\\u5DF2\\u5B58\\u5728\\u76F8\\u540C\\u6D88\\u606F: \".concat(message, \" (\\u6765\\u6E90: \").concat(duplicate.source, \")\"));\n      return;\n    }\n\n    // 添加到消息队列\n    this.messageQueue.push(messageInfo);\n    this.lastMessage = message;\n    this.lastTime = now;\n    console.log(\"\\u663E\\u793A\\u6D88\\u606F: \".concat(message));\n    ElMessage.closeAll(); // 关闭所有现有消息\n    ElMessage({\n      message: message,\n      type: type,\n      duration: type === 'error' ? 5 * 1000 : 3000,\n      onClose: function onClose() {\n        // 从队列中移除\n        _this.messageQueue = _this.messageQueue.filter(function (msg) {\n          return msg.message !== message;\n        });\n      }\n    });\n  }\n};\n\n// 全局挂载消息追踪器，用于其他组件直接使用\nwindow.messageTracker = messageTracker;\n\n// 创建自定义消息显示函数，替代直接调用ElMessage\nvar showSafeMessage = function showSafeMessage(options) {\n  if (typeof options === 'string') {\n    messageTracker.showMessage(options, 'info', 'safe-message');\n  } else {\n    messageTracker.showMessage(options.message, options.type || 'info', 'safe-message-' + (options.type || 'info'));\n  }\n};\n\n// 全局暴露，方便其他组件使用\nwindow.showSafeMessage = showSafeMessage;\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000,\n  // 添加validateStatus选项，允许所有状态码通过，不抛出请求错误\n  validateStatus: function validateStatus(status) {\n    return status < 600; // 所有HTTP状态码都作为成功处理，包括500错误\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n\n  // 设置Authorization头\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n\n  // 设置Content-Type头（如果没有设置）\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 辅助函数：判断是否为登出操作\nfunction isLogoutOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n  var isPostMethod = config.method.toLowerCase() === 'post';\n  var isLogoutUrl = config.url.includes('/api/v1/auth/logout/');\n  console.log('请求拦截器检测登出操作:', {\n    url: config.url,\n    method: config.method,\n    isLogoutUrl: isLogoutUrl,\n    isPostMethod: isPostMethod,\n    isLogout: isLogoutUrl && isPostMethod\n  });\n  return isLogoutUrl && isPostMethod;\n}\n\n// 辅助函数：判断是否为公开内容请求（无需登录即可访问）\nfunction isPublicContentRequest(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n\n  // 默认所有GET请求都视为公开内容\n  var isGetMethod = config.method.toLowerCase() === 'get';\n\n  // 如果是GET请求，直接返回true，允许所有GET请求不需要登录\n  if (isGetMethod) {\n    console.log('请求拦截器: GET请求被视为公开内容', config.url);\n    return true;\n  }\n\n  // 扩展公开URL匹配\n  var isPostsUrl = config.url.includes('/api/v1/posts');\n  var isBoardsUrl = config.url.includes('/api/v1/boards');\n  var isRankingUrl = config.url.includes('/api/v1/ranking');\n  var isCommentsUrl = config.url.includes('/api/v1/comments');\n  var isHomeUrl = config.url === '/' || config.url.endsWith('/index.html');\n  var isProfileUrl = config.url.includes('/api/v1/users/profile');\n  var isStaticUrl = config.url.includes('/static/') || config.url.includes('/media/');\n\n  // 调试日志，帮助排查问题\n  console.log('请求拦截器检测公开内容请求:', {\n    url: config.url,\n    method: config.method,\n    isGetMethod: isGetMethod,\n    isPostsUrl: isPostsUrl,\n    isBoardsUrl: isBoardsUrl,\n    isRankingUrl: isRankingUrl,\n    isCommentsUrl: isCommentsUrl,\n    isHomeUrl: isHomeUrl,\n    isProfileUrl: isProfileUrl,\n    isStaticUrl: isStaticUrl,\n    isPublicContent: isGetMethod || isPostsUrl || isBoardsUrl || isRankingUrl || isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl\n  });\n\n  // 所有GET请求 + 特定POST请求路径 = 公开内容请求\n  return isGetMethod || isPostsUrl || isBoardsUrl || isRankingUrl || isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl;\n}\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n  console.log('响应拦截器收到响应:', res);\n\n  // 检查是否为公开内容请求\n  var isPublic = isPublicContentRequest(response.config);\n  console.log('是否为公开内容请求:', isPublic);\n\n  // 检查是否有明确的错误状态\n  if (res.status !== undefined && res.status !== 0 && res.status !== 200 || res.code !== undefined && res.code !== 0 && res.code !== 200) {\n    console.error('API错误响应:', res);\n\n    // 401错误特殊处理 - 对于公开内容请求，不显示错误消息\n    if ((res.status === 401 || res.code === 401) && isPublic) {\n      console.log('公开内容401错误，不显示错误消息');\n      // 直接返回一个成功的空数据，让调用方继续处理\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: []\n      };\n    } else {\n      // 其他错误正常显示错误消息\n      messageTracker.showMessage(res.msg || '请求失败', 'error', 'axios-response-error');\n    }\n\n    // 401: 未登录或token过期\n    if ((res.status === 401 || res.code === 401) && !isPublic) {\n      // 对于公开内容，即使返回401也不跳转登录页\n      console.log('非公开内容401错误，清除登录状态');\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n\n    // 对于公开内容的401错误，返回空数据而不是拒绝Promise\n    if ((res.status === 401 || res.code === 401) && isPublic) {\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: []\n      };\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    // 如果是\"操作成功\"消息，且不在特定页面，且不是登出操作，才显示成功消息\n    if (res.msg && res.msg !== '操作成功' && !shouldSuppressMessage() && !isCommentDeleteOperation(response.config) && !isPostOperation(response.config) && !isLogoutOperation(response.config)) {\n      messageTracker.showMessage(res.msg, 'success', 'axios-response-success');\n    }\n\n    // 兼容不同的响应格式\n    if (res.code === undefined && res.status === undefined) {\n      // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: res\n      };\n    }\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 检查是否为公开内容请求\n  var isPublic = error.config && isPublicContentRequest(error.config);\n  console.log('是否为公开内容请求:', isPublic);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n\n    // 对于公开内容请求，不自动跳转到登录页，也不显示错误消息\n    if (status === 401 && isPublic) {\n      console.log('公开内容401错误，不显示错误消息，不跳转登录页');\n      // 返回一个成功的空数据，让调用方继续处理\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: []\n      };\n    } else if (status === 401 && !isPublic) {\n      messageTracker.showMessage('登录已过期，请重新登录', 'error', 'axios-401');\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else if (status === 404) {\n      messageTracker.showMessage('请求的资源不存在', 'error', 'axios-404');\n    } else if (status === 500) {\n      messageTracker.showMessage('服务器内部错误', 'error', 'axios-500');\n    } else {\n      // 尝试从响应中获取错误信息\n      var errorMsg = '请求失败';\n      try {\n        if (error.response.data) {\n          if (error.response.data.msg) {\n            errorMsg = error.response.data.msg;\n          } else if (error.response.data.detail) {\n            errorMsg = error.response.data.detail;\n          } else if (typeof error.response.data === 'string') {\n            errorMsg = error.response.data;\n          }\n        }\n      } catch (e) {\n        console.error('解析错误信息失败:', e);\n      }\n\n      // 对于公开内容的GET请求，不显示错误消息\n      if (!isPublic) {\n        messageTracker.showMessage(errorMsg, 'error', 'axios-other-error');\n      } else {\n        console.log('公开内容请求错误，不显示错误消息:', errorMsg);\n      }\n    }\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    messageTracker.showMessage('服务器无响应，请检查网络连接', 'error', 'axios-no-response');\n  } else {\n    // 请求配置有误\n    messageTracker.showMessage('网络错误，请检查网络连接', 'error', 'axios-config-error');\n  }\n\n  // 对于公开内容的请求，返回空数据而不是拒绝Promise\n  if (isPublic) {\n    console.log('公开内容请求错误，返回空数据');\n    return {\n      code: 0,\n      status: 0,\n      msg: '',\n      data: []\n    };\n  }\n  return Promise.reject(error);\n});\n\n// 辅助函数：判断当前页面是否应该抑制消息显示\nfunction shouldSuppressMessage() {\n  var currentPath = window.location.pathname;\n  return currentPath.includes('/post/create') || currentPath.includes('/post/edit') || currentPath.includes('/post/') && !currentPath.includes('/create') && !currentPath.includes('/edit');\n}\n\n// 辅助函数：判断是否为评论删除操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为评论删除操作，配置不完整:', config);\n    return false;\n  }\n  var isDeleteMethod = config.method.toLowerCase() === 'delete';\n  var isCommentUrl = config.url.includes('/api/v1/comments/');\n  console.log('请求拦截器检测:', {\n    url: config.url,\n    method: config.method,\n    isDeleteMethod: isDeleteMethod,\n    isCommentUrl: isCommentUrl,\n    isCommentDelete: isDeleteMethod && isCommentUrl\n  });\n  return isCommentUrl && isDeleteMethod;\n}\n\n// 辅助函数：判断是否为帖子相关操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n\n  // 帖子URL模式\n  var isPostUrl = config.url.includes('/api/v1/posts/');\n\n  // 判断是否为编辑、点赞、收藏、置顶、加精等操作\n  var isPutMethod = config.method.toLowerCase() === 'put';\n  var isPostMethod = config.method.toLowerCase() === 'post';\n\n  // 特定操作的URL模式\n  var isLikeUrl = config.url.includes('/like');\n  var isFavoriteUrl = config.url.includes('/favorite');\n  var isPinUrl = config.url.includes('/pin');\n  var isFeatureUrl = config.url.includes('/feature');\n\n  // 判断是否为帖子编辑或特定操作\n  var isPostEdit = isPutMethod && isPostUrl && !isLikeUrl && !isFavoriteUrl && !isPinUrl && !isFeatureUrl;\n  var isPostAction = isPostUrl && (isLikeUrl || isFavoriteUrl || isPinUrl || isFeatureUrl);\n  var isPostCreate = isPostMethod && config.url === '/api/v1/posts/';\n  console.log('请求拦截器检测帖子操作:', {\n    url: config.url,\n    method: config.method,\n    isPostUrl: isPostUrl,\n    isPutMethod: isPutMethod,\n    isPostMethod: isPostMethod,\n    isLikeUrl: isLikeUrl,\n    isFavoriteUrl: isFavoriteUrl,\n    isPinUrl: isPinUrl,\n    isFeatureUrl: isFeatureUrl,\n    isPostEdit: isPostEdit,\n    isPostAction: isPostAction,\n    isPostCreate: isPostCreate,\n    isPostOperation: isPostEdit || isPostAction || isPostCreate\n  });\n  return isPostEdit || isPostAction || isPostCreate;\n}\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","messageTracker","lastMessage","lastTime","messageQueue","showMessage","message","type","_this","source","arguments","length","undefined","now","Date","messageInfo","time","console","log","concat","toLocaleTimeString","filter","msg","duplicate","find","push","closeAll","duration","onClose","window","showSafeMessage","options","service","create","baseURL","timeout","validateStatus","status","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","method","data","FormData","error","Promise","reject","isLogoutOperation","url","isPostMethod","toLowerCase","isLogoutUrl","includes","isLogout","isPublicContentRequest","isGetMethod","isPostsUrl","isBoardsUrl","isRankingUrl","isCommentsUrl","isHomeUrl","endsWith","isProfileUrl","isStaticUrl","isPublicContent","response","res","isPublic","code","removeItem","Error","shouldSuppressMessage","isCommentDeleteOperation","isPostOperation","errorMsg","detail","e","currentPath","location","pathname","isDeleteMethod","isCommentUrl","isCommentDelete","isPostUrl","isPutMethod","isLikeUrl","isFavoriteUrl","isPinUrl","isFeatureUrl","isPostEdit","isPostAction","isPostCreate"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 增强的消息去重机制\nconst messageTracker = {\n  lastMessage: '',\n  lastTime: 0,\n  messageQueue: [],\n  showMessage(message, type, source = 'unknown') {\n    const now = Date.now();\n    const messageInfo = { message, type, time: now, source };\n    \n    console.log(`消息触发 [${source}]: ${message} (${type})`, messageInfo);\n    \n    // 如果相同消息在3秒内出现，则不重复显示\n    if (message === this.lastMessage && now - this.lastTime < 3000) {\n      console.log(`消息被去重: ${message} (上次显示时间: ${new Date(this.lastTime).toLocaleTimeString()})`);\n      return;\n    }\n    \n    // 清理过期的消息\n    this.messageQueue = this.messageQueue.filter(msg => now - msg.time < 5000);\n    \n    // 检查队列中是否已有相同消息\n    const duplicate = this.messageQueue.find(msg => msg.message === message);\n    if (duplicate) {\n      console.log(`队列中已存在相同消息: ${message} (来源: ${duplicate.source})`);\n      return;\n    }\n    \n    // 添加到消息队列\n    this.messageQueue.push(messageInfo);\n    this.lastMessage = message;\n    this.lastTime = now;\n    \n    console.log(`显示消息: ${message}`);\n    ElMessage.closeAll(); // 关闭所有现有消息\n    ElMessage({\n      message: message,\n      type: type,\n      duration: type === 'error' ? 5 * 1000 : 3000,\n      onClose: () => {\n        // 从队列中移除\n        this.messageQueue = this.messageQueue.filter(msg => msg.message !== message);\n      }\n    });\n  }\n};\n\n// 全局挂载消息追踪器，用于其他组件直接使用\nwindow.messageTracker = messageTracker;\n\n// 创建自定义消息显示函数，替代直接调用ElMessage\nconst showSafeMessage = (options) => {\n  if (typeof options === 'string') {\n    messageTracker.showMessage(options, 'info', 'safe-message');\n  } else {\n    messageTracker.showMessage(\n      options.message, \n      options.type || 'info', \n      'safe-message-' + (options.type || 'info')\n    );\n  }\n};\n\n// 全局暴露，方便其他组件使用\nwindow.showSafeMessage = showSafeMessage;\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000,\n  // 添加validateStatus选项，允许所有状态码通过，不抛出请求错误\n  validateStatus: function (status) {\n    return status < 600 // 所有HTTP状态码都作为成功处理，包括500错误\n  }\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    \n    // 设置Authorization头\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    // 设置Content-Type头（如果没有设置）\n    if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n      if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n        config.headers['Content-Type'] = 'application/json'\n      }\n    }\n\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 辅助函数：判断是否为登出操作\nfunction isLogoutOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  const isPostMethod = config.method.toLowerCase() === 'post'\n  const isLogoutUrl = config.url.includes('/api/v1/auth/logout/')\n  \n  console.log('请求拦截器检测登出操作:', {\n    url: config.url,\n    method: config.method,\n    isLogoutUrl,\n    isPostMethod,\n    isLogout: isLogoutUrl && isPostMethod\n  })\n  \n  return isLogoutUrl && isPostMethod\n}\n\n// 辅助函数：判断是否为公开内容请求（无需登录即可访问）\nfunction isPublicContentRequest(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  // 默认所有GET请求都视为公开内容\n  const isGetMethod = config.method.toLowerCase() === 'get'\n  \n  // 如果是GET请求，直接返回true，允许所有GET请求不需要登录\n  if (isGetMethod) {\n    console.log('请求拦截器: GET请求被视为公开内容', config.url);\n    return true;\n  }\n  \n  // 扩展公开URL匹配\n  const isPostsUrl = config.url.includes('/api/v1/posts') \n  const isBoardsUrl = config.url.includes('/api/v1/boards')\n  const isRankingUrl = config.url.includes('/api/v1/ranking')\n  const isCommentsUrl = config.url.includes('/api/v1/comments')\n  const isHomeUrl = config.url === '/' || config.url.endsWith('/index.html')\n  const isProfileUrl = config.url.includes('/api/v1/users/profile')\n  const isStaticUrl = config.url.includes('/static/') || config.url.includes('/media/')\n  \n  // 调试日志，帮助排查问题\n  console.log('请求拦截器检测公开内容请求:', {\n    url: config.url,\n    method: config.method,\n    isGetMethod,\n    isPostsUrl,\n    isBoardsUrl,\n    isRankingUrl,\n    isCommentsUrl,\n    isHomeUrl,\n    isProfileUrl,\n    isStaticUrl,\n    isPublicContent: isGetMethod || (\n      isPostsUrl || isBoardsUrl || isRankingUrl || \n      isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl\n    )\n  })\n  \n  // 所有GET请求 + 特定POST请求路径 = 公开内容请求\n  return isGetMethod || (\n    (isPostsUrl || isBoardsUrl || isRankingUrl || \n    isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl)\n  )\n}\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    console.log('响应拦截器收到响应:', res)\n    \n    // 检查是否为公开内容请求\n    const isPublic = isPublicContentRequest(response.config);\n    console.log('是否为公开内容请求:', isPublic);\n    \n    // 检查是否有明确的错误状态\n    if ((res.status !== undefined && res.status !== 0 && res.status !== 200) || \n        (res.code !== undefined && res.code !== 0 && res.code !== 200)) {\n      console.error('API错误响应:', res)\n      \n      // 401错误特殊处理 - 对于公开内容请求，不显示错误消息\n      if ((res.status === 401 || res.code === 401) && isPublic) {\n        console.log('公开内容401错误，不显示错误消息')\n        // 直接返回一个成功的空数据，让调用方继续处理\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: []\n        }\n      } else {\n        // 其他错误正常显示错误消息\n        messageTracker.showMessage(res.msg || '请求失败', 'error', 'axios-response-error');\n      }\n\n      // 401: 未登录或token过期\n      if ((res.status === 401 || res.code === 401) && !isPublic) {\n        // 对于公开内容，即使返回401也不跳转登录页\n        console.log('非公开内容401错误，清除登录状态')\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      }\n\n      // 对于公开内容的401错误，返回空数据而不是拒绝Promise\n      if ((res.status === 401 || res.code === 401) && isPublic) {\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: []\n        }\n      }\n\n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      // 如果是\"操作成功\"消息，且不在特定页面，且不是登出操作，才显示成功消息\n      if (res.msg && res.msg !== '操作成功' && !shouldSuppressMessage() && \n          !isCommentDeleteOperation(response.config) && \n          !isPostOperation(response.config) &&\n          !isLogoutOperation(response.config)) {\n        messageTracker.showMessage(res.msg, 'success', 'axios-response-success');\n      }\n      \n      // 兼容不同的响应格式\n      if (res.code === undefined && res.status === undefined) {\n        // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: res\n        }\n      }\n\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n\n    // 检查是否为公开内容请求\n    const isPublic = error.config && isPublicContentRequest(error.config);\n    console.log('是否为公开内容请求:', isPublic);\n\n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n      \n      // 对于公开内容请求，不自动跳转到登录页，也不显示错误消息\n      if (status === 401 && isPublic) {\n        console.log('公开内容401错误，不显示错误消息，不跳转登录页')\n        // 返回一个成功的空数据，让调用方继续处理\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: []\n        }\n      } else if (status === 401 && !isPublic) {\n        messageTracker.showMessage('登录已过期，请重新登录', 'error', 'axios-401');\n\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      } else if (status === 404) {\n        messageTracker.showMessage('请求的资源不存在', 'error', 'axios-404');\n      } else if (status === 500) {\n        messageTracker.showMessage('服务器内部错误', 'error', 'axios-500');\n      } else {\n        // 尝试从响应中获取错误信息\n        let errorMsg = '请求失败'\n        try {\n          if (error.response.data) {\n            if (error.response.data.msg) {\n              errorMsg = error.response.data.msg\n            } else if (error.response.data.detail) {\n              errorMsg = error.response.data.detail\n            } else if (typeof error.response.data === 'string') {\n              errorMsg = error.response.data\n            }\n          }\n        } catch (e) {\n          console.error('解析错误信息失败:', e)\n        }\n\n        // 对于公开内容的GET请求，不显示错误消息\n        if (!isPublic) {\n          messageTracker.showMessage(errorMsg, 'error', 'axios-other-error');\n        } else {\n          console.log('公开内容请求错误，不显示错误消息:', errorMsg);\n        }\n      }\n    } else if (error.request) {\n      // 请求已发送但没有收到响应\n      messageTracker.showMessage('服务器无响应，请检查网络连接', 'error', 'axios-no-response');\n    } else {\n      // 请求配置有误\n      messageTracker.showMessage('网络错误，请检查网络连接', 'error', 'axios-config-error');\n    }\n\n    // 对于公开内容的请求，返回空数据而不是拒绝Promise\n    if (isPublic) {\n      console.log('公开内容请求错误，返回空数据');\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: []\n      };\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n// 辅助函数：判断当前页面是否应该抑制消息显示\nfunction shouldSuppressMessage() {\n  const currentPath = window.location.pathname\n  return currentPath.includes('/post/create') || \n         currentPath.includes('/post/edit') || \n         (currentPath.includes('/post/') && !currentPath.includes('/create') && !currentPath.includes('/edit'))\n}\n\n// 辅助函数：判断是否为评论删除操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为评论删除操作，配置不完整:', config)\n    return false\n  }\n  \n  const isDeleteMethod = config.method.toLowerCase() === 'delete'\n  const isCommentUrl = config.url.includes('/api/v1/comments/')\n  \n  console.log('请求拦截器检测:', {\n    url: config.url,\n    method: config.method,\n    isDeleteMethod,\n    isCommentUrl,\n    isCommentDelete: isDeleteMethod && isCommentUrl\n  })\n  \n  return isCommentUrl && isDeleteMethod\n}\n\n// 辅助函数：判断是否为帖子相关操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  // 帖子URL模式\n  const isPostUrl = config.url.includes('/api/v1/posts/')\n  \n  // 判断是否为编辑、点赞、收藏、置顶、加精等操作\n  const isPutMethod = config.method.toLowerCase() === 'put'\n  const isPostMethod = config.method.toLowerCase() === 'post'\n  \n  // 特定操作的URL模式\n  const isLikeUrl = config.url.includes('/like')\n  const isFavoriteUrl = config.url.includes('/favorite')\n  const isPinUrl = config.url.includes('/pin')\n  const isFeatureUrl = config.url.includes('/feature')\n  \n  // 判断是否为帖子编辑或特定操作\n  const isPostEdit = isPutMethod && isPostUrl && !isLikeUrl && !isFavoriteUrl && !isPinUrl && !isFeatureUrl\n  const isPostAction = isPostUrl && (isLikeUrl || isFavoriteUrl || isPinUrl || isFeatureUrl)\n  const isPostCreate = isPostMethod && config.url === '/api/v1/posts/'\n  \n  console.log('请求拦截器检测帖子操作:', {\n    url: config.url,\n    method: config.method,\n    isPostUrl,\n    isPutMethod,\n    isPostMethod,\n    isLikeUrl,\n    isFavoriteUrl,\n    isPinUrl,\n    isFeatureUrl,\n    isPostEdit,\n    isPostAction,\n    isPostCreate,\n    isPostOperation: isPostEdit || isPostAction || isPostCreate\n  })\n  \n  return isPostEdit || isPostAction || isPostCreate\n}\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}