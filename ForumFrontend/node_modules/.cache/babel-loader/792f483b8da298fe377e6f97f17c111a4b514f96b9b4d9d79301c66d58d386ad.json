{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { User, Message, Lock } from '@element-plus/icons-vue';\nimport { register } from '../api/user';\nexport default {\n  name: 'Register',\n  components: {\n    User,\n    Message,\n    Lock\n  },\n  setup() {\n    const router = useRouter();\n    const formRef = ref(null);\n    const loading = ref(false);\n\n    // 表单数据\n    const registerForm = reactive({\n      username: '',\n      email: '',\n      nickname: '',\n      password: '',\n      confirmPassword: ''\n    });\n\n    // 表单验证规则\n    const registerRules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 50,\n        message: '用户名长度应在3-50个字符之间',\n        trigger: 'blur'\n      }],\n      email: [{\n        required: true,\n        message: '请输入邮箱',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱格式',\n        trigger: 'blur'\n      }],\n      nickname: [{\n        required: true,\n        message: '请输入昵称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 50,\n        message: '昵称长度应在2-50个字符之间',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        max: 20,\n        message: '密码长度应在6-20个字符之间',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        required: true,\n        message: '请再次输入密码',\n        trigger: 'blur'\n      }, {\n        validator: (rule, value, callback) => {\n          if (value !== registerForm.password) {\n            callback(new Error('两次输入的密码不一致'));\n          } else {\n            callback();\n          }\n        },\n        trigger: 'blur'\n      }]\n    };\n\n    // 注册处理\n    const handleRegister = async () => {\n      try {\n        // 表单验证\n        await formRef.value.validate();\n\n        // 显示加载状态\n        loading.value = true;\n\n        // 准备注册数据\n        const registerPayload = {\n          username: registerForm.username,\n          email: registerForm.email,\n          nickname: registerForm.nickname,\n          password: registerForm.password\n        };\n\n        // 调用注册API\n        await register(registerPayload);\n        ElMessage({\n          message: '注册成功，请登录',\n          type: 'success'\n        });\n\n        // 跳转到登录页\n        router.push('/login');\n      } catch (error) {\n        console.error('注册失败:', error);\n        ElMessage({\n          message: error.message || '注册失败，请检查输入信息',\n          type: 'error'\n        });\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      registerForm,\n      formRef,\n      registerRules,\n      loading,\n      handleRegister\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useRouter","ElMessage","User","Message","Lock","register","name","components","setup","router","formRef","loading","registerForm","username","email","nickname","password","confirmPassword","registerRules","required","message","trigger","min","max","type","validator","rule","value","callback","Error","handleRegister","validate","registerPayload","push","error","console"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\Register.vue"],"sourcesContent":["<template>\n  <div class=\"register-container\">\n    <div class=\"register-box\">\n      <div class=\"register-header\">\n        <h2>用户注册</h2>\n      </div>\n      <el-form\n        ref=\"formRef\"\n        :model=\"registerForm\"\n        :rules=\"registerRules\"\n        label-width=\"80px\"\n        class=\"register-form\"\n      >\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input\n            v-model=\"registerForm.username\"\n            placeholder=\"请输入用户名\"\n          >\n            <template #prefix>\n              <el-icon><User /></el-icon>\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input\n            v-model=\"registerForm.email\"\n            placeholder=\"请输入邮箱\"\n          >\n            <template #prefix>\n              <el-icon><Message /></el-icon>\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"昵称\" prop=\"nickname\">\n          <el-input\n            v-model=\"registerForm.nickname\"\n            placeholder=\"请输入昵称\"\n          >\n            <template #prefix>\n              <el-icon><User /></el-icon>\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            v-model=\"registerForm.password\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            show-password\n          >\n            <template #prefix>\n              <el-icon><Lock /></el-icon>\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\n          <el-input\n            v-model=\"registerForm.confirmPassword\"\n            type=\"password\"\n            placeholder=\"请再次输入密码\"\n            show-password\n          >\n            <template #prefix>\n              <el-icon><Lock /></el-icon>\n            </template>\n          </el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button\n            type=\"primary\"\n            :loading=\"loading\"\n            @click=\"handleRegister\"\n            class=\"register-button\"\n          >注册</el-button>\n        </el-form-item>\n        <div class=\"register-options\">\n          <router-link to=\"/login\">已有账号？立即登录</router-link>\n        </div>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { User, Message, Lock } from '@element-plus/icons-vue'\nimport { register } from '../api/user'\n\nexport default {\n  name: 'Register',\n  components: {\n    User,\n    Message,\n    Lock\n  },\n  setup() {\n    const router = useRouter()\n    const formRef = ref(null)\n    const loading = ref(false)\n\n    // 表单数据\n    const registerForm = reactive({\n      username: '',\n      email: '',\n      nickname: '',\n      password: '',\n      confirmPassword: ''\n    })\n\n    // 表单验证规则\n    const registerRules = {\n      username: [\n        { required: true, message: '请输入用户名', trigger: 'blur' },\n        { min: 3, max: 50, message: '用户名长度应在3-50个字符之间', trigger: 'blur' }\n      ],\n      email: [\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\n        { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n      ],\n      nickname: [\n        { required: true, message: '请输入昵称', trigger: 'blur' },\n        { min: 2, max: 50, message: '昵称长度应在2-50个字符之间', trigger: 'blur' }\n      ],\n      password: [\n        { required: true, message: '请输入密码', trigger: 'blur' },\n        { min: 6, max: 20, message: '密码长度应在6-20个字符之间', trigger: 'blur' }\n      ],\n      confirmPassword: [\n        { required: true, message: '请再次输入密码', trigger: 'blur' },\n        {\n          validator: (rule, value, callback) => {\n            if (value !== registerForm.password) {\n              callback(new Error('两次输入的密码不一致'))\n            } else {\n              callback()\n            }\n          },\n          trigger: 'blur'\n        }\n      ]\n    }\n\n    // 注册处理\n    const handleRegister = async () => {\n      try {\n        // 表单验证\n        await formRef.value.validate()\n\n        // 显示加载状态\n        loading.value = true\n\n        // 准备注册数据\n        const registerPayload = {\n          username: registerForm.username,\n          email: registerForm.email,\n          nickname: registerForm.nickname,\n          password: registerForm.password\n        }\n\n        // 调用注册API\n        await register(registerPayload)\n\n        ElMessage({\n          message: '注册成功，请登录',\n          type: 'success'\n        })\n\n        // 跳转到登录页\n        router.push('/login')\n      } catch (error) {\n        console.error('注册失败:', error)\n        ElMessage({\n          message: error.message || '注册失败，请检查输入信息',\n          type: 'error'\n        })\n      } finally {\n        loading.value = false\n      }\n    }\n\n    return {\n      registerForm,\n      formRef,\n      registerRules,\n      loading,\n      handleRegister\n    }\n  }\n}\n</script>\n\n<style scoped>\n.register-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f7fa;\n  padding: 20px 0;\n}\n\n.register-box {\n  width: 450px;\n  padding: 30px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.register-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.register-header h2 {\n  font-weight: 500;\n  color: #303133;\n}\n\n.register-form {\n  margin-top: 20px;\n}\n\n.register-button {\n  width: 100%;\n}\n\n.register-options {\n  display: flex;\n  justify-content: center;\n  margin-top: 15px;\n  font-size: 14px;\n}\n\n.register-options a {\n  color: #409eff;\n  text-decoration: none;\n}\n\n.register-options a:hover {\n  text-decoration: underline;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}