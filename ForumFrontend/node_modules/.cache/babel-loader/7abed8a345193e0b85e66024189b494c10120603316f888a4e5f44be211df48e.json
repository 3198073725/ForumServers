{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar tag = require('./tag.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar useFormCommonProps = require('../../form/src/hooks/use-form-common-props.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElTag\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: tag.tagProps,\n  emits: tag.tagEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var tagSize = useFormCommonProps.useFormSize();\n    var ns = index.useNamespace(\"tag\");\n    var containerKls = vue.computed(function () {\n      var type = props.type,\n        hit = props.hit,\n        effect = props.effect,\n        closable = props.closable,\n        round = props.round;\n      return [ns.b(), ns.is(\"closable\", closable), ns.m(type || \"primary\"), ns.m(tagSize.value), ns.m(effect), ns.is(\"hit\", hit), ns.is(\"round\", round)];\n    });\n    var handleClose = function handleClose(event) {\n      emit(\"close\", event);\n    };\n    var handleClick = function handleClick(event) {\n      emit(\"click\", event);\n    };\n    var handleVNodeMounted = function handleVNodeMounted(vnode) {\n      var _a, _b, _c;\n      if ((_c = (_b = (_a = vnode == null ? void 0 : vnode.component) == null ? void 0 : _a.subTree) == null ? void 0 : _b.component) == null ? void 0 : _c.bum) {\n        vnode.component.subTree.component.bum = null;\n      }\n    };\n    return function (_ctx, _cache) {\n      return _ctx.disableTransitions ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 0,\n        \"class\": vue.normalizeClass(vue.unref(containerKls)),\n        style: vue.normalizeStyle({\n          backgroundColor: _ctx.color\n        }),\n        onClick: handleClick\n      }, [vue.createElementVNode(\"span\", {\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"content\"))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 2), _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n        key: 0,\n        \"class\": vue.normalizeClass(vue.unref(ns).e(\"close\")),\n        onClick: vue.withModifiers(handleClose, [\"stop\"])\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.createVNode(vue.unref(iconsVue.Close))];\n        }),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : vue.createCommentVNode(\"v-if\", true)], 6)) : (vue.openBlock(), vue.createBlock(vue.Transition, {\n        key: 1,\n        name: \"\".concat(vue.unref(ns).namespace.value, \"-zoom-in-center\"),\n        appear: \"\",\n        onVnodeMounted: handleVNodeMounted\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.createElementVNode(\"span\", {\n            \"class\": vue.normalizeClass(vue.unref(containerKls)),\n            style: vue.normalizeStyle({\n              backgroundColor: _ctx.color\n            }),\n            onClick: handleClick\n          }, [vue.createElementVNode(\"span\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"content\"))\n          }, [vue.renderSlot(_ctx.$slots, \"default\")], 2), _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n            key: 0,\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"close\")),\n            onClick: vue.withModifiers(handleClose, [\"stop\"])\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createVNode(vue.unref(iconsVue.Close))];\n            }),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : vue.createCommentVNode(\"v-if\", true)], 6)];\n        }),\n        _: 3\n      }, 8, [\"name\"]));\n    };\n  }\n}));\nvar Tag = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"tag.vue\"]]);\nexports[\"default\"] = Tag;","map":{"version":3,"names":["name","tagSize","useFormCommonProps","useFormSize","ns","index","useNamespace","containerKls","vue","computed","type","props","hit","effect","closable","round","b","is","m","value","handleClose","event","emit","handleClick","handleVNodeMounted","vnode","_a","_b","_c","component","subTree","bum"],"sources":["../../../../../../packages/components/tag/src/tag.vue"],"sourcesContent":["<template>\n  <span\n    v-if=\"disableTransitions\"\n    :class=\"containerKls\"\n    :style=\"{ backgroundColor: color }\"\n    @click=\"handleClick\"\n  >\n    <span :class=\"ns.e('content')\">\n      <slot />\n    </span>\n    <el-icon v-if=\"closable\" :class=\"ns.e('close')\" @click.stop=\"handleClose\">\n      <Close />\n    </el-icon>\n  </span>\n  <transition\n    v-else\n    :name=\"`${ns.namespace.value}-zoom-in-center`\"\n    appear\n    @vue:mounted=\"handleVNodeMounted\"\n  >\n    <span\n      :class=\"containerKls\"\n      :style=\"{ backgroundColor: color }\"\n      @click=\"handleClick\"\n    >\n      <span :class=\"ns.e('content')\">\n        <slot />\n      </span>\n      <el-icon v-if=\"closable\" :class=\"ns.e('close')\" @click.stop=\"handleClose\">\n        <Close />\n      </el-icon>\n    </span>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport ElIcon from '@element-plus/components/icon'\nimport { Close } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\n\nimport { tagEmits, tagProps } from './tag'\nimport type { VNode } from 'vue'\n\ndefineOptions({\n  name: 'ElTag',\n})\nconst props = defineProps(tagProps)\nconst emit = defineEmits(tagEmits)\n\nconst tagSize = useFormSize()\nconst ns = useNamespace('tag')\nconst containerKls = computed(() => {\n  const { type, hit, effect, closable, round } = props\n  return [\n    ns.b(),\n    ns.is('closable', closable),\n    ns.m(type || 'primary'),\n    ns.m(tagSize.value),\n    ns.m(effect),\n    ns.is('hit', hit),\n    ns.is('round', round),\n  ]\n})\n\n// methods\nconst handleClose = (event: MouseEvent) => {\n  emit('close', event)\n}\n\nconst handleClick = (event: MouseEvent) => {\n  emit('click', event)\n}\n\nconst handleVNodeMounted = (vnode: VNode) => {\n  // @ts-ignore\n  if (vnode?.component?.subTree?.component?.bum) {\n    // @ts-ignore\n    vnode.component.subTree.component.bum = null\n  }\n}\n</script>\n"],"mappings":";;;;;;;;;;;;;;qCA6Cc;EACZA,IAAM;AACR;;;;;;;IAIA,IAAMC,OAAA,GAAUC,kBAAA,CAAAC,WAAY;IACtB,IAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,KAAK;IACvB,IAAAC,YAAA,GAAeC,GAAA,CAAAC,QAAA,CAAS,YAAM;MAClC,IAAQC,IAAM,GAAiCC,KAAA,CAAvCD,IAAM;QAAAE,GAAA,GAAiCD,KAAA,CAAjCC,GAAA;QAAKC,MAAQ,GAAoBF,KAAA,CAA5BE,MAAQ;QAAAC,QAAA,GAAoBH,KAAA,CAApBG,QAAA;QAAUC,KAAA,GAAUJ,KAAA,CAAVI,KAAA;MAC9B,QACLX,EAAA,CAAGY,CAAE,IACLZ,EAAA,CAAGa,EAAG,aAAYH,QAAQ,GAC1BV,EAAA,CAAGc,CAAE,CAAAR,IAAA,IAAQ,SAAS,GACtBN,EAAA,CAAGc,CAAE,CAAAjB,OAAA,CAAQkB,KAAK,GAClBf,EAAA,CAAGc,CAAA,CAAEL,MAAM,GACXT,EAAA,CAAGa,EAAG,QAAOL,GAAG,GAChBR,EAAA,CAAGa,EAAG,UAASF,KAAK,EACtB;IAAA,CACD;IAGK,IAAAK,WAAA,GAAc,SAAdA,YAAeC,KAAsB;MACzCC,IAAA,CAAK,SAASD,KAAK;IAAA,CACrB;IAEM,IAAAE,WAAA,GAAc,SAAdA,YAAeF,KAAsB;MACzCC,IAAA,CAAK,SAASD,KAAK;IAAA,CACrB;IAEM,IAAAG,kBAAA,GAAqB,SAArBA,mBAAsBC,KAAiB;MAE3C,IAAIC,EAAO,EAAAC,EAAA,EAAAC,EAAA;MAEH,KAAAA,EAAA,IAAAD,EAAA,IAAAD,EAAkB,GAAAD,KAAA,WAAgB,SAAAA,KAAA,CAAAI,SAAA,qBAAAH,EAAA,CAAAI,OAAA,qBAAAH,EAAA,CAAAE,SAAA,qBAAAD,EAAA,CAAAG,GAAA;QAC1CN,KAAA,CAAAI,SAAA,CAAAC,OAAA,CAAAD,SAAA,CAAAE,GAAA;MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}