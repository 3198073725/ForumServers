{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport { getPostList } from '@/api/post';\nimport { getBoardList } from '@/api/board';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\n\n// 是否启用调试日志\nvar DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nvar log = function log() {\n  if (DEBUG) {\n    var _console;\n    (_console = console).log.apply(_console, arguments);\n  }\n};\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostList',\n  data: function data() {\n    return {\n      loading: false,\n      posts: [],\n      total: 0,\n      boardOptions: [],\n      listQuery: {\n        page: 1,\n        limit: 10,\n        board: null,\n        ordering: '-created_at',\n        search: ''\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isLoggedIn'])), {}, {\n    isLogin: function isLogin() {\n      return this.isLoggedIn;\n    }\n  }),\n  created: function created() {\n    log('PostList组件created，登录状态:', this.isLogin, '认证状态:', this.isAuthenticated);\n    this.fetchBoardOptions();\n    this.fetchPosts();\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取板块选项\n    fetchBoardOptions: function fetchBoardOptions() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getBoardList();\n            case 3:\n              response = _context.sent;\n              if (response.code === 0) {\n                _this.boardOptions = response.data;\n              }\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              log('获取板块列表失败:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    // 获取帖子列表\n    fetchPosts: function fetchPosts() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var params, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.loading = true;\n              _context2.prev = 1;\n              params = {\n                page: _this2.listQuery.page,\n                page_size: _this2.listQuery.limit,\n                ordering: _this2.listQuery.ordering\n              };\n              if (_this2.listQuery.board) {\n                params.board = _this2.listQuery.board;\n              }\n              if (_this2.listQuery.search) {\n                params.search = _this2.listQuery.search;\n              }\n              log('组件开始获取帖子列表，参数:', params);\n              _context2.next = 8;\n              return getPostList(params);\n            case 8:\n              response = _context2.sent;\n              log('组件收到帖子列表响应:', response);\n\n              // 处理响应\n              _this2.processPostsResponse(response);\n              _context2.next = 18;\n              break;\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              log('获取帖子列表失败:', _context2.t0);\n              // 设置空列表\n              _this2.posts = [];\n              _this2.total = 0;\n            case 18:\n              _context2.prev = 18;\n              _this2.loading = false;\n              return _context2.finish(18);\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 13, 18, 21]]);\n      }))();\n    },\n    // 处理帖子列表响应\n    processPostsResponse: function processPostsResponse(response) {\n      // 关闭调试日志\n      var DEBUG_THIS = false;\n\n      // 如果响应为空，设置空帖子列表\n      if (!response) {\n        if (DEBUG_THIS) console.log('帖子列表响应为空，设置空帖子列表');\n        this.posts = [];\n        this.total = 0;\n        return;\n      }\n      if (DEBUG_THIS) console.log('处理帖子列表响应:', response);\n\n      // 提取帖子数据和总数\n      var posts = [];\n      var total = 0;\n      try {\n        if (response.data && response.data.results) {\n          // 标准格式：{data: {results: [...], count: 10}}\n          if (DEBUG_THIS) console.log('标准格式响应');\n          posts = response.data.results || [];\n          total = response.data.count || 0;\n        } else if (response.results) {\n          // 直接结果格式：{results: [...], count: 10}\n          if (DEBUG_THIS) console.log('直接结果格式响应');\n          posts = response.results || [];\n          total = response.count || 0;\n        } else if (Array.isArray(response)) {\n          // 数组格式：[...]\n          if (DEBUG_THIS) console.log('数组格式响应');\n          posts = response;\n          total = response.length;\n        } else if (response.data && Array.isArray(response.data)) {\n          // 数组包装格式：{data: [...]}\n          if (DEBUG_THIS) console.log('数组包装格式响应');\n          posts = response.data;\n          total = response.data.length;\n        } else {\n          // 其他情况，尝试从响应中提取有用信息\n          if (DEBUG_THIS) console.log('无法识别的响应格式，尝试提取数据');\n          if (response.data && _typeof(response.data) === 'object') {\n            // 尝试将data作为单个帖子对象\n            if (DEBUG_THIS) console.log('尝试将data作为单个帖子对象');\n            posts = [response.data];\n            total = 1;\n          } else if (_typeof(response) === 'object' && !Array.isArray(response)) {\n            // 尝试将整个响应作为单个帖子对象\n            if (DEBUG_THIS) console.log('尝试将整个响应作为单个帖子对象');\n            posts = [response];\n            total = 1;\n          } else {\n            // 无法提取，使用空数组\n            if (DEBUG_THIS) console.log('无法从响应中提取帖子数据，使用空数组');\n            this.posts = [];\n            this.total = 0;\n            return;\n          }\n        }\n\n        // 确保posts是数组\n        if (!Array.isArray(posts)) {\n          if (DEBUG_THIS) console.log('帖子数据不是数组，使用空数组');\n          this.posts = [];\n          this.total = 0;\n          return;\n        }\n\n        // 确保帖子数据有效\n        posts = posts.filter(function (post) {\n          return post && _typeof(post) === 'object';\n        });\n        if (DEBUG_THIS) console.log('过滤后的帖子数据:', posts);\n\n        // 确保每个帖子对象包含必要的字段\n        posts = posts.map(function (post) {\n          // 确保user字段存在\n          var user = post.user || {\n            id: 0,\n            username: 'unknown',\n            nickname: '未知用户',\n            avatar_url: ''\n          };\n\n          // 确保board_name字段存在\n          var board_name = post.board_name;\n          if (!board_name && post.board) {\n            if (_typeof(post.board) === 'object') {\n              board_name = post.board.name;\n            } else {\n              board_name = '板块' + post.board;\n            }\n          }\n\n          // 返回处理后的帖子对象\n          return _objectSpread(_objectSpread({}, post), {}, {\n            user: user,\n            board_name: board_name || '未知板块',\n            title: post.title || '无标题',\n            content: post.content || '',\n            created_at: post.created_at || new Date().toISOString(),\n            views: post.views || 0,\n            likes_count: post.likes_count || 0,\n            comments_count: post.comments_count || 0,\n            is_pinned: post.is_pinned || false,\n            is_featured: post.is_featured || false\n          });\n        });\n        if (DEBUG_THIS) console.log('最终处理后的帖子数据:', posts);\n        this.posts = posts;\n        this.total = total;\n      } catch (error) {\n        console.error('处理帖子列表响应时发生错误:', error);\n        // 出现错误时，确保显示空列表而不是崩溃\n        this.posts = [];\n        this.total = 0;\n      }\n    },\n    // 筛选\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.fetchPosts();\n    },\n    // 页码变化\n    handlePageChange: function handlePageChange(page) {\n      this.listQuery.page = page;\n      this.fetchPosts();\n    },\n    // 查看帖子\n    viewPost: function viewPost(post) {\n      this.$router.push({\n        name: 'PostDetail',\n        params: {\n          id: post.id\n        }\n      });\n    },\n    // 跳转到用户主页\n    goToUserProfile: function goToUserProfile(userId) {\n      if (userId) {\n        this.$router.push({\n          name: 'UserProfile',\n          params: {\n            id: userId\n          }\n        });\n        // 阻止冒泡，避免触发查看帖子\n        event.stopPropagation();\n      } else {\n        this.$message.warning('无法获取用户信息');\n      }\n    },\n    // 创建帖子\n    handleCreatePost: function handleCreatePost() {\n      log('点击发布新帖按钮, 登录状态:', this.isLogin, '认证状态:', this.isAuthenticated);\n      if (!this.isLogin) {\n        log('未登录，跳转到登录页面');\n        this.$message.warning('请先登录才能发布帖子');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: '/post/create'\n          }\n        });\n        return;\n      }\n      log('已登录，跳转到发帖页面');\n      // 清除可能的成功消息提示\n      this.$message.closeAll();\n      this.$router.push({\n        name: 'PostCreate'\n      });\n    }\n  }\n};","map":{"version":3,"names":["getPostList","getBoardList","formatDateTime","mapGetters","DEBUG","log","_console","console","apply","arguments","formatDate","date","name","data","loading","posts","total","boardOptions","listQuery","page","limit","board","ordering","search","computed","_objectSpread","isLogin","isLoggedIn","created","isAuthenticated","fetchBoardOptions","fetchPosts","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","sent","code","t0","stop","_this2","_callee2","params","_callee2$","_context2","page_size","processPostsResponse","finish","DEBUG_THIS","results","count","Array","isArray","length","_typeof","filter","post","map","user","id","username","nickname","avatar_url","board_name","title","content","created_at","Date","toISOString","views","likes_count","comments_count","is_pinned","is_featured","error","handleFilter","handlePageChange","viewPost","$router","push","goToUserProfile","userId","event","stopPropagation","$message","warning","handleCreatePost","query","redirect","closeAll"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostList.vue"],"sourcesContent":["<template>\n  <div class=\"post-list-container\">\n    <!-- 顶部过滤器 -->\n    <el-card class=\"filter-card\">\n      <div class=\"filter-container\">\n        <div class=\"filter-item\">\n          <el-select v-model=\"listQuery.board\" placeholder=\"选择板块\" clearable @change=\"handleFilter\" style=\"width: 120px;\">\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.id\"\n              :label=\"board.name\"\n              :value=\"board.id\"\n            >\n            </el-option>\n          </el-select>\n        </div>\n\n        <div class=\"filter-item\">\n          <el-select v-model=\"listQuery.ordering\" placeholder=\"排序方式\" @change=\"handleFilter\" style=\"width: 120px;\">\n            <el-option label=\"最新发布\" value=\"-created_at\"></el-option>\n            <el-option label=\"最多浏览\" value=\"-views\"></el-option>\n            <el-option label=\"最多点赞\" value=\"-likes_count\"></el-option>\n            <el-option label=\"最多评论\" value=\"-comments_count\"></el-option>\n          </el-select>\n        </div>\n\n        <div class=\"filter-item\">\n          <el-input\n            v-model=\"listQuery.search\"\n            placeholder=\"搜索帖子\"\n            style=\"width: 200px;\"\n            clearable\n            @keyup.enter=\"handleFilter\"\n            @clear=\"handleFilter\"\n          >\n            <template #append>\n              <el-button icon=\"el-icon-search\" @click=\"handleFilter\"></el-button>\n            </template>\n          </el-input>\n        </div>\n\n        <div class=\"filter-item\">\n          <el-button type=\"primary\" @click=\"handleCreatePost\">发布新帖</el-button>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 帖子列表 -->\n    <el-card class=\"post-list-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div v-if=\"posts.length === 0\" class=\"empty-posts\">\n          <i class=\"el-icon-document\"></i>\n          <p>暂无帖子，快来发布第一篇帖子吧！</p>\n        </div>\n        <div v-else class=\"post-list\">\n          <div\n            v-for=\"post in posts\"\n            :key=\"post.id\"\n            class=\"post-item\"\n            @click=\"viewPost(post)\"\n          >\n            <div class=\"post-title\">\n              <el-tag v-if=\"post.is_pinned\" size=\"small\" type=\"danger\">置顶</el-tag>\n              <el-tag v-if=\"post.is_featured\" size=\"small\" type=\"success\">精华</el-tag>\n              <span>{{ post.title }}</span>\n            </div>\n            <div class=\"post-meta\">\n              <div class=\"post-board\">\n                <i class=\"el-icon-s-grid\"></i>\n                <span>{{ post.board_name }}</span>\n              </div>\n              <div class=\"post-author\" @click.stop=\"goToUserProfile(post.user?.id)\" style=\"cursor: pointer;\">\n                <i class=\"el-icon-user\"></i>\n                <span>{{ post.user.nickname || post.user.username }}</span>\n              </div>\n              <div class=\"post-stats\">\n                <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n                <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n                <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n              </div>\n              <div class=\"post-time\">{{ formatDate(post.created_at) }}</div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 分页 -->\n        <div class=\"pagination-container\">\n          <el-pagination\n            background\n            layout=\"prev, pager, next\"\n            :total=\"total\"\n            :page-size=\"listQuery.limit\"\n            :current-page=\"listQuery.page\"\n            @current-change=\"handlePageChange\"\n          >\n          </el-pagination>\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { getPostList } from '@/api/post'\nimport { getBoardList } from '@/api/board'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\n\n// 是否启用调试日志\nconst DEBUG = false;\n\n// 自定义日志函数，可以通过DEBUG开关控制\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostList',\n  data() {\n    return {\n      loading: false,\n      posts: [],\n      total: 0,\n      boardOptions: [],\n      listQuery: {\n        page: 1,\n        limit: 10,\n        board: null,\n        ordering: '-created_at',\n        search: ''\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isLoggedIn'\n    ]),\n    isLogin() {\n      return this.isLoggedIn\n    }\n  },\n  created() {\n    log('PostList组件created，登录状态:', this.isLogin, '认证状态:', this.isAuthenticated)\n    this.fetchBoardOptions()\n    this.fetchPosts()\n  },\n  methods: {\n    formatDate,\n\n    // 获取板块选项\n    async fetchBoardOptions() {\n      try {\n        const response = await getBoardList()\n        if (response.code === 0) {\n          this.boardOptions = response.data\n        }\n      } catch (error) {\n        log('获取板块列表失败:', error)\n      }\n    },\n\n    // 获取帖子列表\n    async fetchPosts() {\n      this.loading = true\n      try {\n        const params = {\n          page: this.listQuery.page,\n          page_size: this.listQuery.limit,\n          ordering: this.listQuery.ordering\n        }\n\n        if (this.listQuery.board) {\n          params.board = this.listQuery.board\n        }\n\n        if (this.listQuery.search) {\n          params.search = this.listQuery.search\n        }\n\n        log('组件开始获取帖子列表，参数:', params)\n        const response = await getPostList(params)\n        log('组件收到帖子列表响应:', response)\n        \n        // 处理响应\n        this.processPostsResponse(response)\n      } catch (error) {\n        log('获取帖子列表失败:', error)\n        // 设置空列表\n        this.posts = []\n        this.total = 0\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 处理帖子列表响应\n    processPostsResponse(response) {\n      // 关闭调试日志\n      const DEBUG_THIS = false;\n      \n      // 如果响应为空，设置空帖子列表\n      if (!response) {\n        if (DEBUG_THIS) console.log('帖子列表响应为空，设置空帖子列表');\n        this.posts = [];\n        this.total = 0;\n        return;\n      }\n      \n      if (DEBUG_THIS) console.log('处理帖子列表响应:', response);\n      \n      // 提取帖子数据和总数\n      let posts = [];\n      let total = 0;\n      \n      try {\n        if (response.data && response.data.results) {\n          // 标准格式：{data: {results: [...], count: 10}}\n          if (DEBUG_THIS) console.log('标准格式响应');\n          posts = response.data.results || [];\n          total = response.data.count || 0;\n        } else if (response.results) {\n          // 直接结果格式：{results: [...], count: 10}\n          if (DEBUG_THIS) console.log('直接结果格式响应');\n          posts = response.results || [];\n          total = response.count || 0;\n        } else if (Array.isArray(response)) {\n          // 数组格式：[...]\n          if (DEBUG_THIS) console.log('数组格式响应');\n          posts = response;\n          total = response.length;\n        } else if (response.data && Array.isArray(response.data)) {\n          // 数组包装格式：{data: [...]}\n          if (DEBUG_THIS) console.log('数组包装格式响应');\n          posts = response.data;\n          total = response.data.length;\n        } else {\n          // 其他情况，尝试从响应中提取有用信息\n          if (DEBUG_THIS) console.log('无法识别的响应格式，尝试提取数据');\n          \n          if (response.data && typeof response.data === 'object') {\n            // 尝试将data作为单个帖子对象\n            if (DEBUG_THIS) console.log('尝试将data作为单个帖子对象');\n            posts = [response.data];\n            total = 1;\n          } else if (typeof response === 'object' && !Array.isArray(response)) {\n            // 尝试将整个响应作为单个帖子对象\n            if (DEBUG_THIS) console.log('尝试将整个响应作为单个帖子对象');\n            posts = [response];\n            total = 1;\n          } else {\n            // 无法提取，使用空数组\n            if (DEBUG_THIS) console.log('无法从响应中提取帖子数据，使用空数组');\n            this.posts = [];\n            this.total = 0;\n            return;\n          }\n        }\n        \n        // 确保posts是数组\n        if (!Array.isArray(posts)) {\n          if (DEBUG_THIS) console.log('帖子数据不是数组，使用空数组');\n          this.posts = [];\n          this.total = 0;\n          return;\n        }\n        \n        // 确保帖子数据有效\n        posts = posts.filter(post => post && typeof post === 'object');\n        \n        if (DEBUG_THIS) console.log('过滤后的帖子数据:', posts);\n        \n        // 确保每个帖子对象包含必要的字段\n        posts = posts.map(post => {\n          // 确保user字段存在\n          const user = post.user || {\n            id: 0,\n            username: 'unknown',\n            nickname: '未知用户',\n            avatar_url: ''\n          };\n          \n          // 确保board_name字段存在\n          let board_name = post.board_name;\n          if (!board_name && post.board) {\n            if (typeof post.board === 'object') {\n              board_name = post.board.name;\n            } else {\n              board_name = '板块' + post.board;\n            }\n          }\n          \n          // 返回处理后的帖子对象\n          return {\n            ...post,\n            user,\n            board_name: board_name || '未知板块',\n            title: post.title || '无标题',\n            content: post.content || '',\n            created_at: post.created_at || new Date().toISOString(),\n            views: post.views || 0,\n            likes_count: post.likes_count || 0,\n            comments_count: post.comments_count || 0,\n            is_pinned: post.is_pinned || false,\n            is_featured: post.is_featured || false\n          };\n        });\n        \n        if (DEBUG_THIS) console.log('最终处理后的帖子数据:', posts);\n        \n        this.posts = posts;\n        this.total = total;\n      } catch (error) {\n        console.error('处理帖子列表响应时发生错误:', error);\n        // 出现错误时，确保显示空列表而不是崩溃\n        this.posts = [];\n        this.total = 0;\n      }\n    },\n\n    // 筛选\n    handleFilter() {\n      this.listQuery.page = 1\n      this.fetchPosts()\n    },\n\n    // 页码变化\n    handlePageChange(page) {\n      this.listQuery.page = page\n      this.fetchPosts()\n    },\n\n    // 查看帖子\n    viewPost(post) {\n      this.$router.push({ name: 'PostDetail', params: { id: post.id } })\n    },\n\n    // 跳转到用户主页\n    goToUserProfile(userId) {\n      if (userId) {\n        this.$router.push({ name: 'UserProfile', params: { id: userId } });\n        // 阻止冒泡，避免触发查看帖子\n        event.stopPropagation();\n      } else {\n        this.$message.warning('无法获取用户信息');\n      }\n    },\n\n    // 创建帖子\n    handleCreatePost() {\n      log('点击发布新帖按钮, 登录状态:', this.isLogin, '认证状态:', this.isAuthenticated)\n\n      if (!this.isLogin) {\n        log('未登录，跳转到登录页面')\n        this.$message.warning('请先登录才能发布帖子')\n        this.$router.push({ name: 'Login', query: { redirect: '/post/create' } })\n        return\n      }\n\n      log('已登录，跳转到发帖页面')\n      // 清除可能的成功消息提示\n      this.$message.closeAll()\n      this.$router.push({ name: 'PostCreate' })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-list-container {\n  padding: 20px;\n}\n\n.filter-card,\n.post-list-card {\n  margin-bottom: 20px;\n}\n\n.filter-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n.filter-item {\n  margin-right: 15px;\n  margin-bottom: 10px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.empty-posts {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-posts i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.post-list {\n  margin-bottom: 20px;\n}\n\n.post-item {\n  padding: 15px;\n  border-bottom: 1px solid #EBEEF5;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.post-item:hover {\n  background-color: #F5F7FA;\n}\n\n.post-item:last-child {\n  border-bottom: none;\n}\n\n.post-title {\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 8px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 13px;\n  color: #909399;\n}\n\n.post-board,\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.post-board i,\n.post-author i {\n  margin-right: 5px;\n}\n\n.post-stats {\n  display: flex;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}