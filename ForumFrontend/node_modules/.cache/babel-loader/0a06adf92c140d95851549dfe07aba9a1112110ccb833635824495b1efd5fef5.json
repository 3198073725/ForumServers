{"ast":null,"code":"import _slicedToArray from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _objectWithoutProperties from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"code\", \"status\", \"msg\"];\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost, getLikeStatus, getFavoriteStatus } from '@/api/post';\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor: RichTextEditor\n  },\n  data: function data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      forceRefresh: false,\n      // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false,\n      // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [{\n          required: true,\n          message: '请输入帖子标题',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 100,\n          message: '标题长度在2到100个字符之间',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入帖子内容',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          message: '内容至少5个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAuthenticated', 'isAdmin', 'userId'])), {}, {\n    isLogin: function isLogin() {\n      return this.$store.getters.isLoggedIn;\n    },\n    isPostAuthor: function isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId;\n    },\n    canManagePost: function canManagePost() {\n      return this.isLogin && (this.isAdmin || this.isPostAuthor);\n    }\n  }),\n  created: function created() {\n    console.log('PostDetail组件created，登录状态:', this.isLogin, '认证状态:', this.$store.getters.isLoggedIn);\n    var postId = this.$route.params.id;\n    if (postId) {\n      console.log('准备获取帖子详情和评论，ID:', postId);\n      this.fetchPostDetail(postId);\n      this.fetchComments(postId);\n    } else {\n      console.log('没有帖子ID，跳转到帖子列表');\n      this.$router.push({\n        name: 'PostList'\n      });\n    }\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取帖子详情\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, code, status, msg, postData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              console.log('组件开始获取帖子详情, ID:', id);\n              _context.next = 5;\n              return getPostDetail(id);\n            case 5:\n              response = _context.sent;\n              console.log('组件收到帖子详情响应:', response);\n\n              // 检查响应是否有效\n              if (response) {\n                _context.next = 12;\n                break;\n              }\n              console.error('帖子详情响应为空');\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n              _this.post = {};\n              return _context.abrupt(\"return\");\n            case 12:\n              // 检查响应中的数据\n              if (response.data) {\n                console.log('使用响应中的data字段:', response.data);\n                _this.post = response.data;\n              } else if (response.code === 0 || response.status === 0) {\n                console.log('响应成功但没有data字段，尝试使用响应本身');\n                // 移除code、status、msg等字段，只保留实际数据\n                code = response.code, status = response.status, msg = response.msg, postData = _objectWithoutProperties(response, _excluded);\n                if (Object.keys(postData).length > 0) {\n                  _this.post = postData;\n                } else {\n                  console.warn('响应中没有有效的帖子数据');\n                  _this.$message.error('获取帖子详情失败，请稍后再试');\n                  _this.post = {};\n                }\n              } else if (_typeof(response) === 'object') {\n                console.log('直接使用响应对象');\n                _this.post = response;\n              } else {\n                console.warn('无法从响应中提取帖子数据');\n                _this.$message.error('获取帖子详情失败，请稍后再试');\n                _this.post = {};\n              }\n\n              // 确保post对象包含必要的字段\n              _this.ensurePostFields();\n\n              // 检查是否已点赞和收藏\n              _this.checkLikeAndFavorite();\n              _context.next = 23;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取帖子详情失败:', _context.t0);\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n              _this.post = {};\n              // 确保post对象包含必要的字段\n              _this.ensurePostFields();\n            case 23:\n              _context.prev = 23;\n              _this.loading = false;\n              return _context.finish(23);\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 17, 23, 26]]);\n      }))();\n    },\n    // 确保帖子对象包含所有必要的字段\n    ensurePostFields: function ensurePostFields() {\n      // 确保post是一个对象\n      if (!this.post || _typeof(this.post) !== 'object') {\n        this.post = {};\n      }\n\n      // 确保必要的字段存在\n      this.post.title = this.post.title || '帖子标题';\n      this.post.content = this.post.content || '帖子内容';\n      this.post.created_at = this.post.created_at || new Date().toISOString();\n      this.post.views = this.post.views || 0;\n      this.post.likes_count = this.post.likes_count || 0;\n      this.post.comments_count = this.post.comments_count || 0;\n      this.post.is_pinned = this.post.is_pinned || false;\n      this.post.is_featured = this.post.is_featured || false;\n\n      // 确保board字段存在\n      if (!this.post.board || _typeof(this.post.board) !== 'object') {\n        this.post.board = {\n          id: 1,\n          name: '默认板块'\n        };\n      } else if (typeof this.post.board === 'number') {\n        // 如果board只是一个ID，转换为对象\n        this.post.board = {\n          id: this.post.board,\n          name: '板块' + this.post.board\n        };\n      }\n\n      // 确保board.name字段存在\n      if (!this.post.board.name) {\n        this.post.board.name = '板块' + this.post.board.id;\n      }\n\n      // 确保user字段存在\n      if (!this.post.user || _typeof(this.post.user) !== 'object') {\n        this.post.user = {\n          id: 1,\n          username: 'user',\n          nickname: '用户',\n          avatar_url: ''\n        };\n      }\n\n      // 确保user.nickname字段存在\n      if (!this.post.user.nickname) {\n        this.post.user.nickname = this.post.user.username || '用户';\n      }\n    },\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite: function checkLikeAndFavorite() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _likeResponse$data, _favoriteResponse$dat, _yield$Promise$all, _yield$Promise$all2, likeResponse, favoriteResponse;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this2.isLogin) {\n                _context2.next = 5;\n                break;\n              }\n              console.log('未登录用户，设置为未点赞和未收藏状态');\n              _this2.isLiked = false;\n              _this2.isFavorited = false;\n              return _context2.abrupt(\"return\");\n            case 5:\n              _context2.prev = 5;\n              _context2.next = 8;\n              return Promise.all([getLikeStatus(_this2.post.id), getFavoriteStatus(_this2.post.id)]);\n            case 8:\n              _yield$Promise$all = _context2.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              likeResponse = _yield$Promise$all2[0];\n              favoriteResponse = _yield$Promise$all2[1];\n              // 更新点赞状态\n              _this2.isLiked = ((_likeResponse$data = likeResponse.data) === null || _likeResponse$data === void 0 ? void 0 : _likeResponse$data.is_liked) || false;\n              // 更新收藏状态\n              _this2.isFavorited = ((_favoriteResponse$dat = favoriteResponse.data) === null || _favoriteResponse$dat === void 0 ? void 0 : _favoriteResponse$dat.is_favorited) || false;\n              console.log('获取状态成功:', {\n                isLiked: _this2.isLiked,\n                isFavorited: _this2.isFavorited\n              });\n              _context2.next = 22;\n              break;\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](5);\n              console.error('获取点赞/收藏状态失败:', _context2.t0);\n              // 状态获取失败时，默认为未点赞和未收藏\n              _this2.isLiked = false;\n              _this2.isFavorited = false;\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[5, 17]]);\n      }))();\n    },\n    // 获取评论列表\n    fetchComments: function fetchComments(postId) {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(_this3.commentsLoading && !_this3.forceRefresh)) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\", Promise.resolve());\n            case 2:\n              _this3.commentsLoading = true;\n              console.log('开始获取评论列表，ID:', postId, '强制刷新:', _this3.forceRefresh);\n              _context3.prev = 4;\n              _context3.next = 7;\n              return getPostComments(postId, _this3.forceRefresh);\n            case 7:\n              response = _context3.sent;\n              console.log('评论列表响应:', response);\n\n              // 处理响应\n              _this3.processCommentsResponse(response);\n              _context3.next = 18;\n              break;\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('获取评论列表失败:', _context3.t0);\n              // 设置空评论列表\n              _this3.comments = [];\n              _this3.commentsTotal = 0;\n\n              // 未登录用户不显示错误提示\n              if (!(_context3.t0.response && _context3.t0.response.status === 401)) {\n                _this3.$message.error('获取评论列表失败，请刷新页面重试');\n              }\n            case 18:\n              _context3.prev = 18;\n              _this3.commentsLoading = false;\n              _this3.forceRefresh = false; // 重置强制刷新标志\n              console.log('评论列表获取完成，重置强制刷新标志');\n              return _context3.finish(18);\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 12, 18, 23]]);\n      }))();\n    },\n    // 处理评论列表响应\n    processCommentsResponse: function processCommentsResponse(response) {\n      // 如果响应为空，设置空评论列表\n      if (!response) {\n        console.log('评论列表响应为空，设置空评论列表');\n        this.comments = [];\n        this.commentsTotal = 0;\n        return;\n      }\n\n      // 提取评论数据和总数\n      var comments = [];\n      var total = 0;\n      if (response.data && response.data.results) {\n        // 标准格式：{data: {results: [...], count: 10}}\n        comments = response.data.results;\n        total = response.data.count || 0;\n      } else if (response.results) {\n        // 直接结果格式：{results: [...], count: 10}\n        comments = response.results;\n        total = response.count || 0;\n      } else if (Array.isArray(response)) {\n        // 数组格式：[...]\n        comments = response;\n        total = response.length;\n      } else if (response.data && Array.isArray(response.data)) {\n        // 数组包装格式：{data: [...]}\n        comments = response.data;\n        total = response.data.length;\n      } else {\n        // 其他情况，设置空评论列表\n        console.log('无法从响应中提取评论数据，设置空评论列表');\n        this.comments = [];\n        this.commentsTotal = 0;\n        return;\n      }\n\n      // 确保评论数据有效\n      comments = comments.filter(function (comment) {\n        return comment && _typeof(comment) === 'object';\n      });\n\n      // 处理评论数据\n      this.comments = comments.map(function (comment) {\n        // 确保replies字段存在\n        var replies = Array.isArray(comment.replies) ? comment.replies : [];\n\n        // 确保user字段存在\n        var user = comment.user || {\n          id: 0,\n          username: 'unknown',\n          nickname: '未知用户',\n          avatar_url: ''\n        };\n\n        // 返回处理后的评论对象\n        return _objectSpread(_objectSpread({}, comment), {}, {\n          replies: replies,\n          user: user\n        });\n      });\n      this.commentsTotal = total;\n\n      // 更新帖子评论数\n      if (this.post) {\n        this.post.comments_count = total;\n      }\n    },\n    // 评论分页变化\n    handleCommentsPageChange: function handleCommentsPageChange(page) {\n      this.commentsQuery.page = page;\n      this.fetchComments(this.post.id);\n    },\n    // 前往板块页面\n    goToBoard: function goToBoard() {\n      if (this.post.board) {\n        this.$router.push({\n          name: 'BoardDetail',\n          params: {\n            id: this.post.board.id\n          }\n        });\n      }\n    },\n    // 收藏帖子\n    handleFavorite: function handleFavorite() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this4.isLogin) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请先登录');\n              _this4.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this4.$route.fullPath\n                }\n              });\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return favoritePost(_this4.post.id);\n            case 7:\n              response = _context4.sent;\n              if (!(response.code === 0)) {\n                _context4.next = 13;\n                break;\n              }\n              _this4.isFavorited = !_this4.isFavorited;\n              // 使用 Notification 替代 Message\n              _this4.$notify({\n                title: _this4.isFavorited ? '收藏成功' : '已取消收藏',\n                message: _this4.isFavorited ? '帖子已添加到您的收藏列表' : '帖子已从您的收藏列表中移除',\n                type: _this4.isFavorited ? 'success' : 'info',\n                position: 'top-right',\n                duration: 2000,\n                showClose: false,\n                customClass: _this4.isFavorited ? 'favorite-notification success' : 'favorite-notification info'\n              });\n              _context4.next = 16;\n              break;\n            case 13:\n              _this4.$notify.error({\n                title: '操作失败',\n                message: response.msg || '请稍后重试',\n                position: 'top-right',\n                duration: 3000\n              });\n              // 操作失败时恢复原状态\n              _context4.next = 16;\n              return _this4.checkLikeAndFavorite();\n            case 16:\n              _context4.next = 24;\n              break;\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('收藏操作失败:', _context4.t0);\n              _this4.$notify.error({\n                title: '操作失败',\n                message: _context4.t0.message || '请稍后重试',\n                position: 'top-right',\n                duration: 3000\n              });\n              // 操作失败时恢复原状态\n              _context4.next = 24;\n              return _this4.checkLikeAndFavorite();\n            case 24:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 18]]);\n      }))();\n    },\n    // 点赞帖子\n    handleLike: function handleLike() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (_this5.isLogin) {\n                _context5.next = 4;\n                break;\n              }\n              _this5.$message.warning('请先登录');\n              _this5.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this5.$route.fullPath\n                }\n              });\n              return _context5.abrupt(\"return\");\n            case 4:\n              _context5.prev = 4;\n              _context5.next = 7;\n              return likePost(_this5.post.id);\n            case 7:\n              response = _context5.sent;\n              // 更新点赞状态\n              _this5.isLiked = !_this5.isLiked;\n              // 更新点赞数\n              _this5.post.likes_count = _this5.isLiked ? _this5.post.likes_count + 1 : _this5.post.likes_count - 1;\n              // 使用 Notification 替代 Message\n              _this5.$notify({\n                title: _this5.isLiked ? '点赞成功' : '已取消点赞',\n                message: _this5.isLiked ? '感谢您的支持！' : '您已取消点赞',\n                type: _this5.isLiked ? 'success' : 'info',\n                position: 'top-right',\n                duration: 2000,\n                showClose: false,\n                customClass: _this5.isLiked ? 'like-notification success' : 'like-notification info'\n              });\n              _context5.next = 20;\n              break;\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](4);\n              console.error('点赞操作失败:', _context5.t0);\n              _this5.$notify.error({\n                title: '操作失败',\n                message: _context5.t0.message || '请稍后重试',\n                position: 'top-right',\n                duration: 3000\n              });\n              // 如果是未登录错误，跳转到登录页\n              if (_context5.t0.response && _context5.t0.response.status === 401) {\n                _this5.$router.push({\n                  name: 'Login',\n                  query: {\n                    redirect: _this5.$route.fullPath\n                  }\n                });\n              }\n              // 操作失败时恢复原状态\n              _context5.next = 20;\n              return _this5.checkLikeAndFavorite();\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[4, 13]]);\n      }))();\n    },\n    // 帖子管理操作\n    handleCommand: function handleCommand(command) {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.t0 = command;\n              _context6.next = _context6.t0 === 'pin' ? 3 : _context6.t0 === 'feature' ? 5 : 7;\n              break;\n            case 3:\n              _this6.handlePinPost();\n              return _context6.abrupt(\"break\", 7);\n            case 5:\n              _this6.handleFeaturePost();\n              return _context6.abrupt(\"break\", 7);\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    },\n    // 编辑帖子\n    handleEditPost: function handleEditPost() {\n      var _this7 = this;\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n\n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n\n      // 进入编辑状态\n      this.isEditing = true;\n\n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(function () {\n        console.log('编辑表单数据设置完成:', _this7.editPostForm);\n      });\n    },\n    // 取消编辑\n    cancelEdit: function cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false;\n      // 重置表单数据\n      this.editPostForm.title = this.post.title;\n      this.editPostForm.content = this.post.content;\n    },\n    // 提交编辑\n    submitEdit: function submitEdit() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var postData, response;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (_this8.editPostForm.title.trim()) {\n                _context7.next = 3;\n                break;\n              }\n              _this8.$message.warning('标题不能为空');\n              return _context7.abrupt(\"return\");\n            case 3:\n              if (_this8.editPostForm.content.trim()) {\n                _context7.next = 6;\n                break;\n              }\n              _this8.$message.warning('内容不能为空');\n              return _context7.abrupt(\"return\");\n            case 6:\n              _this8.editPostSubmitting = true;\n              _context7.prev = 7;\n              // 确保发送正确的数据格式\n              postData = {\n                title: _this8.editPostForm.title.trim(),\n                content: _this8.editPostForm.content.trim(),\n                board: _this8.post.board.id // 需要包含板块ID\n              };\n              console.log('提交更新帖子数据:', postData);\n              _context7.next = 12;\n              return updatePost(_this8.post.id, postData);\n            case 12:\n              response = _context7.sent;\n              if (response && response.code === 0) {\n                // 更新成功\n                // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n                // 更新当前页面的帖子数据\n                _this8.post.title = _this8.editPostForm.title;\n                _this8.post.content = _this8.editPostForm.content;\n                // 更新帖子的更新时间\n                if (response.data && response.data.updated_at) {\n                  _this8.post.updated_at = response.data.updated_at;\n                }\n\n                // 强制退出编辑状态\n                console.log('强制退出编辑状态');\n                // 使用直接赋值和延时双重保险确保状态更新\n                _this8.isEditing = false;\n\n                // 如果直接赋值不起作用，使用延时函数再次尝试\n                setTimeout(function () {\n                  if (_this8.isEditing) {\n                    console.log('使用setTimeout再次尝试退出编辑状态');\n                    _this8.isEditing = false;\n                  }\n                  console.log('编辑状态最终设置为:', _this8.isEditing);\n                }, 100);\n              } else {\n                _this8.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '更新失败，请稍后重试');\n                // 失败时也退出编辑状态\n                _this8.isEditing = false;\n                setTimeout(function () {\n                  if (_this8.isEditing) {\n                    _this8.isEditing = false;\n                  }\n                }, 100);\n              }\n              _context7.next = 22;\n              break;\n            case 16:\n              _context7.prev = 16;\n              _context7.t0 = _context7[\"catch\"](7);\n              console.error('更新帖子失败:', _context7.t0);\n              _this8.$message.error('更新帖子失败，请检查网络连接');\n\n              // 出错时也退出编辑状态\n              _this8.isEditing = false;\n              setTimeout(function () {\n                if (_this8.isEditing) {\n                  _this8.isEditing = false;\n                }\n              }, 100);\n            case 22:\n              _context7.prev = 22;\n              _this8.editPostSubmitting = false;\n              return _context7.finish(22);\n            case 25:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[7, 16, 22, 25]]);\n      }))();\n    },\n    // 删除帖子\n    handleDeletePost: function handleDeletePost() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var loading, response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return _this9.$confirm('确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。', '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 3:\n              // 显示加载状态\n              loading = _this9.$loading({\n                lock: true,\n                text: '正在删除帖子...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context8.prev = 4;\n              _context8.next = 7;\n              return deletePost(_this9.post.id);\n            case 7:\n              response = _context8.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，直接返回上一级路由\n                console.log('帖子删除成功，正在返回上一级路由...');\n                // 返回上一级路由\n                _this9.$router.go(-1);\n              } else {\n                _this9.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context8.next = 17;\n              break;\n            case 12:\n              _context8.prev = 12;\n              _context8.t0 = _context8[\"catch\"](4);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除帖子请求失败:', _context8.t0);\n              _this9.$message.error('删除帖子失败，请检查网络连接');\n            case 17:\n              _context8.next = 22;\n              break;\n            case 19:\n              _context8.prev = 19;\n              _context8.t1 = _context8[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context8.t1 !== 'cancel') {\n                console.error('删除帖子操作异常:', _context8.t1);\n                _this9.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 22:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 19], [4, 12]]);\n      }))();\n    },\n    // 置顶/取消置顶帖子\n    handlePinPost: function handlePinPost() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return pinPost(_this0.post.id);\n            case 3:\n              response = _context9.sent;\n              if (response.code === 0) {\n                _this0.post.is_pinned = !_this0.post.is_pinned;\n                // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this0.$message.error(response.msg || '操作失败');\n              }\n              _context9.next = 11;\n              break;\n            case 7:\n              _context9.prev = 7;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error('置顶操作失败:', _context9.t0);\n              _this0.$message.error('置顶操作失败');\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[0, 7]]);\n      }))();\n    },\n    // 加精/取消加精帖子\n    handleFeaturePost: function handleFeaturePost() {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              _context0.prev = 0;\n              _context0.next = 3;\n              return featurePost(_this1.post.id);\n            case 3:\n              response = _context0.sent;\n              if (response.code === 0) {\n                _this1.post.is_featured = !_this1.post.is_featured;\n                // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n              } else {\n                _this1.$message.error(response.msg || '操作失败');\n              }\n              _context0.next = 11;\n              break;\n            case 7:\n              _context0.prev = 7;\n              _context0.t0 = _context0[\"catch\"](0);\n              console.error('加精操作失败:', _context0.t0);\n              _this1.$message.error('加精操作失败');\n            case 11:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, null, [[0, 7]]);\n      }))();\n    },\n    // 提交评论\n    submitComment: function submitComment() {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        var token, response, userInfo, newComment, existingComment;\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              console.log('评论提交 - 登录状态检查:', {\n                isLogin: _this10.isLogin,\n                storeIsLoggedIn: _this10.$store.getters.isLoggedIn,\n                token: _this10.$store.state.token,\n                userInfo: _this10.$store.state.user,\n                localStorageToken: localStorage.getItem('token'),\n                localStorageUserInfo: localStorage.getItem('userInfo')\n              });\n\n              // 如果localStorage有token但store中认证状态为false，尝试强制刷新认证状态\n              if (!(!_this10.isLogin && localStorage.getItem('token'))) {\n                _context1.next = 6;\n                break;\n              }\n              console.log('检测到localStorage有token但store认证状态为false，尝试强制刷新认证状态');\n              _context1.next = 5;\n              return _this10.$store.dispatch('getUserInfo');\n            case 5:\n              // 重新检查登录状态\n              console.log('刷新后的登录状态:', {\n                isLogin: _this10.$store.getters.isLoggedIn,\n                token: _this10.$store.state.token,\n                userInfo: _this10.$store.state.user\n              });\n            case 6:\n              if (_this10.isLogin) {\n                _context1.next = 11;\n                break;\n              }\n              console.error('未登录状态，无法提交评论');\n              _this10.$message.warning('请先登录');\n              _this10.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this10.$route.fullPath\n                }\n              });\n              return _context1.abrupt(\"return\");\n            case 11:\n              if (_this10.commentContent.trim()) {\n                _context1.next = 14;\n                break;\n              }\n              _this10.$message.warning('评论内容不能为空');\n              return _context1.abrupt(\"return\");\n            case 14:\n              _context1.prev = 14;\n              console.log('提交评论数据:', {\n                post: _this10.post.id,\n                content: _this10.commentContent,\n                token: _this10.$store.state.token\n              });\n\n              // 确保API请求中包含有效的token\n              token = _this10.$store.state.token || localStorage.getItem('token');\n              if (token) {\n                _context1.next = 22;\n                break;\n              }\n              console.error('提交评论时没有有效的token');\n              _this10.$message.error('登录状态异常，请重新登录');\n              _this10.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this10.$route.fullPath\n                }\n              });\n              return _context1.abrupt(\"return\");\n            case 22:\n              _context1.next = 24;\n              return createComment({\n                post: _this10.post.id,\n                content: _this10.commentContent\n              });\n            case 24:\n              response = _context1.sent;\n              console.log('评论提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context1.next = 36;\n                break;\n              }\n              // 不显示成功消息\n              console.log('评论发表成功，不显示成功消息');\n\n              // 清空评论内容\n              _this10.commentContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this10.forceRefresh = true;\n              _context1.next = 33;\n              return _this10.fetchComments(_this10.post.id);\n            case 33:\n              // 只有在确认获取到评论数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新评论数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this10.$store.getters.userInfo; // 构建评论对象\n                newComment = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  replies: [],\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新评论添加到评论列表的开头（如果不在列表中）\n                existingComment = _this10.comments.find(function (c) {\n                  return c.id === newComment.id;\n                });\n                if (!existingComment) {\n                  _this10.comments.unshift(newComment);\n                  console.log('新评论已添加到列表');\n                }\n              }\n              _context1.next = 38;\n              break;\n            case 36:\n              console.error('评论发表失败，响应:', response);\n              _this10.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '评论发表失败');\n            case 38:\n              _context1.next = 46;\n              break;\n            case 40:\n              _context1.prev = 40;\n              _context1.t0 = _context1[\"catch\"](14);\n              console.error('评论发表失败:', _context1.t0);\n              _this10.$message.error('评论发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this10.forceRefresh = true;\n              _this10.fetchComments(_this10.post.id);\n            case 46:\n            case \"end\":\n              return _context1.stop();\n          }\n        }, _callee1, null, [[14, 40]]);\n      }))();\n    },\n    // 回复评论\n    handleReply: function handleReply(comment) {\n      var reply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!this.isLogin) {\n        this.$message.warning('请先登录');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: this.$route.fullPath\n          }\n        });\n        return;\n      }\n      this.replyingTo = comment.id;\n      this.replyContent = reply ? \"@\".concat(reply.user.nickname || reply.user.username, \" \") : '';\n    },\n    // 取消回复\n    cancelReply: function cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    // 提交回复\n    submitReply: function submitReply(comment) {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var response, userInfo, newReply, existingReply;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (_this11.isLogin) {\n                _context10.next = 4;\n                break;\n              }\n              _this11.$message.warning('请先登录');\n              _this11.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this11.$route.fullPath\n                }\n              });\n              return _context10.abrupt(\"return\");\n            case 4:\n              if (_this11.replyContent.trim()) {\n                _context10.next = 7;\n                break;\n              }\n              _this11.$message.warning('回复内容不能为空');\n              return _context10.abrupt(\"return\");\n            case 7:\n              _context10.prev = 7;\n              console.log('提交回复数据:', {\n                post: _this11.post.id,\n                parent: comment.id,\n                content: _this11.replyContent\n              });\n              _context10.next = 11;\n              return replyComment(_this11.post.id, comment.id, _this11.replyContent);\n            case 11:\n              response = _context10.sent;\n              console.log('回复提交响应:', response);\n              if (!(response && (response.code === 0 || response.status === 0))) {\n                _context10.next = 23;\n                break;\n              }\n              // 清空回复状态\n              _this11.replyingTo = null;\n              _this11.replyContent = '';\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this11.forceRefresh = true;\n              _context10.next = 20;\n              return _this11.fetchComments(_this11.post.id);\n            case 20:\n              // 只有在确认获取到回复数据时，才尝试本地添加\n              if (response.data && response.data.id) {\n                console.log('获取到新回复数据，ID:', response.data.id);\n\n                // 获取当前用户信息\n                userInfo = _this11.$store.getters.userInfo; // 构建回复对象\n                newReply = _objectSpread(_objectSpread({}, response.data), {}, {\n                  id: response.data.id,\n                  user: userInfo,\n                  created_at: response.data.created_at || new Date().toISOString()\n                }); // 将新回复添加到对应评论的回复列表（如果不在列表中）\n                if (!comment.replies) {\n                  comment.replies = [];\n                }\n                existingReply = comment.replies.find(function (r) {\n                  return r.id === newReply.id;\n                });\n                if (!existingReply) {\n                  comment.replies.push(newReply);\n                  console.log('新回复已添加到列表');\n                }\n              }\n              _context10.next = 25;\n              break;\n            case 23:\n              console.error('回复发表失败，响应:', response);\n              _this11.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '回复发表失败');\n            case 25:\n              _context10.next = 33;\n              break;\n            case 27:\n              _context10.prev = 27;\n              _context10.t0 = _context10[\"catch\"](7);\n              console.error('回复发表失败:', _context10.t0);\n              _this11.$message.error('回复发表失败，请检查网络连接');\n\n              // 发生错误时也刷新评论列表\n              _this11.forceRefresh = true;\n              _this11.fetchComments(_this11.post.id);\n            case 33:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[7, 27]]);\n      }))();\n    },\n    // 判断是否可以管理评论\n    canManageComment: function canManageComment(comment) {\n      return this.isLogin && (this.isAdmin || comment.user && comment.user.id === this.userId);\n    },\n    // 删除评论\n    handleDeleteComment: function handleDeleteComment(comment) {\n      var _this12 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _error$response$data;\n        var commentId, hasReplies, confirmMessage, loading, response;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              // 打印评论对象，用于调试\n              console.log('要删除的评论对象:', comment);\n\n              // 确保评论对象和ID存在\n              if (comment) {\n                _context11.next = 5;\n                break;\n              }\n              _this12.$message.error('评论数据无效，无法删除');\n              return _context11.abrupt(\"return\");\n            case 5:\n              // 获取评论ID，支持字符串和数字类型\n              commentId = comment.id ? parseInt(comment.id) : null;\n              if (commentId) {\n                _context11.next = 9;\n                break;\n              }\n              _this12.$message.error('评论ID无效，无法删除');\n              return _context11.abrupt(\"return\");\n            case 9:\n              // 判断是否有回复，提供更详细的确认信息\n              hasReplies = comment.replies && comment.replies.length > 0;\n              confirmMessage = hasReplies ? \"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u8FD9\\u6761\\u8BC4\\u8BBA\\u5417\\uFF1F\\u5220\\u9664\\u540E\\u5C06\\u540C\\u65F6\\u5220\\u9664\\u8BE5\\u8BC4\\u8BBA\\u4E0B\\u7684 \".concat(comment.replies.length, \" \\u6761\\u56DE\\u590D\\uFF0C\\u4E14\\u65E0\\u6CD5\\u6062\\u590D\\u3002\") : '确定要删除这条评论吗？删除后将无法恢复。';\n              _context11.next = 13;\n              return _this12.$confirm(confirmMessage, '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 13:\n              // 显示加载状态\n              loading = _this12.$loading({\n                lock: true,\n                text: '正在删除评论...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context11.prev = 14;\n              console.log('发送删除评论请求，ID:', commentId);\n              _context11.next = 18;\n              return deleteComment(commentId);\n            case 18:\n              response = _context11.sent;\n              loading.close(); // 关闭加载状态\n\n              // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n              if (!(response.code === 0 || response.status === 0)) {\n                _context11.next = 28;\n                break;\n              }\n              console.log('评论删除成功，响应:', response);\n\n              // 无论如何，强制刷新评论列表以确保同步\n              console.log('强制刷新评论列表以确保与数据库同步');\n              _this12.forceRefresh = true;\n              _context11.next = 26;\n              return _this12.fetchComments(_this12.post.id);\n            case 26:\n              _context11.next = 33;\n              break;\n            case 28:\n              console.error('评论删除失败，响应:', response);\n              _this12.$message.error(response.msg || '删除失败，请稍后重试');\n\n              // 如果删除失败，也刷新评论列表恢复原状\n              _this12.forceRefresh = true;\n              _context11.next = 33;\n              return _this12.fetchComments(_this12.post.id);\n            case 33:\n              _context11.next = 54;\n              break;\n            case 35:\n              _context11.prev = 35;\n              _context11.t0 = _context11[\"catch\"](14);\n              loading.close();\n              console.error('删除评论失败:', _context11.t0);\n\n              // 如果删除失败，刷新评论列表恢复原状\n              _this12.forceRefresh = true;\n              _context11.next = 42;\n              return _this12.fetchComments(_this12.post.id);\n            case 42:\n              if (!_context11.t0.response) {\n                _context11.next = 53;\n                break;\n              }\n              _context11.t1 = _context11.t0.response.status;\n              _context11.next = _context11.t1 === 403 ? 46 : _context11.t1 === 404 ? 48 : 50;\n              break;\n            case 46:\n              _this12.$message.error('您没有权限删除此评论');\n              return _context11.abrupt(\"break\", 51);\n            case 48:\n              _this12.$message.error('评论不存在或已被删除');\n              return _context11.abrupt(\"break\", 51);\n            case 50:\n              _this12.$message.error(((_error$response$data = _context11.t0.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || '删除失败，请稍后重试');\n            case 51:\n              _context11.next = 54;\n              break;\n            case 53:\n              if (_context11.t0.request) {\n                _this12.$message.error('网络连接失败，请检查网络后重试');\n              } else {\n                _this12.$message.error('删除失败，请稍后重试');\n              }\n            case 54:\n              _context11.next = 62;\n              break;\n            case 56:\n              _context11.prev = 56;\n              _context11.t2 = _context11[\"catch\"](0);\n              if (!(_context11.t2 === 'cancel')) {\n                _context11.next = 60;\n                break;\n              }\n              return _context11.abrupt(\"return\");\n            case 60:\n              console.error('删除评论操作失败:', _context11.t2);\n              _this12.$message.error('操作失败，请稍后重试');\n            case 62:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[0, 56], [14, 35]]);\n      }))();\n    },\n    handleContentChange: function handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n};","map":{"version":3,"names":["getPostDetail","likePost","favoritePost","pinPost","featurePost","deletePost","updatePost","getLikeStatus","getFavoriteStatus","getPostComments","createComment","replyComment","deleteComment","formatDateTime","mapGetters","RichTextEditor","formatDate","date","name","components","data","loading","commentsLoading","post","isLiked","isFavorited","comments","commentsTotal","commentsQuery","page","limit","commentContent","replyingTo","replyContent","forceRefresh","isEditing","editPostSubmitting","editPostForm","title","content","postRules","required","message","trigger","min","max","computed","_objectSpread","isLogin","$store","getters","isLoggedIn","isPostAuthor","user","id","userId","canManagePost","isAdmin","created","console","log","postId","$route","params","fetchPostDetail","fetchComments","$router","push","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","code","status","msg","postData","wrap","_callee$","_context","prev","next","sent","error","$message","abrupt","_objectWithoutProperties","_excluded","Object","keys","length","warn","_typeof","ensurePostFields","checkLikeAndFavorite","t0","finish","stop","created_at","Date","toISOString","views","likes_count","comments_count","is_pinned","is_featured","board","username","nickname","avatar_url","_this2","_callee2","_likeResponse$data","_favoriteResponse$dat","_yield$Promise$all","_yield$Promise$all2","likeResponse","favoriteResponse","_callee2$","_context2","Promise","all","_slicedToArray","is_liked","is_favorited","_this3","_callee3","_callee3$","_context3","resolve","processCommentsResponse","total","results","count","Array","isArray","filter","comment","map","replies","handleCommentsPageChange","goToBoard","handleFavorite","_this4","_callee4","_callee4$","_context4","warning","query","redirect","fullPath","$notify","type","position","duration","showClose","customClass","handleLike","_this5","_callee5","_callee5$","_context5","handleCommand","command","_this6","_callee6","_callee6$","_context6","handlePinPost","handleFeaturePost","handleEditPost","_this7","$nextTick","cancelEdit","submitEdit","_this8","_callee7","_callee7$","_context7","trim","updated_at","setTimeout","handleDeletePost","_this9","_callee8","_callee8$","_context8","$confirm","confirmButtonText","cancelButtonText","distinguishCancelAndClose","closeOnClickModal","$loading","lock","text","spinner","background","close","go","t1","_this0","_callee9","_callee9$","_context9","_this1","_callee0","_callee0$","_context0","submitComment","_this10","_callee1","token","userInfo","newComment","existingComment","_callee1$","_context1","storeIsLoggedIn","state","localStorageToken","localStorage","getItem","localStorageUserInfo","dispatch","find","c","unshift","handleReply","reply","arguments","undefined","concat","cancelReply","submitReply","_this11","_callee10","newReply","existingReply","_callee10$","_context10","parent","r","canManageComment","handleDeleteComment","_this12","_callee11","_error$response$data","commentId","hasReplies","confirmMessage","_callee11$","_context11","parseInt","request","t2","handleContentChange","value"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <!-- 非编辑状态下的标题 -->\n          <h1 v-if=\"!isEditing\" class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <!-- 编辑状态下的标题输入框 -->\n          <div v-else class=\"post-title-edit\">\n            <el-input v-model=\"editPostForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n          </div>\n\n          <div class=\"post-meta\">\n            <div class=\"post-author\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <i class=\"el-icon-s-grid\"></i>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 非编辑状态下的内容 -->\n        <div v-if=\"!isEditing\" class=\"post-content\" v-html=\"post.content\"></div>\n\n        <!-- 编辑状态下的内容输入框 -->\n        <div v-else class=\"post-content-edit\">\n          <el-input\n            v-model=\"editPostForm.title\"\n            placeholder=\"请输入帖子标题\"\n          ></el-input>\n          <rich-text-editor\n            v-model=\"editPostForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n          <!-- 编辑状态下的操作按钮 -->\n          <div class=\"edit-actions\">\n            <el-button @click=\"cancelEdit\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitEdit\" :loading=\"editPostSubmitting\">提交</el-button>\n          </div>\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n            <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n            <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditPost\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeletePost\"\n              >\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-star-on\"\n                @click=\"handleLike\"\n              >\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-collection-tag\"\n                @click=\"handleFavorite\"\n              >\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\" icon=\"el-icon-setting\">\n                管理\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <i class=\"el-icon-chat-dot-round\"></i>\n        <p v-if=\"isLogin\">暂无评论，快来发表第一条评论吧！</p>\n        <p v-else>暂无评论，登录后可以发表评论</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\n          <div class=\"comment-header\">\n            <div class=\"comment-user\">\n              <el-avatar :size=\"40\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"comment-user-info\">\n                <div class=\"comment-username\">{{ comment.user.nickname || comment.user.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\" v-if=\"canManageComment(comment)\">\n              <el-button type=\"link\" size=\"small\" @click=\"handleDeleteComment(comment)\">删除</el-button>\n            </div>\n          </div>\n          <div class=\"comment-content\">{{ comment.content }}</div>\n          <div class=\"comment-footer\">\n            <el-button v-if=\"isLogin\" type=\"link\" size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button type=\"primary\" size=\"small\" @click=\"submitReply(comment)\" :disabled=\"!replyContent.trim()\">提交回复</el-button>\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div v-for=\"reply in comment.replies\" :key=\"reply.id\" class=\"reply-item\">\n              <div class=\"reply-header\">\n                <div class=\"reply-user\">\n                  <el-avatar :size=\"30\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"reply-user-info\">\n                    <div class=\"reply-username\">{{ reply.user.nickname || reply.user.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\" v-if=\"canManageComment(reply)\">\n                  <el-button type=\"link\" size=\"small\" @click=\"handleDeleteComment(reply)\">删除</el-button>\n                </div>\n              </div>\n              <div class=\"reply-content\">{{ reply.content }}</div>\n              <div class=\"reply-footer\">\n                <el-button v-if=\"isLogin\" type=\"link\" size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          :current-page=\"commentsQuery.page\"\n          @update:current-page=\"val => commentsQuery.page = val\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost, updatePost, getLikeStatus, getFavoriteStatus } from '@/api/post'\nimport { getPostComments, createComment, replyComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n\n      forceRefresh: false, // 用于强制刷新评论列表的内部标志\n\n      // 编辑帖子相关\n      isEditing: false, // 是否处于编辑状态\n      editPostSubmitting: false,\n      editPostForm: {\n        title: '',\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '标题长度在2到100个字符之间', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入帖子内容', trigger: 'blur' },\n          { min: 5, message: '内容至少5个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.$store.getters.isLoggedIn\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    console.log('PostDetail组件created，登录状态:', this.isLogin, '认证状态:', this.$store.getters.isLoggedIn)\n    const postId = this.$route.params.id\n    if (postId) {\n      console.log('准备获取帖子详情和评论，ID:', postId)\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      console.log('没有帖子ID，跳转到帖子列表')\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        console.log('组件开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        console.log('组件收到帖子详情响应:', response)\n\n        // 检查响应是否有效\n        if (!response) {\n          console.error('帖子详情响应为空')\n          this.$message.error('获取帖子详情失败，请稍后再试')\n          this.post = {}\n          return\n        }\n\n        // 检查响应中的数据\n        if (response.data) {\n          console.log('使用响应中的data字段:', response.data)\n          this.post = response.data\n        } else if (response.code === 0 || response.status === 0) {\n          console.log('响应成功但没有data字段，尝试使用响应本身')\n          // 移除code、status、msg等字段，只保留实际数据\n          const { code, status, msg, ...postData } = response\n          if (Object.keys(postData).length > 0) {\n            this.post = postData\n          } else {\n            console.warn('响应中没有有效的帖子数据')\n            this.$message.error('获取帖子详情失败，请稍后再试')\n            this.post = {}\n          }\n        } else if (typeof response === 'object') {\n          console.log('直接使用响应对象')\n          this.post = response\n        } else {\n          console.warn('无法从响应中提取帖子数据')\n          this.$message.error('获取帖子详情失败，请稍后再试')\n          this.post = {}\n        }\n        \n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n        \n        // 检查是否已点赞和收藏\n        this.checkLikeAndFavorite()\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败，请稍后再试')\n        this.post = {}\n        // 确保post对象包含必要的字段\n        this.ensurePostFields()\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 确保帖子对象包含所有必要的字段\n    ensurePostFields() {\n      // 确保post是一个对象\n      if (!this.post || typeof this.post !== 'object') {\n        this.post = {}\n      }\n      \n      // 确保必要的字段存在\n      this.post.title = this.post.title || '帖子标题'\n      this.post.content = this.post.content || '帖子内容'\n      this.post.created_at = this.post.created_at || new Date().toISOString()\n      this.post.views = this.post.views || 0\n      this.post.likes_count = this.post.likes_count || 0\n      this.post.comments_count = this.post.comments_count || 0\n      this.post.is_pinned = this.post.is_pinned || false\n      this.post.is_featured = this.post.is_featured || false\n      \n      // 确保board字段存在\n      if (!this.post.board || typeof this.post.board !== 'object') {\n        this.post.board = { id: 1, name: '默认板块' }\n      } else if (typeof this.post.board === 'number') {\n        // 如果board只是一个ID，转换为对象\n        this.post.board = { id: this.post.board, name: '板块' + this.post.board }\n      }\n      \n      // 确保board.name字段存在\n      if (!this.post.board.name) {\n        this.post.board.name = '板块' + this.post.board.id\n      }\n      \n      // 确保user字段存在\n      if (!this.post.user || typeof this.post.user !== 'object') {\n        this.post.user = {\n          id: 1,\n          username: 'user',\n          nickname: '用户',\n          avatar_url: ''\n        }\n      }\n      \n      // 确保user.nickname字段存在\n      if (!this.post.user.nickname) {\n        this.post.user.nickname = this.post.user.username || '用户'\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    async checkLikeAndFavorite() {\n      if (!this.isLogin) {\n        console.log('未登录用户，设置为未点赞和未收藏状态')\n        this.isLiked = false\n        this.isFavorited = false\n        return\n      }\n\n      try {\n        // 并行请求点赞和收藏状态\n        const [likeResponse, favoriteResponse] = await Promise.all([\n          getLikeStatus(this.post.id),\n          getFavoriteStatus(this.post.id)\n        ]);\n\n        // 更新点赞状态\n        this.isLiked = likeResponse.data?.is_liked || false;\n        // 更新收藏状态\n        this.isFavorited = favoriteResponse.data?.is_favorited || false;\n\n        console.log('获取状态成功:', {\n          isLiked: this.isLiked,\n          isFavorited: this.isFavorited\n        });\n      } catch (error) {\n        console.error('获取点赞/收藏状态失败:', error);\n        // 状态获取失败时，默认为未点赞和未收藏\n        this.isLiked = false;\n        this.isFavorited = false;\n      }\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n      console.log('开始获取评论列表，ID:', postId, '强制刷新:', this.forceRefresh)\n\n      try {\n        // 使用API函数的forceRefresh参数\n        const response = await getPostComments(postId, this.forceRefresh)\n        console.log('评论列表响应:', response)\n        \n        // 处理响应\n        this.processCommentsResponse(response)\n      } catch (error) {\n        console.error('获取评论列表失败:', error)\n        // 设置空评论列表\n        this.comments = []\n        this.commentsTotal = 0\n        \n        // 未登录用户不显示错误提示\n        if (!(error.response && error.response.status === 401)) {\n          this.$message.error('获取评论列表失败，请刷新页面重试')\n        }\n      } finally {\n        this.commentsLoading = false\n        this.forceRefresh = false // 重置强制刷新标志\n        console.log('评论列表获取完成，重置强制刷新标志')\n      }\n    },\n    \n    // 处理评论列表响应\n    processCommentsResponse(response) {\n      // 如果响应为空，设置空评论列表\n      if (!response) {\n        console.log('评论列表响应为空，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 提取评论数据和总数\n      let comments = []\n      let total = 0\n      \n      if (response.data && response.data.results) {\n        // 标准格式：{data: {results: [...], count: 10}}\n        comments = response.data.results\n        total = response.data.count || 0\n      } else if (response.results) {\n        // 直接结果格式：{results: [...], count: 10}\n        comments = response.results\n        total = response.count || 0\n      } else if (Array.isArray(response)) {\n        // 数组格式：[...]\n        comments = response\n        total = response.length\n      } else if (response.data && Array.isArray(response.data)) {\n        // 数组包装格式：{data: [...]}\n        comments = response.data\n        total = response.data.length\n      } else {\n        // 其他情况，设置空评论列表\n        console.log('无法从响应中提取评论数据，设置空评论列表')\n        this.comments = []\n        this.commentsTotal = 0\n        return\n      }\n      \n      // 确保评论数据有效\n      comments = comments.filter(comment => comment && typeof comment === 'object')\n      \n      // 处理评论数据\n      this.comments = comments.map(comment => {\n        // 确保replies字段存在\n        const replies = Array.isArray(comment.replies) ? comment.replies : []\n        \n        // 确保user字段存在\n        const user = comment.user || {\n          id: 0,\n          username: 'unknown',\n          nickname: '未知用户',\n          avatar_url: ''\n        }\n        \n        // 返回处理后的评论对象\n        return {\n          ...comment,\n          replies,\n          user\n        }\n      })\n      \n      this.commentsTotal = total\n      \n      // 更新帖子评论数\n      if (this.post) {\n        this.post.comments_count = total\n      }\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await favoritePost(this.post.id)\n        if (response.code === 0) {\n          this.isFavorited = !this.isFavorited\n          // 使用 Notification 替代 Message\n          this.$notify({\n            title: this.isFavorited ? '收藏成功' : '已取消收藏',\n            message: this.isFavorited ? '帖子已添加到您的收藏列表' : '帖子已从您的收藏列表中移除',\n            type: this.isFavorited ? 'success' : 'info',\n            position: 'top-right',\n            duration: 2000,\n            showClose: false,\n            customClass: this.isFavorited ? 'favorite-notification success' : 'favorite-notification info'\n          })\n        } else {\n          this.$notify.error({\n            title: '操作失败',\n            message: response.msg || '请稍后重试',\n            position: 'top-right',\n            duration: 3000\n          })\n          // 操作失败时恢复原状态\n          await this.checkLikeAndFavorite()\n        }\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        this.$notify.error({\n          title: '操作失败',\n          message: error.message || '请稍后重试',\n          position: 'top-right',\n          duration: 3000\n        })\n        // 操作失败时恢复原状态\n        await this.checkLikeAndFavorite()\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        // 更新点赞状态\n        this.isLiked = !this.isLiked\n        // 更新点赞数\n        this.post.likes_count = this.isLiked ? this.post.likes_count + 1 : this.post.likes_count - 1\n        // 使用 Notification 替代 Message\n        this.$notify({\n          title: this.isLiked ? '点赞成功' : '已取消点赞',\n          message: this.isLiked ? '感谢您的支持！' : '您已取消点赞',\n          type: this.isLiked ? 'success' : 'info',\n          position: 'top-right',\n          duration: 2000,\n          showClose: false,\n          customClass: this.isLiked ? 'like-notification success' : 'like-notification info'\n        })\n      } catch (error) {\n        console.error('点赞操作失败:', error)\n        this.$notify.error({\n          title: '操作失败',\n          message: error.message || '请稍后重试',\n          position: 'top-right',\n          duration: 3000\n        })\n        // 如果是未登录错误，跳转到登录页\n        if (error.response && error.response.status === 401) {\n          this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        }\n        // 操作失败时恢复原状态\n        await this.checkLikeAndFavorite()\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    },\n\n    // 编辑帖子\n    handleEditPost() {\n      console.log('开始编辑帖子，原始内容:', {\n        title: this.post.title,\n        content: this.post.content\n      });\n      \n      // 初始化编辑表单数据\n      this.editPostForm = {\n        title: this.post.title,\n        content: this.post.content\n      };\n      \n      // 进入编辑状态\n      this.isEditing = true;\n      \n      // 使用延时确保编辑器能够正确加载内容\n      this.$nextTick(() => {\n        console.log('编辑表单数据设置完成:', this.editPostForm);\n      });\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      // 退出编辑状态\n      this.isEditing = false\n      // 重置表单数据\n      this.editPostForm.title = this.post.title\n      this.editPostForm.content = this.post.content\n    },\n\n    // 提交编辑\n    async submitEdit() {\n      // 表单验证\n      if (!this.editPostForm.title.trim()) {\n        this.$message.warning('标题不能为空')\n        return\n      }\n\n      if (!this.editPostForm.content.trim()) {\n        this.$message.warning('内容不能为空')\n        return\n      }\n\n      this.editPostSubmitting = true\n      try {\n        // 确保发送正确的数据格式\n        const postData = {\n          title: this.editPostForm.title.trim(),\n          content: this.editPostForm.content.trim(),\n          board: this.post.board.id // 需要包含板块ID\n        }\n\n        console.log('提交更新帖子数据:', postData)\n\n        const response = await updatePost(this.post.id, postData)\n\n        if (response && response.code === 0) {\n          // 更新成功\n          // this.$message.success('帖子更新成功') // 注释掉这行，避免重复显示成功消息\n\n          // 更新当前页面的帖子数据\n          this.post.title = this.editPostForm.title\n          this.post.content = this.editPostForm.content\n          // 更新帖子的更新时间\n          if (response.data && response.data.updated_at) {\n            this.post.updated_at = response.data.updated_at\n          }\n\n          // 强制退出编辑状态\n          console.log('强制退出编辑状态')\n          // 使用直接赋值和延时双重保险确保状态更新\n          this.isEditing = false\n\n          // 如果直接赋值不起作用，使用延时函数再次尝试\n          setTimeout(() => {\n            if (this.isEditing) {\n              console.log('使用setTimeout再次尝试退出编辑状态')\n              this.isEditing = false\n            }\n            console.log('编辑状态最终设置为:', this.isEditing)\n          }, 100)\n        } else {\n          this.$message.error(response?.msg || '更新失败，请稍后重试')\n          // 失败时也退出编辑状态\n          this.isEditing = false\n          setTimeout(() => {\n            if (this.isEditing) {\n              this.isEditing = false\n            }\n          }, 100)\n        }\n      } catch (error) {\n        console.error('更新帖子失败:', error)\n        this.$message.error('更新帖子失败，请检查网络连接')\n\n        // 出错时也退出编辑状态\n        this.isEditing = false\n        setTimeout(() => {\n          if (this.isEditing) {\n            this.isEditing = false\n          }\n        }, 100)\n      } finally {\n        this.editPostSubmitting = false\n      }\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回上一级路由\n            console.log('帖子删除成功，正在返回上一级路由...')\n            // 返回上一级路由\n            this.$router.go(-1)\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          // this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          // this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功')) // 注释掉这行，避免重复显示成功消息\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      console.log('评论提交 - 登录状态检查:', {\n        isLogin: this.isLogin,\n        storeIsLoggedIn: this.$store.getters.isLoggedIn,\n        token: this.$store.state.token,\n        userInfo: this.$store.state.user,\n        localStorageToken: localStorage.getItem('token'),\n        localStorageUserInfo: localStorage.getItem('userInfo')\n      })\n\n      // 如果localStorage有token但store中认证状态为false，尝试强制刷新认证状态\n      if (!this.isLogin && localStorage.getItem('token')) {\n        console.log('检测到localStorage有token但store认证状态为false，尝试强制刷新认证状态');\n        await this.$store.dispatch('getUserInfo');\n        // 重新检查登录状态\n        console.log('刷新后的登录状态:', {\n          isLogin: this.$store.getters.isLoggedIn,\n          token: this.$store.state.token,\n          userInfo: this.$store.state.user\n        });\n      }\n      \n      if (!this.isLogin) {\n        console.error('未登录状态，无法提交评论')\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent,\n          token: this.$store.state.token\n        })\n\n        // 确保API请求中包含有效的token\n        const token = this.$store.state.token || localStorage.getItem('token');\n        if (!token) {\n          console.error('提交评论时没有有效的token');\n          this.$message.error('登录状态异常，请重新登录');\n          this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } });\n          return;\n        }\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        console.log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到评论数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新评论数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              replies: [],\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新评论添加到评论列表的开头（如果不在列表中）\n            const existingComment = this.comments.find(c => c.id === newComment.id)\n            if (!existingComment) {\n              this.comments.unshift(newComment);\n              console.log('新评论已添加到列表')\n            }\n          }\n        } else {\n          console.error('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        console.error('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        console.log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 无论如何，强制刷新评论列表以确保同步\n          console.log('强制刷新评论列表以确保与数据库同步')\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n\n          // 只有在确认获取到回复数据时，才尝试本地添加\n          if (response.data && response.data.id) {\n            console.log('获取到新回复数据，ID:', response.data.id)\n            \n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            \n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              id: response.data.id,\n              user: userInfo,\n              created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            // 将新回复添加到对应评论的回复列表（如果不在列表中）\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            \n            const existingReply = comment.replies.find(r => r.id === newReply.id)\n            if (!existingReply) {\n              comment.replies.push(newReply);\n              console.log('新回复已添加到列表')\n            }\n          }\n        } else {\n          console.error('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        console.error('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n        \n        // 发生错误时也刷新评论列表\n        this.forceRefresh = true\n        this.fetchComments(this.post.id)\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 打印评论对象，用于调试\n        console.log('要删除的评论对象:', comment)\n\n        // 确保评论对象和ID存在\n        if (!comment) {\n          this.$message.error('评论数据无效，无法删除')\n          return\n        }\n\n        // 获取评论ID，支持字符串和数字类型\n        const commentId = comment.id ? parseInt(comment.id) : null\n        if (!commentId) {\n          this.$message.error('评论ID无效，无法删除')\n          return\n        }\n\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          console.log('发送删除评论请求，ID:', commentId)\n          const response = await deleteComment(commentId)\n          loading.close() // 关闭加载状态\n\n          // 修改判断条件，同时支持code: 0和status: 0作为成功状态\n          if (response.code === 0 || response.status === 0) {\n            console.log('评论删除成功，响应:', response)\n            \n            // 无论如何，强制刷新评论列表以确保同步\n            console.log('强制刷新评论列表以确保与数据库同步')\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          } else {\n            console.error('评论删除失败，响应:', response)\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n            \n            // 如果删除失败，也刷新评论列表恢复原状\n            this.forceRefresh = true\n            await this.fetchComments(this.post.id)\n          }\n        } catch (error) {\n          loading.close()\n          console.error('删除评论失败:', error)\n          \n          // 如果删除失败，刷新评论列表恢复原状\n          this.forceRefresh = true\n          await this.fetchComments(this.post.id)\n          \n          // 根据错误类型显示不同的错误信息\n          if (error.response) {\n            switch (error.response.status) {\n              case 403:\n                this.$message.error('您没有权限删除此评论')\n                break\n              case 404:\n                this.$message.error('评论不存在或已被删除')\n                break\n              default:\n                this.$message.error(error.response.data?.msg || '删除失败，请稍后重试')\n            }\n          } else if (error.request) {\n            this.$message.error('网络连接失败，请检查网络后重试')\n          } else {\n            this.$message.error('删除失败，请稍后重试')\n          }\n        }\n      } catch (error) {\n        // 用户取消删除操作\n        if (error === 'cancel') {\n          return\n        }\n        console.error('删除评论操作失败:', error)\n        this.$message.error('操作失败，请稍后重试')\n      }\n    },\n\n    handleContentChange(value) {\n      this.post.content = value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  margin-top: 20px;\n  line-height: 1.6;\n  word-break: break-word;\n}\n\n.post-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  margin: 10px 0;\n}\n\n.post-content :deep(p) {\n  margin: 10px 0;\n}\n\n.post-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 10px 0;\n}\n\n.post-content :deep(th),\n.post-content :deep(td) {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\n.post-content :deep(th) {\n  background-color: #f5f5f5;\n}\n\n.post-content :deep(blockquote) {\n  margin: 10px 0;\n  padding: 10px 20px;\n  border-left: 4px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.post-content :deep(pre) {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n}\n\n.post-content :deep(code) {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  margin-top: 10px;\n  color: #909399;\n  font-size: 14px;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.login-tip a:hover {\n  text-decoration: underline;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-user {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n/* 编辑相关样式 */\n.post-title-edit {\n  margin-bottom: 15px;\n}\n\n.post-content-edit {\n  margin-bottom: 20px;\n}\n\n.edit-actions {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 15px;\n  gap: 10px;\n}\n</style>\n\n<style>\n/* 收藏消息提示样式 */\n.favorite-message {\n  min-width: 120px;\n  padding: 10px 20px;\n  border-radius: 4px;\n}\n\n.favorite-message.el-message--success {\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.favorite-message.el-message--warning {\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.favorite-message .el-message__icon {\n  font-size: 16px;\n  margin-right: 8px;\n}\n\n.favorite-message .el-message__content {\n  font-size: 14px;\n  color: #606266;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}