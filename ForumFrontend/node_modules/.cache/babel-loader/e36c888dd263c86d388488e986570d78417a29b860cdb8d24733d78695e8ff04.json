{"ast":null,"code":"'use strict';\n\nvar _objectWithoutProperties = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\")[\"default\"];\nvar _slicedToArray = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/slicedToArray.js\")[\"default\"];\nvar _excluded = [\"height\"];\nrequire(\"core-js/modules/es.array.for-each.js\");\nrequire(\"core-js/modules/es.array.map.js\");\nrequire(\"core-js/modules/es.function.name.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nrequire(\"core-js/modules/es.iterator.map.js\");\nrequire(\"core-js/modules/es.number.parse-int.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.entries.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.fixed.js\");\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar row = require('../row.js');\nvar tokens = require('../tokens.js');\nvar _private = require('../private.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../../utils/types.js');\nvar useTableRow = function useTableRow(props) {\n  var _vue$inject = vue.inject(tokens.TableV2InjectionKey),\n    isScrolling = _vue$inject.isScrolling;\n  var measured = vue.ref(false);\n  var rowRef = vue.ref();\n  var measurable = vue.computed(function () {\n    return types.isNumber(props.estimatedRowHeight) && props.rowIndex >= 0;\n  });\n  var doMeasure = function doMeasure() {\n    var isInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var $rowRef = vue.unref(rowRef);\n    if (!$rowRef) return;\n    var columns = props.columns,\n      onRowHeightChange = props.onRowHeightChange,\n      rowKey = props.rowKey,\n      rowIndex = props.rowIndex,\n      style = props.style;\n    var _$rowRef$getBoundingC = $rowRef.getBoundingClientRect(),\n      height = _$rowRef$getBoundingC.height;\n    measured.value = true;\n    vue.nextTick(function () {\n      if (isInit || height !== Number.parseInt(style.height)) {\n        var firstColumn = columns[0];\n        var isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === _private.placeholderSign;\n        onRowHeightChange == null ? void 0 : onRowHeightChange({\n          rowKey: rowKey,\n          height: height,\n          rowIndex: rowIndex\n        }, firstColumn && !isPlaceholder && firstColumn.fixed);\n      }\n    });\n  };\n  var eventHandlers = vue.computed(function () {\n    var rowData = props.rowData,\n      rowIndex = props.rowIndex,\n      rowKey = props.rowKey,\n      onRowHover = props.onRowHover;\n    var handlers = props.rowEventHandlers || {};\n    var eventHandlers2 = {};\n    Object.entries(handlers).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        eventName = _ref2[0],\n        handler = _ref2[1];\n      if (shared.isFunction(handler)) {\n        eventHandlers2[eventName] = function (event) {\n          handler({\n            event: event,\n            rowData: rowData,\n            rowIndex: rowIndex,\n            rowKey: rowKey\n          });\n        };\n      }\n    });\n    if (onRowHover) {\n      [{\n        name: \"onMouseleave\",\n        hovered: false\n      }, {\n        name: \"onMouseenter\",\n        hovered: true\n      }].forEach(function (_ref3) {\n        var name = _ref3.name,\n          hovered = _ref3.hovered;\n        var existedHandler = eventHandlers2[name];\n        eventHandlers2[name] = function (event) {\n          onRowHover({\n            event: event,\n            hovered: hovered,\n            rowData: rowData,\n            rowIndex: rowIndex,\n            rowKey: rowKey\n          });\n          existedHandler == null ? void 0 : existedHandler(event);\n        };\n      });\n    }\n    return eventHandlers2;\n  });\n  var onExpand = function onExpand(expanded) {\n    var onRowExpand = props.onRowExpand,\n      rowData = props.rowData,\n      rowIndex = props.rowIndex,\n      rowKey = props.rowKey;\n    onRowExpand == null ? void 0 : onRowExpand({\n      expanded: expanded,\n      rowData: rowData,\n      rowIndex: rowIndex,\n      rowKey: rowKey\n    });\n  };\n  vue.onMounted(function () {\n    if (vue.unref(measurable)) {\n      doMeasure(true);\n    }\n  });\n  return {\n    isScrolling: isScrolling,\n    measurable: measurable,\n    measured: measured,\n    rowRef: rowRef,\n    eventHandlers: eventHandlers,\n    onExpand: onExpand\n  };\n};\nvar COMPONENT_NAME = \"ElTableV2TableRow\";\nvar TableV2Row = vue.defineComponent({\n  name: COMPONENT_NAME,\n  props: row.tableV2RowProps,\n  setup: function setup(props, _ref4) {\n    var expose = _ref4.expose,\n      slots = _ref4.slots,\n      attrs = _ref4.attrs;\n    var _useTableRow = useTableRow(props),\n      eventHandlers = _useTableRow.eventHandlers,\n      isScrolling = _useTableRow.isScrolling,\n      measurable = _useTableRow.measurable,\n      measured = _useTableRow.measured,\n      rowRef = _useTableRow.rowRef,\n      onExpand = _useTableRow.onExpand;\n    expose({\n      onExpand: onExpand\n    });\n    return function () {\n      var columns = props.columns,\n        columnsStyles = props.columnsStyles,\n        expandColumnKey = props.expandColumnKey,\n        depth = props.depth,\n        rowData = props.rowData,\n        rowIndex = props.rowIndex,\n        style = props.style;\n      var ColumnCells = columns.map(function (column, columnIndex) {\n        var expandable = shared.isArray(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey;\n        return slots.cell({\n          column: column,\n          columns: columns,\n          columnIndex: columnIndex,\n          depth: depth,\n          style: columnsStyles[column.key],\n          rowData: rowData,\n          rowIndex: rowIndex,\n          isScrolling: vue.unref(isScrolling),\n          expandIconProps: expandable ? {\n            rowData: rowData,\n            rowIndex: rowIndex,\n            onExpand: onExpand\n          } : void 0\n        });\n      });\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map(function (node) {\n            if (shared.isArray(node) && node.length === 1) {\n              return node[0];\n            }\n            return node;\n          }),\n          style: style,\n          columns: columns,\n          depth: depth,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          isScrolling: vue.unref(isScrolling)\n        });\n      }\n      if (vue.unref(measurable)) {\n        var _ref5 = style || {},\n          height = _ref5.height,\n          exceptHeightStyle = _objectWithoutProperties(_ref5, _excluded);\n        var _measured = vue.unref(measured);\n        return vue.createVNode(\"div\", vue.mergeProps({\n          \"ref\": rowRef,\n          \"class\": props[\"class\"],\n          \"style\": _measured ? style : exceptHeightStyle,\n          \"role\": \"row\"\n        }, attrs, vue.unref(eventHandlers)), [ColumnCells]);\n      }\n      return vue.createVNode(\"div\", vue.mergeProps(attrs, {\n        \"ref\": rowRef,\n        \"class\": props[\"class\"],\n        \"style\": style,\n        \"role\": \"row\"\n      }, vue.unref(eventHandlers)), [ColumnCells]);\n    };\n  }\n});\nvar Row = TableV2Row;\nexports[\"default\"] = Row;","map":{"version":3,"names":["_vue$inject","vue","inject","tokens","TableV2InjectionKey","isScrolling","measured","ref","rowRef","measurable","computed","types","isNumber","props","estimatedRowHeight","rowIndex","doMeasure","isInit","arguments","length","undefined","$rowRef","columns","onRowHeightChange","rowKey","style","_$rowRef$getBoundingC","getBoundingClientRect","height","value","nextTick","Number","parseInt","firstColumn","isPlaceholder","placeholderSign","_private","fixed","eventHandlers","rowData","onRowHover","handlers","rowEventHandlers","eventHandlers2","Object","entries","forEach","_ref","_ref2","_slicedToArray","eventName","handler","shared","isFunction","event","name","hovered","_ref3","existedHandler","onExpand","expanded","onRowExpand","unref","COMPONENT_NAME","TableV2Row","defineComponent","row","tableV2RowProps","setup","_ref4","expose","slots","_useTableRow","useTableRow","columnsStyles","expandColumnKey","depth","ColumnCells","map","column","columnIndex","expandable","isArray","children","key","cell","expandIconProps","cells","node","_ref5","_measured","createVNode","mergeProps","exceptHeightStyle","attrs","Row"],"sources":["../../../../../../../packages/components/table-v2/src/components/row.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  unref,\n} from 'vue'\nimport { isArray, isFunction, isNumber } from '@element-plus/utils'\nimport { tableV2RowProps } from '../row'\nimport { TableV2InjectionKey } from '../tokens'\nimport { placeholderSign } from '../private'\n\nimport type { CSSProperties, RendererElement, RendererNode, VNode } from 'vue'\nimport type { RowEventHandlers, TableV2RowProps } from '../row'\n\ntype CustomizedCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[]\n\ntype DefaultCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[][]\n\ntype ColumnCellsType = DefaultCellsType | CustomizedCellsType\n\nconst useTableRow = (props: TableV2RowProps) => {\n  const { isScrolling } = inject(TableV2InjectionKey)!\n\n  const measured = ref(false)\n  const rowRef = ref<HTMLElement>()\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0\n  })\n\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef)\n    if (!$rowRef) return\n    const { columns, onRowHeightChange, rowKey, rowIndex, style } = props\n    const { height } = $rowRef.getBoundingClientRect()\n    measured.value = true\n\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style!.height as string)) {\n        const firstColumn = columns[0]\n        const isPlaceholder = firstColumn?.placeholderSign === placeholderSign\n        onRowHeightChange?.(\n          { rowKey, height, rowIndex },\n          firstColumn && !isPlaceholder && firstColumn.fixed\n        )\n      }\n    })\n  }\n\n  const eventHandlers = computed(() => {\n    const { rowData, rowIndex, rowKey, onRowHover } = props\n    const handlers = props.rowEventHandlers || ({} as RowEventHandlers)\n    const eventHandlers = {} as {\n      [key in keyof RowEventHandlers]: (e: Event) => void\n    }\n\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers[eventName as keyof RowEventHandlers] = (event: Event) => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n        }\n      }\n    })\n\n    if (onRowHover) {\n      ;(\n        [\n          { name: 'onMouseleave', hovered: false },\n          { name: 'onMouseenter', hovered: true },\n        ] as const\n      ).forEach(({ name, hovered }) => {\n        const existedHandler = eventHandlers[name]\n        eventHandlers[name] = ((event: MouseEvent) => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n\n          existedHandler?.(event)\n        }) as any\n      })\n    }\n    return eventHandlers\n  })\n\n  const onExpand = (expanded: boolean) => {\n    const { onRowExpand, rowData, rowIndex, rowKey } = props\n\n    onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n  }\n\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true)\n    }\n  })\n\n  return { isScrolling, measurable, measured, rowRef, eventHandlers, onExpand }\n}\n\nconst COMPONENT_NAME = 'ElTableV2TableRow'\n\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, { expose, slots, attrs }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n\n      onExpand,\n    } = useTableRow(props)\n\n    expose({\n      /**\n       * @description manually dispatching expand action on row.\n       */\n      onExpand,\n    })\n\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style,\n      } = props\n\n      let ColumnCells: ColumnCellsType = columns.map((column, columnIndex) => {\n        const expandable =\n          isArray(rowData.children) &&\n          rowData.children.length > 0 &&\n          column.key === expandColumnKey\n\n        return slots.cell!({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key!],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable\n            ? {\n                rowData,\n                rowIndex,\n                onExpand,\n              }\n            : undefined,\n        })\n      })\n\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n        })\n      }\n\n      if (unref(measurable)) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { height, ...exceptHeightStyle } = style || {}\n        const _measured = unref(measured)\n        return (\n          <div\n            ref={rowRef}\n            class={props.class}\n            style={_measured ? style : exceptHeightStyle}\n            role=\"row\"\n            {...attrs}\n            {...unref(eventHandlers)}\n          >\n            {ColumnCells}\n          </div>\n        )\n      }\n\n      return (\n        <div\n          {...attrs}\n          ref={rowRef}\n          class={props.class}\n          style={style}\n          role=\"row\"\n          {...unref(eventHandlers)}\n        >\n          {ColumnCells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Row\n\nexport type TableV2RowCellRenderParam = {\n  column: TableV2RowProps['columns'][number]\n  columns: TableV2RowProps['columns']\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?: {\n    rowData: any\n    rowIndex: number\n    onExpand: (expand: boolean) => void\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}