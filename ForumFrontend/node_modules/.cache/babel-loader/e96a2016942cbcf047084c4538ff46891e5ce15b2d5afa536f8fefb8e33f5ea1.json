{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.array.includes.js\");\nrequire(\"core-js/modules/es.array.map.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.iterator.map.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.object.keys.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.regexp.constructor.js\");\nrequire(\"core-js/modules/es.regexp.dot-all.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.regexp.sticky.js\");\nrequire(\"core-js/modules/es.regexp.test.js\");\nrequire(\"core-js/modules/es.regexp.to-string.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar index = require('../../tree/index.js');\nvar treeSelectOption = require('./tree-select-option.js');\nvar utils = require('./utils.js');\nvar strings = require('../../../utils/strings.js');\nvar event = require('../../../constants/event.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../utils/types.js');\nvar useTree = function useTree(props, _ref, _ref2) {\n  var attrs = _ref.attrs,\n    slots = _ref.slots,\n    emit = _ref.emit;\n  var select = _ref2.select,\n    tree = _ref2.tree,\n    key = _ref2.key;\n  vue.watch(function () {\n    return props.modelValue;\n  }, function () {\n    if (props.showCheckbox) {\n      vue.nextTick(function () {\n        var treeInstance = tree.value;\n        if (treeInstance && !lodashUnified.isEqual(treeInstance.getCheckedKeys(), utils.toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(utils.toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  var propsMap = vue.computed(function () {\n    return _objectSpread({\n      value: key.value,\n      label: \"label\",\n      children: \"children\",\n      disabled: \"disabled\",\n      isLeaf: \"isLeaf\"\n    }, props.props);\n  });\n  var _getNodeValByProp = function getNodeValByProp(prop, data) {\n    var _a;\n    var propVal = propsMap.value[prop];\n    if (shared.isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(_getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n  var defaultExpandedParentKeys = utils.toValidArray(props.modelValue).map(function (value) {\n    return utils.treeFind(props.data || [], function (data) {\n      return _getNodeValByProp(\"value\", data) === value;\n    }, function (data) {\n      return _getNodeValByProp(\"children\", data);\n    }, function (data, index, array, parent) {\n      return parent && _getNodeValByProp(\"value\", parent);\n    });\n  }).filter(function (item) {\n    return utils.isValidValue(item);\n  });\n  var cacheOptions = vue.computed(function () {\n    if (!props.renderAfterExpand && !props.lazy) return [];\n    var options = [];\n    utils.treeEach(props.data.concat(props.cacheData), function (node) {\n      var value = _getNodeValByProp(\"value\", node);\n      options.push({\n        value: value,\n        currentLabel: _getNodeValByProp(\"label\", node),\n        isDisabled: _getNodeValByProp(\"disabled\", node)\n      });\n    }, function (data) {\n      return _getNodeValByProp(\"children\", data);\n    });\n    return options;\n  });\n  var getChildCheckedKeys = function getChildCheckedKeys() {\n    var _a;\n    return (_a = tree.value) == null ? void 0 : _a.getCheckedKeys().filter(function (checkedKey) {\n      var _a2;\n      var node = (_a2 = tree.value) == null ? void 0 : _a2.getNode(checkedKey);\n      return !lodashUnified.isNil(node) && types.isEmpty(node.childNodes);\n    });\n  };\n  return _objectSpread(_objectSpread(_objectSpread({}, lodashUnified.pick(vue.toRefs(props), Object.keys(index.ElTree.props))), attrs), {}, {\n    nodeKey: key,\n    expandOnClickNode: vue.computed(function () {\n      return !props.checkStrictly && props.expandOnClickNode;\n    }),\n    defaultExpandedKeys: vue.computed(function () {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;\n    }),\n    renderContent: function renderContent(h, _ref3) {\n      var node = _ref3.node,\n        data = _ref3.data,\n        store = _ref3.store;\n      return h(treeSelectOption[\"default\"], {\n        value: _getNodeValByProp(\"value\", data),\n        label: _getNodeValByProp(\"label\", data),\n        disabled: _getNodeValByProp(\"disabled\", data),\n        visible: node.visible\n      }, props.renderContent ? function () {\n        return props.renderContent(h, {\n          node: node,\n          data: data,\n          store: store\n        });\n      } : slots[\"default\"] ? function () {\n        return slots[\"default\"]({\n          node: node,\n          data: data,\n          store: store\n        });\n      } : void 0);\n    },\n    filterNodeMethod: function filterNodeMethod(value, data, node) {\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      var regexp = new RegExp(strings.escapeStringRegexp(value), \"i\");\n      return regexp.test(_getNodeValByProp(\"label\", data) || \"\");\n    },\n    onNodeClick: function onNodeClick(data, node, e) {\n      var _a, _b, _c, _d;\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.showCheckbox && props.checkOnClickNode) return;\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!_getNodeValByProp(\"disabled\", data)) {\n          var option = (_b = select.value) == null ? void 0 : _b.states.options.get(_getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option);\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick();\n      }\n      (_d = select.value) == null ? void 0 : _d.focus();\n    },\n    onCheck: function onCheck(data, params) {\n      var _a;\n      if (!props.showCheckbox) return;\n      var dataValue = _getNodeValByProp(\"value\", data);\n      var dataMap = {};\n      utils.treeEach([tree.value.store.root], function (node) {\n        return dataMap[node.key] = node;\n      }, function (node) {\n        return node.childNodes;\n      });\n      var uncachedCheckedKeys = params.checkedKeys;\n      var cachedKeys = props.multiple ? utils.toValidArray(props.modelValue).filter(function (item) {\n        return !(item in dataMap) && !uncachedCheckedKeys.includes(item);\n      }) : [];\n      var checkedKeys = cachedKeys.concat(uncachedCheckedKeys);\n      if (props.checkStrictly) {\n        emit(event.UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : void 0);\n      } else {\n        if (props.multiple) {\n          var childKeys = getChildCheckedKeys();\n          emit(event.UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));\n        } else {\n          var firstLeaf = utils.treeFind([data], function (data2) {\n            return !utils.isValidArray(_getNodeValByProp(\"children\", data2)) && !_getNodeValByProp(\"disabled\", data2);\n          }, function (data2) {\n            return _getNodeValByProp(\"children\", data2);\n          });\n          var firstLeafKey = firstLeaf ? _getNodeValByProp(\"value\", firstLeaf) : void 0;\n          var hasCheckedChild = utils.isValidValue(props.modelValue) && !!utils.treeFind([data], function (data2) {\n            return _getNodeValByProp(\"value\", data2) === props.modelValue;\n          }, function (data2) {\n            return _getNodeValByProp(\"children\", data2);\n          });\n          emit(event.UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);\n        }\n      }\n      vue.nextTick(function () {\n        var _a2;\n        var checkedKeys2 = utils.toValidArray(props.modelValue);\n        tree.value.setCheckedKeys(checkedKeys2);\n        (_a2 = attrs.onCheck) == null ? void 0 : _a2.call(attrs, data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes()\n        });\n      });\n      (_a = select.value) == null ? void 0 : _a.focus();\n    },\n    onNodeExpand: function onNodeExpand(data, node, e) {\n      var _a;\n      (_a = attrs.onNodeExpand) == null ? void 0 : _a.call(attrs, data, node, e);\n      vue.nextTick(function () {\n        if (!props.checkStrictly && props.lazy && props.multiple && node.checked) {\n          var dataMap = {};\n          var uncachedCheckedKeys = tree.value.getCheckedKeys();\n          utils.treeEach([tree.value.store.root], function (node2) {\n            return dataMap[node2.key] = node2;\n          }, function (node2) {\n            return node2.childNodes;\n          });\n          var cachedKeys = utils.toValidArray(props.modelValue).filter(function (item) {\n            return !(item in dataMap) && !uncachedCheckedKeys.includes(item);\n          });\n          var childKeys = getChildCheckedKeys();\n          emit(event.UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));\n        }\n      });\n    },\n    cacheOptions: cacheOptions\n  });\n};\nexports.useTree = useTree;","map":{"version":3,"names":["useTree","props","_ref","_ref2","attrs","slots","emit","select","tree","key","vue","watch","modelValue","showCheckbox","nextTick","treeInstance","value","lodashUnified","isEqual","getCheckedKeys","utils","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","_objectSpread","label","children","disabled","isLeaf","getNodeValByProp","prop","data","_a","propVal","shared","isFunction","getNode","defaultExpandedParentKeys","map","treeFind","index","array","parent","filter","item","isValidValue","cacheOptions","renderAfterExpand","lazy","options","treeEach","concat","cacheData","node","push","currentLabel","isDisabled","getChildCheckedKeys","checkedKey","_a2","isNil","types","isEmpty","childNodes","pick","toRefs","Object","keys","ElTree","nodeKey","expandOnClickNode","checkStrictly","defaultExpandedKeys","renderContent","h","_ref3","store","treeSelectOption","visible","filterNodeMethod","regexp","RegExp","strings","escapeStringRegexp","test","onNodeClick","e","_b","_c","_d","call","checkOnClickNode","option","states","get","handleOptionSelect","proxy","handleExpandIconClick","focus","onCheck","params","dataValue","dataMap","root","uncachedCheckedKeys","checkedKeys","cachedKeys","multiple","includes","event","UPDATE_MODEL_EVENT","childKeys","firstLeaf","data2","isValidArray","firstLeafKey","hasCheckedChild","checkedKeys2","checkedNodes","getCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","onNodeExpand","checked","node2"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, isNil, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { escapeStringRegexp, isEmpty, isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport {\n  isValidArray,\n  isValidValue,\n  toValidArray,\n  treeEach,\n  treeFind,\n} from './utils'\nimport type { CacheOption } from './cache-options'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\nimport type { TreeInstance } from '@element-plus/components/tree'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<TreeInstance | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    label: 'label',\n    children: 'children',\n    disabled: 'disabled',\n    isLeaf: 'isLeaf',\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  const defaultExpandedParentKeys = toValidArray(props.modelValue)\n    .map((value) => {\n      return treeFind(\n        props.data || [],\n        (data) => getNodeValByProp('value', data) === value,\n        (data) => getNodeValByProp('children', data),\n        (data, index, array, parent) =>\n          parent && getNodeValByProp('value', parent)\n      )\n    })\n    .filter((item) => isValidValue(item))\n\n  const cacheOptions = computed(() => {\n    if (!props.renderAfterExpand && !props.lazy) return []\n\n    const options: CacheOption[] = []\n\n    treeEach(\n      props.data.concat(props.cacheData),\n      (node) => {\n        const value = getNodeValByProp('value', node)\n        options.push({\n          value,\n          currentLabel: getNodeValByProp('label', node),\n          isDisabled: getNodeValByProp('disabled', node),\n        })\n      },\n      (data) => getNodeValByProp('children', data)\n    )\n\n    return options\n  })\n\n  const getChildCheckedKeys = () => {\n    return tree.value?.getCheckedKeys().filter((checkedKey) => {\n      const node = tree.value?.getNode(checkedKey) as Node\n      return !isNil(node) && isEmpty(node.childNodes)\n    })\n  }\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n\n    // only expand on click node when the `check-strictly` is false\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly && props.expandOnClickNode\n    }),\n\n    // show current selected node only first time,\n    // fix the problem of expanding multiple nodes when checking multiple nodes\n    defaultExpandedKeys: computed(() => {\n      return props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys)\n        : defaultExpandedParentKeys\n    }),\n\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n          visible: node.visible,\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      const regexp = new RegExp(escapeStringRegexp(value), 'i')\n      return regexp.test(getNodeValByProp('label', data) || '')\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      // `onCheck` is trigger when `checkOnClickNode`\n      if (props.showCheckbox && props.checkOnClickNode) return\n\n      // now `checkOnClickNode` is false, only no checkbox and `checkStrictly` or `isLeaf`\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.states.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option)\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick()\n      }\n      select.value?.focus()\n    },\n    onCheck: (data, params) => {\n      // ignore when no checkbox, like only `checkOnClickNode` is true\n      if (!props.showCheckbox) return\n\n      const dataValue = getNodeValByProp('value', data)\n      const dataMap = {}\n      treeEach(\n        [tree.value.store.root],\n        (node) => (dataMap[node.key] = node),\n        (node) => node.childNodes\n      )\n\n      // fix: checkedKeys has not cached keys\n      const uncachedCheckedKeys = params.checkedKeys\n      const cachedKeys = props.multiple\n        ? toValidArray(props.modelValue).filter(\n            (item) => !(item in dataMap) && !uncachedCheckedKeys.includes(item)\n          )\n        : []\n      const checkedKeys = cachedKeys.concat(uncachedCheckedKeys)\n\n      if (props.checkStrictly) {\n        emit(\n          UPDATE_MODEL_EVENT,\n          // Checking for changes may come from `check-on-node-click`\n          props.multiple\n            ? checkedKeys\n            : checkedKeys.includes(dataValue)\n            ? dataValue\n            : undefined\n        )\n      }\n      // only can select leaf node\n      else {\n        if (props.multiple) {\n          const childKeys = getChildCheckedKeys()\n\n          emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys))\n        } else {\n          // select first leaf node when check parent\n          const firstLeaf = treeFind(\n            [data],\n            (data) =>\n              !isValidArray(getNodeValByProp('children', data)) &&\n              !getNodeValByProp('disabled', data),\n            (data) => getNodeValByProp('children', data)\n          )\n          const firstLeafKey = firstLeaf\n            ? getNodeValByProp('value', firstLeaf)\n            : undefined\n\n          // unselect when any child checked\n          const hasCheckedChild =\n            isValidValue(props.modelValue) &&\n            !!treeFind(\n              [data],\n              (data) => getNodeValByProp('value', data) === props.modelValue,\n              (data) => getNodeValByProp('children', data)\n            )\n\n          emit(\n            UPDATE_MODEL_EVENT,\n            firstLeafKey === props.modelValue || hasCheckedChild\n              ? undefined\n              : firstLeafKey\n          )\n        }\n      }\n\n      nextTick(() => {\n        const checkedKeys = toValidArray(props.modelValue)\n        tree.value.setCheckedKeys(checkedKeys)\n\n        attrs.onCheck?.(data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes(),\n        })\n      })\n\n      select.value?.focus()\n    },\n\n    onNodeExpand: (data, node, e) => {\n      attrs.onNodeExpand?.(data, node, e)\n      nextTick(() => {\n        if (\n          !props.checkStrictly &&\n          props.lazy &&\n          props.multiple &&\n          node.checked\n        ) {\n          const dataMap = {}\n          const uncachedCheckedKeys = (\n            tree.value as TreeInstance\n          ).getCheckedKeys()\n\n          treeEach(\n            [tree.value.store.root],\n            (node) => (dataMap[node.key] = node),\n            (node) => node.childNodes\n          )\n\n          const cachedKeys = toValidArray(props.modelValue).filter(\n            (item) => !(item in dataMap) && !uncachedCheckedKeys.includes(item)\n          )\n\n          const childKeys = getChildCheckedKeys()\n          emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys))\n        }\n      })\n    },\n    // else\n    cacheOptions,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}