{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport dayjs from 'dayjs';\n\n/**\n * 格式化日期时间\n * @param {string|number|Date} time - 要格式化的时间\n * @param {string} format - 格式化模式，默认为 YYYY-MM-DD HH:mm:ss\n * @returns {string} 格式化后的时间字符串\n */\nexport var formatDateTime = function formatDateTime(time) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:mm:ss';\n  return time ? dayjs(new Date(time)).format(format) : 'N/A';\n};\n\n/**\n * 获取全局 CSS 变量值\n * @param {string} cssVariableName - CSS 变量名\n * @returns {string} CSS 变量值\n */\nexport var getCssVariableValue = function getCssVariableValue(cssVariableName) {\n  var cssVariableValue = '';\n  try {\n    // 没有拿到值时，会返回空串\n    cssVariableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariableName);\n  } catch (error) {\n    console.error(error);\n  }\n  return cssVariableValue;\n};\n\n/**\n * 设置全局 CSS 变量\n * @param {string} cssVariableName - CSS 变量名\n * @param {string} cssVariableValue - CSS 变量值\n */\nexport var setCssVariableValue = function setCssVariableValue(cssVariableName, cssVariableValue) {\n  try {\n    document.documentElement.style.setProperty(cssVariableName, cssVariableValue);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * 防抖函数\n * @param {Function} fn - 要执行的函数\n * @param {number} delay - 延迟时间，单位毫秒\n * @returns {Function} 防抖后的函数\n */\nexport var debounce = function debounce(fn, delay) {\n  var timer = null;\n  return function () {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n\n/**\n * 节流函数\n * @param {Function} fn - 要执行的函数\n * @param {number} delay - 延迟时间，单位毫秒\n * @returns {Function} 节流后的函数\n */\nexport var throttle = function throttle(fn, delay) {\n  var lastTime = 0;\n  return function () {\n    var context = this;\n    var args = arguments;\n    var now = Date.now();\n    if (now - lastTime >= delay) {\n      fn.apply(context, args);\n      lastTime = now;\n    }\n  };\n};\n\n/**\n * 深拷贝对象\n * @param {Object} obj - 要拷贝的对象\n * @returns {Object} 拷贝后的对象\n */\nvar _deepClone = function deepClone(obj) {\n  if (obj === null || _typeof(obj) !== 'object') {\n    return obj;\n  }\n  var clone = Array.isArray(obj) ? [] : {};\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      clone[key] = _deepClone(obj[key]);\n    }\n  }\n  return clone;\n};\nexport { _deepClone as deepClone };","map":{"version":3,"names":["dayjs","formatDateTime","time","format","arguments","length","undefined","Date","getCssVariableValue","cssVariableName","cssVariableValue","getComputedStyle","document","documentElement","getPropertyValue","error","console","setCssVariableValue","style","setProperty","debounce","fn","delay","timer","context","args","clearTimeout","setTimeout","apply","throttle","lastTime","now","deepClone","obj","_typeof","clone","Array","isArray","key","Object","prototype","hasOwnProperty","call","_deepClone"],"sources":["H:/ForumServers/ForumFrontend/src/utils/index.js"],"sourcesContent":["import dayjs from 'dayjs'\n\n/**\n * 格式化日期时间\n * @param {string|number|Date} time - 要格式化的时间\n * @param {string} format - 格式化模式，默认为 YYYY-MM-DD HH:mm:ss\n * @returns {string} 格式化后的时间字符串\n */\nexport const formatDateTime = (time, format = 'YYYY-MM-DD HH:mm:ss') => {\n  return time ? dayjs(new Date(time)).format(format) : 'N/A'\n}\n\n/**\n * 获取全局 CSS 变量值\n * @param {string} cssVariableName - CSS 变量名\n * @returns {string} CSS 变量值\n */\nexport const getCssVariableValue = (cssVariableName) => {\n  let cssVariableValue = ''\n  try {\n    // 没有拿到值时，会返回空串\n    cssVariableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariableName)\n  } catch (error) {\n    console.error(error)\n  }\n  return cssVariableValue\n}\n\n/**\n * 设置全局 CSS 变量\n * @param {string} cssVariableName - CSS 变量名\n * @param {string} cssVariableValue - CSS 变量值\n */\nexport const setCssVariableValue = (cssVariableName, cssVariableValue) => {\n  try {\n    document.documentElement.style.setProperty(cssVariableName, cssVariableValue)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * 防抖函数\n * @param {Function} fn - 要执行的函数\n * @param {number} delay - 延迟时间，单位毫秒\n * @returns {Function} 防抖后的函数\n */\nexport const debounce = (fn, delay) => {\n  let timer = null\n  return function() {\n    const context = this\n    const args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(context, args)\n    }, delay)\n  }\n}\n\n/**\n * 节流函数\n * @param {Function} fn - 要执行的函数\n * @param {number} delay - 延迟时间，单位毫秒\n * @returns {Function} 节流后的函数\n */\nexport const throttle = (fn, delay) => {\n  let lastTime = 0\n  return function() {\n    const context = this\n    const args = arguments\n    const now = Date.now()\n    if (now - lastTime >= delay) {\n      fn.apply(context, args)\n      lastTime = now\n    }\n  }\n}\n\n/**\n * 深拷贝对象\n * @param {Object} obj - 要拷贝的对象\n * @returns {Object} 拷贝后的对象\n */\nexport const deepClone = (obj) => {\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n  \n  const clone = Array.isArray(obj) ? [] : {}\n  \n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      clone[key] = deepClone(obj[key])\n    }\n  }\n  \n  return clone\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}