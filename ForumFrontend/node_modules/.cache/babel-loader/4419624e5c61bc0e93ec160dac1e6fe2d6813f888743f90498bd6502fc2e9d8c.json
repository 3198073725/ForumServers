{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$4 = require('../../button/index.js');\nvar index$3 = require('../../icon/index.js');\nvar index$2 = require('../../tooltip/index.js');\nvar popconfirm = require('./popconfirm.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar style = require('../../../utils/dom/style.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElPopconfirm\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: popconfirm.popconfirmProps,\n  emits: popconfirm.popconfirmEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var _index$useLocale = index.useLocale(),\n      t = _index$useLocale.t;\n    var ns = index$1.useNamespace(\"popconfirm\");\n    var tooltipRef = vue.ref();\n    var hidePopper = function hidePopper() {\n      var _a, _b;\n      (_b = (_a = tooltipRef.value) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);\n    };\n    var style$1 = vue.computed(function () {\n      return {\n        width: style.addUnit(props.width)\n      };\n    });\n    var confirm = function confirm(e) {\n      emit(\"confirm\", e);\n      hidePopper();\n    };\n    var cancel = function cancel(e) {\n      emit(\"cancel\", e);\n      hidePopper();\n    };\n    var finalConfirmButtonText = vue.computed(function () {\n      return props.confirmButtonText || t(\"el.popconfirm.confirmButtonText\");\n    });\n    var finalCancelButtonText = vue.computed(function () {\n      return props.cancelButtonText || t(\"el.popconfirm.cancelButtonText\");\n    });\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElTooltip), vue.mergeProps({\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        trigger: \"click\",\n        effect: \"light\"\n      }, _ctx.$attrs, {\n        \"popper-class\": \"\".concat(vue.unref(ns).namespace.value, \"-popover\"),\n        \"popper-style\": vue.unref(style$1),\n        teleported: _ctx.teleported,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        \"hide-after\": _ctx.hideAfter,\n        persistent: _ctx.persistent\n      }), {\n        content: vue.withCtx(function () {\n          return [vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).b())\n          }, [vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"main\"))\n          }, [!_ctx.hideIcon && _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(index$3.ElIcon), {\n            key: 0,\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"icon\")),\n            style: vue.normalizeStyle({\n              color: _ctx.iconColor\n            })\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))];\n            }),\n            _: 1\n          }, 8, [\"class\", \"style\"])) : vue.createCommentVNode(\"v-if\", true), vue.createTextVNode(\" \" + vue.toDisplayString(_ctx.title), 1)], 2), vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"action\"))\n          }, [vue.renderSlot(_ctx.$slots, \"actions\", {\n            confirm: confirm,\n            cancel: cancel\n          }, function () {\n            return [vue.createVNode(vue.unref(index$4.ElButton), {\n              size: \"small\",\n              type: _ctx.cancelButtonType === \"text\" ? \"\" : _ctx.cancelButtonType,\n              text: _ctx.cancelButtonType === \"text\",\n              onClick: cancel\n            }, {\n              \"default\": vue.withCtx(function () {\n                return [vue.createTextVNode(vue.toDisplayString(vue.unref(finalCancelButtonText)), 1)];\n              }),\n              _: 1\n            }, 8, [\"type\", \"text\"]), vue.createVNode(vue.unref(index$4.ElButton), {\n              size: \"small\",\n              type: _ctx.confirmButtonType === \"text\" ? \"\" : _ctx.confirmButtonType,\n              text: _ctx.confirmButtonType === \"text\",\n              onClick: confirm\n            }, {\n              \"default\": vue.withCtx(function () {\n                return [vue.createTextVNode(vue.toDisplayString(vue.unref(finalConfirmButtonText)), 1)];\n              }),\n              _: 1\n            }, 8, [\"type\", \"text\"])];\n          })], 2)], 2)];\n        }),\n        \"default\": vue.withCtx(function () {\n          return [_ctx.$slots.reference ? vue.renderSlot(_ctx.$slots, \"reference\", {\n            key: 0\n          }) : vue.createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 16, [\"popper-class\", \"popper-style\", \"teleported\", \"hide-after\", \"persistent\"]);\n    };\n  }\n}));\nvar Popconfirm = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"popconfirm.vue\"]]);\nexports[\"default\"] = Popconfirm;","map":{"version":3,"names":["name","_index$useLocale","index","useLocale","t","ns","index$1","useNamespace","tooltipRef","vue","ref","hidePopper","_a","_b","value","onClose","call","style$1","computed","width","style","addUnit","props","confirm","e","emit","cancel","finalConfirmButtonText","confirmButtonText","finalCancelButtonText","cancelButtonText","_ctx","_cache","openBlock","createBlock","unref","index$2","ElTooltip","mergeProps","ref_key"],"sources":["../../../../../../packages/components/popconfirm/src/popconfirm.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    trigger=\"click\"\n    effect=\"light\"\n    v-bind=\"$attrs\"\n    :popper-class=\"`${ns.namespace.value}-popover`\"\n    :popper-style=\"style\"\n    :teleported=\"teleported\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :hide-after=\"hideAfter\"\n    :persistent=\"persistent\"\n  >\n    <template #content>\n      <div :class=\"ns.b()\">\n        <div :class=\"ns.e('main')\">\n          <el-icon\n            v-if=\"!hideIcon && icon\"\n            :class=\"ns.e('icon')\"\n            :style=\"{ color: iconColor }\"\n          >\n            <component :is=\"icon\" />\n          </el-icon>\n          {{ title }}\n        </div>\n        <div :class=\"ns.e('action')\">\n          <slot name=\"actions\" :confirm=\"confirm\" :cancel=\"cancel\">\n            <el-button\n              size=\"small\"\n              :type=\"cancelButtonType === 'text' ? '' : cancelButtonType\"\n              :text=\"cancelButtonType === 'text'\"\n              @click=\"cancel\"\n            >\n              {{ finalCancelButtonText }}\n            </el-button>\n            <el-button\n              size=\"small\"\n              :type=\"confirmButtonType === 'text' ? '' : confirmButtonType\"\n              :text=\"confirmButtonType === 'text'\"\n              @click=\"confirm\"\n            >\n              {{ finalConfirmButtonText }}\n            </el-button>\n          </slot>\n        </div>\n      </div>\n    </template>\n    <template v-if=\"$slots.reference\">\n      <slot name=\"reference\" />\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { addUnit } from '@element-plus/utils'\nimport { popconfirmEmits, popconfirmProps } from './popconfirm'\n\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElPopconfirm',\n})\n\nconst props = defineProps(popconfirmProps)\nconst emit = defineEmits(popconfirmEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('popconfirm')\nconst tooltipRef = ref<TooltipInstance>()\n\nconst hidePopper = () => {\n  tooltipRef.value?.onClose?.()\n}\n\nconst style = computed(() => {\n  return {\n    width: addUnit(props.width),\n  }\n})\n\nconst confirm = (e: MouseEvent) => {\n  emit('confirm', e)\n  hidePopper()\n}\nconst cancel = (e: MouseEvent) => {\n  emit('cancel', e)\n  hidePopper()\n}\n\nconst finalConfirmButtonText = computed(\n  () => props.confirmButtonText || t('el.popconfirm.confirmButtonText')\n)\nconst finalCancelButtonText = computed(\n  () => props.cancelButtonText || t('el.popconfirm.cancelButtonText')\n)\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;qCAgEc;EACZA,IAAM;AACR;;;;;;;IAKM,IAAAC,gBAAA,GAAQC,KAAA,CAAAC,SAAU;MAAhBC,CAAE,GAAAH,gBAAA,CAAFG,CAAE;IACJ,IAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,YAAY;IACpC,IAAMC,UAAA,GAAaC,GAAA,CAAAC,GAAqB;IAExC,IAAMC,UAAA,GAAa,SAAbA,WAAA,EAAmB;MACvB,IAAAC,EAAA,EAAAC,EAAA;MACF,CAAAA,EAAA,IAAAD,EAAA,GAAAJ,UAAA,CAAAM,KAAA,qBAAAF,EAAA,CAAAG,OAAA,qBAAAF,EAAA,CAAAG,IAAA,CAAAJ,EAAA;IAEA,CAAM;IACG,IAAAK,OAAA,GAAAR,GAAA,CAAAS,QAAA;MACL;QACFC,KAAA,EAAAC,KAAA,CAAAC,OAAA,CAAAC,KAAA,CAAAH,KAAA;MAAA,CACD;IAED,CAAM;IACJ,IAAAI,OAAA,YAAAA,QAAAC,CAAgB,EAAC;MACNC,IAAA,YAAAD,CAAA;MACbb,UAAA;IACA,CAAM;IACJ,IAAAe,MAAA,YAAAA,OAAAF,CAAe,EAAC;MACLC,IAAA,WAAAD,CAAA;MACbb,UAAA;IAEA;IAA+B,IACvBgB,sBAA2B,GAAAlB,GAAA,CAAAS,QAAmC;MAAA,OAAAI,KAAA,CAAAM,iBAAA,IAAAxB,CAAA;IAAA;IACtE,IAAAyB,qBAAA,GAAApB,GAAA,CAAAS,QAAA;MAAA,OAAAI,KAAA,CAAAQ,gBAAA,IAAA1B,CAAA;IAAA;IACA,OAA8B,UAAA2B,IAAA,EAAAC,MAAA;MAC5B,OAAMvB,GAAA,CAAAwB,SAA0B,IAAAxB,GAAA,CAAAyB,WAAA,CAAEzB,GAAA,CAAA0B,KAAgC,CAAAC,OAAA,CAAAC,SAAA,GAAA5B,GAAA,CAAA6B,UAAA;QACpEC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}