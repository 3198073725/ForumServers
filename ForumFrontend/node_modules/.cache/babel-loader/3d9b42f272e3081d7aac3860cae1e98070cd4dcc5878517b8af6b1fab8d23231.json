{"ast":null,"code":"import _createForOfIteratorHelper from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { Close, Minus, ArrowUp, Position, Loading } from '@element-plus/icons-vue';\nimport { sendMessage as sendMessageApi } from '@/api/messages';\nimport { DEFAULT_AVATAR } from '@/constants/default-avatar';\nexport default {\n  name: 'ChatWindow',\n  components: {\n    Loading: Loading\n  },\n  props: {\n    userId: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var store = useStore();\n    var messageContainer = ref(null);\n    var messageText = ref('');\n    var messageInput = ref(null);\n    var minimized = ref(false);\n    var loading = ref(true);\n    var loadingMore = ref(false);\n    var sendingMessage = ref(false);\n    var messageQueue = ref([]);\n    var retryCount = ref(0);\n    var MAX_RETRIES = 3;\n\n    // 计算属性\n    var currentUser = computed(function () {\n      return store.state.user;\n    });\n    var currentUserId = computed(function () {\n      return store.getters.userId;\n    });\n    var messages = computed(function () {\n      return store.getters['chat/messagesByUserId'](props.userId) || [];\n    });\n    var hasMoreMessages = computed(function () {\n      return store.getters['chat/hasMoreMessages'](props.userId);\n    });\n\n    // 获取聊天对象用户信息\n    var chatUser = computed(function () {\n      // 从store中获取用户信息\n      var userInfo = store.getters['users/getUserById'](props.userId);\n\n      // 如果没有用户信息，触发获取\n      if (!userInfo) {\n        fetchUserInfo();\n      }\n      return {\n        id: props.userId,\n        username: (userInfo === null || userInfo === void 0 ? void 0 : userInfo.username) || \"\\u7528\\u6237\".concat(props.userId),\n        nickname: (userInfo === null || userInfo === void 0 ? void 0 : userInfo.nickname) || (userInfo === null || userInfo === void 0 ? void 0 : userInfo.username) || \"\\u7528\\u6237\".concat(props.userId),\n        avatar_url: (userInfo === null || userInfo === void 0 ? void 0 : userInfo.avatar_url) || DEFAULT_AVATAR\n      };\n    });\n\n    // 按时间排序的消息列表\n    var sortedMessages = computed(function () {\n      return _toConsumableArray(messages.value).sort(function (a, b) {\n        return new Date(a.timestamp) - new Date(b.timestamp);\n      });\n    });\n\n    // 监听消息列表变化，自动滚动到底部\n    watch(sortedMessages, function () {\n      nextTick(function () {\n        scrollToBottom();\n      });\n    });\n\n    // 获取用户信息\n    var fetchUserInfo = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return store.dispatch('users/fetchUserInfo', props.userId);\n            case 3:\n              _context.next = 8;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('获取用户信息失败:', _context.t0);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 5]]);\n      }));\n      return function fetchUserInfo() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 初始化\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchUserInfo();\n          case 2:\n            _context2.next = 4;\n            return loadMessages();\n          case 4:\n            // 标记消息为已读\n            store.dispatch('chat/markMessagesAsRead', props.userId);\n\n            // 开始轮询新消息\n            startMessagePolling();\n\n            // 聚焦到输入框\n            nextTick(function () {\n              if (messageInput.value) {\n                messageInput.value.focus();\n              }\n            });\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })));\n\n    // 组件销毁时停止轮询\n    onUnmounted(function () {\n      stopMessagePolling();\n    });\n\n    // 加载消息\n    var loadMessages = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              loading.value = true;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return store.dispatch('chat/fetchMessagesWithUser', {\n                userId: props.userId,\n                page: 1\n              });\n            case 4:\n              // 滚动到底部\n              nextTick(function () {\n                scrollToBottom();\n              });\n              _context3.next = 11;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error('加载消息失败:', _context3.t0);\n              ElMessage.error('加载消息失败，请稍后重试');\n            case 11:\n              _context3.prev = 11;\n              loading.value = false;\n              return _context3.finish(11);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 7, 11, 14]]);\n      }));\n      return function loadMessages() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 加载更多消息\n    var loadMoreMessages = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(loadingMore.value || !hasMoreMessages.value)) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 2:\n              loadingMore.value = true;\n              _context4.prev = 3;\n              _context4.next = 6;\n              return store.dispatch('chat/loadMoreMessages', props.userId);\n            case 6:\n              _context4.next = 12;\n              break;\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](3);\n              console.error('加载更多消息失败:', _context4.t0);\n              ElMessage.error('加载更多消息失败，请稍后重试');\n            case 12:\n              _context4.prev = 12;\n              loadingMore.value = false;\n              return _context4.finish(12);\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[3, 8, 12, 15]]);\n      }));\n      return function loadMoreMessages() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    // 发送消息\n    var sendMessage = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var content, messageToSend;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              content = messageText.value.trim();\n              if (!(!content || sendingMessage.value)) {\n                _context5.next = 3;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 3:\n              sendingMessage.value = true;\n              _context5.prev = 4;\n              // 清空输入框\n              messageToSend = content;\n              messageText.value = '';\n\n              // 聚焦回输入框\n              nextTick(function () {\n                if (messageInput.value) {\n                  messageInput.value.focus();\n                }\n              });\n\n              // 通过WebSocket发送消息\n              wsManager.sendChatMessage(props.userId, messageToSend);\n\n              // 备用方案：通过API发送消息\n              _context5.prev = 9;\n              _context5.next = 12;\n              return sendMessageApi(props.userId, messageToSend);\n            case 12:\n              _context5.next = 19;\n              break;\n            case 14:\n              _context5.prev = 14;\n              _context5.t0 = _context5[\"catch\"](9);\n              console.error('通过API发送消息失败:', _context5.t0);\n              // 将消息添加到重试队列\n              messageQueue.value.push(messageToSend);\n              // 尝试重新发送队列中的消息\n              _retryQueuedMessages();\n            case 19:\n              _context5.next = 25;\n              break;\n            case 21:\n              _context5.prev = 21;\n              _context5.t1 = _context5[\"catch\"](4);\n              console.error('发送消息失败:', _context5.t1);\n              ElMessage.error('发送消息失败，请稍后重试');\n            case 25:\n              _context5.prev = 25;\n              sendingMessage.value = false;\n              return _context5.finish(25);\n            case 28:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[4, 21, 25, 28], [9, 14]]);\n      }));\n      return function sendMessage() {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    // 重试发送队列中的消息\n    var _retryQueuedMessages = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(retryCount.value >= MAX_RETRIES || messageQueue.value.length === 0)) {\n                _context7.next = 3;\n                break;\n              }\n              if (retryCount.value >= MAX_RETRIES) {\n                ElMessage.error('消息发送失败，请检查网络连接');\n                retryCount.value = 0;\n              }\n              return _context7.abrupt(\"return\");\n            case 3:\n              retryCount.value++;\n\n              // 延迟重试\n              setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n                var messagesToRetry, _iterator, _step, message;\n                return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                  while (1) switch (_context6.prev = _context6.next) {\n                    case 0:\n                      messagesToRetry = _toConsumableArray(messageQueue.value);\n                      messageQueue.value = [];\n                      _iterator = _createForOfIteratorHelper(messagesToRetry);\n                      _context6.prev = 3;\n                      _iterator.s();\n                    case 5:\n                      if ((_step = _iterator.n()).done) {\n                        _context6.next = 18;\n                        break;\n                      }\n                      message = _step.value;\n                      _context6.prev = 7;\n                      _context6.next = 10;\n                      return sendMessageApi(props.userId, message);\n                    case 10:\n                      _context6.next = 16;\n                      break;\n                    case 12:\n                      _context6.prev = 12;\n                      _context6.t0 = _context6[\"catch\"](7);\n                      console.error('重试发送消息失败:', _context6.t0);\n                      messageQueue.value.push(message);\n                    case 16:\n                      _context6.next = 5;\n                      break;\n                    case 18:\n                      _context6.next = 23;\n                      break;\n                    case 20:\n                      _context6.prev = 20;\n                      _context6.t1 = _context6[\"catch\"](3);\n                      _iterator.e(_context6.t1);\n                    case 23:\n                      _context6.prev = 23;\n                      _iterator.f();\n                      return _context6.finish(23);\n                    case 26:\n                      // 如果还有消息未发送成功，继续重试\n                      if (messageQueue.value.length > 0) {\n                        _retryQueuedMessages();\n                      } else {\n                        retryCount.value = 0;\n                      }\n                    case 27:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }, _callee6, null, [[3, 20, 23, 26], [7, 12]]);\n              })), 2000 * retryCount.value);\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n      return function retryQueuedMessages() {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    // 滚动到底部\n    var scrollToBottom = function scrollToBottom() {\n      if (messageContainer.value) {\n        messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\n      }\n    };\n\n    // 最小化聊天窗口\n    var minimize = function minimize(e) {\n      if (e) e.stopPropagation();\n      minimized.value = true;\n    };\n\n    // 最大化聊天窗口\n    var maximize = function maximize(e) {\n      if (e) e.stopPropagation();\n      minimized.value = false;\n      // 恢复窗口后滚动到底部\n      nextTick(function () {\n        scrollToBottom();\n        // 聚焦到输入框\n        if (messageInput.value) {\n          messageInput.value.focus();\n        }\n      });\n    };\n\n    // 切换最小化/最大化\n    var toggleMinimize = function toggleMinimize() {\n      minimized.value = !minimized.value;\n      if (!minimized.value) {\n        nextTick(function () {\n          scrollToBottom();\n          // 聚焦到输入框\n          if (messageInput.value) {\n            messageInput.value.focus();\n          }\n        });\n      }\n    };\n\n    // 关闭聊天窗口\n    var closeChat = function closeChat() {\n      emit('close', props.userId);\n    };\n\n    // 格式化时间\n    var formatTime = function formatTime(timestamp) {\n      if (!timestamp) return '';\n\n      // 确保timestamp是有效的日期\n      var date = new Date(timestamp);\n      if (isNaN(date.getTime())) {\n        console.error('Invalid timestamp:', timestamp);\n        return '';\n      }\n      var now = new Date();\n      var isToday = date.toDateString() === now.toDateString();\n      var isYesterday = new Date(now - 86400000).toDateString() === date.toDateString();\n\n      // 格式化时间部分\n      var hours = date.getHours().toString().padStart(2, '0');\n      var minutes = date.getMinutes().toString().padStart(2, '0');\n      var timeStr = \"\".concat(hours, \":\").concat(minutes);\n\n      // 今天的消息只显示时间\n      if (isToday) {\n        return timeStr;\n      }\n\n      // 昨天的消息显示\"昨天 HH:MM\"\n      if (isYesterday) {\n        return \"\\u6628\\u5929 \".concat(timeStr);\n      }\n\n      // 今年的消息显示\"MM-DD HH:MM\"\n      if (date.getFullYear() === now.getFullYear()) {\n        var month = (date.getMonth() + 1).toString().padStart(2, '0');\n        var day = date.getDate().toString().padStart(2, '0');\n        return \"\".concat(month, \"-\").concat(day, \" \").concat(timeStr);\n      }\n\n      // 其他情况显示完整日期\"YYYY-MM-DD HH:MM\"\n      return \"\".concat(date.getFullYear(), \"-\").concat((date.getMonth() + 1).toString().padStart(2, '0'), \"-\").concat(date.getDate().toString().padStart(2, '0'), \" \").concat(timeStr);\n    };\n\n    // 头像加载失败处理\n    var handleAvatarError = function handleAvatarError(e) {\n      var img = e.target;\n      img.src = DEFAULT_AVATAR;\n    };\n    return {\n      messageContainer: messageContainer,\n      messageText: messageText,\n      messageInput: messageInput,\n      minimized: minimized,\n      loading: loading,\n      loadingMore: loadingMore,\n      currentUser: currentUser,\n      currentUserId: currentUserId,\n      messages: messages,\n      sortedMessages: sortedMessages,\n      hasMoreMessages: hasMoreMessages,\n      chatUser: chatUser,\n      loadMessages: loadMessages,\n      loadMoreMessages: loadMoreMessages,\n      sendMessage: sendMessage,\n      minimize: minimize,\n      maximize: maximize,\n      toggleMinimize: toggleMinimize,\n      closeChat: closeChat,\n      formatTime: formatTime,\n      handleAvatarError: handleAvatarError,\n      DEFAULT_AVATAR: DEFAULT_AVATAR,\n      // 图标\n      Close: Close,\n      Minus: Minus,\n      ArrowUp: ArrowUp,\n      Position: Position,\n      Loading: Loading\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","watch","nextTick","onMounted","onUnmounted","useStore","ElMessage","Close","Minus","ArrowUp","Position","Loading","sendMessage","sendMessageApi","DEFAULT_AVATAR","name","components","props","userId","type","Number","String","required","emits","setup","_ref","emit","store","messageContainer","messageText","messageInput","minimized","loading","loadingMore","sendingMessage","messageQueue","retryCount","MAX_RETRIES","currentUser","state","user","currentUserId","getters","messages","hasMoreMessages","chatUser","userInfo","fetchUserInfo","id","username","concat","nickname","avatar_url","sortedMessages","_toConsumableArray","value","sort","a","b","Date","timestamp","scrollToBottom","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","dispatch","t0","console","error","stop","apply","arguments","_callee2","_callee2$","_context2","loadMessages","startMessagePolling","focus","stopMessagePolling","_ref4","_callee3","_callee3$","_context3","page","finish","loadMoreMessages","_ref5","_callee4","_callee4$","_context4","abrupt","_ref6","_callee5","content","messageToSend","_callee5$","_context5","trim","wsManager","sendChatMessage","push","retryQueuedMessages","t1","_ref7","_callee7","_callee7$","_context7","length","setTimeout","_callee6","messagesToRetry","_iterator","_step","message","_callee6$","_context6","_createForOfIteratorHelper","s","n","done","e","f","scrollTop","scrollHeight","minimize","stopPropagation","maximize","toggleMinimize","closeChat","formatTime","date","isNaN","getTime","now","isToday","toDateString","isYesterday","hours","getHours","toString","padStart","minutes","getMinutes","timeStr","getFullYear","month","getMonth","day","getDate","handleAvatarError","img","target","src"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\components\\ChatWindow.vue"],"sourcesContent":["<template>\n  <div class=\"chat-window\" :class=\"{ 'is-minimized': minimized }\">\n    <!-- 聊天窗口标题栏 -->\n    <div class=\"chat-header\" @click=\"toggleMinimize\">\n      <div class=\"user-info\">\n        <el-avatar \n          :size=\"24\" \n          :src=\"chatUser.avatar_url || DEFAULT_AVATAR\"\n          @error=\"handleAvatarError\"\n        />\n        <span class=\"username\">{{ chatUser.nickname || chatUser.username }}</span>\n      </div>\n      <div class=\"header-actions\">\n        <el-button v-if=\"!minimized\" class=\"action-button\" :icon=\"Minus\" circle @click.stop=\"minimize\" />\n        <el-button v-else class=\"action-button\" :icon=\"ArrowUp\" circle @click.stop=\"maximize\" />\n        <el-button class=\"action-button\" :icon=\"Close\" circle @click.stop=\"closeChat\" />\n      </div>\n    </div>\n    \n    <!-- 聊天消息区域 -->\n    <div v-if=\"!minimized\" class=\"chat-body\">\n      <div class=\"message-container\" ref=\"messageContainer\">\n        <div v-if=\"loading\" class=\"loading-messages\">\n          <el-icon class=\"is-loading\"><Loading /></el-icon>\n          <span>加载中...</span>\n        </div>\n        \n        <div v-else-if=\"messages.length === 0\" class=\"no-messages\">\n          <p>暂无消息记录，发送一条消息开始聊天吧！</p>\n        </div>\n        \n        <template v-else>\n          <div v-if=\"hasMoreMessages\" class=\"load-more\">\n            <el-button type=\"text\" @click=\"loadMoreMessages\" :loading=\"loadingMore\">\n              加载更多消息\n            </el-button>\n          </div>\n          \n          <div \n            v-for=\"message in sortedMessages\" \n            :key=\"message.id\" \n            class=\"message\" \n            :class=\"{ 'outgoing': message.senderId === currentUserId }\"\n          >\n            <el-avatar \n              v-if=\"message.senderId !== currentUserId\" \n              :size=\"32\" \n              :src=\"chatUser.avatar_url || DEFAULT_AVATAR\"\n              @error=\"handleAvatarError\"\n            />\n            \n            <div class=\"message-content\">\n              <div class=\"message-text\">{{ message.content }}</div>\n              <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n            </div>\n            \n            <el-avatar \n              v-if=\"message.senderId === currentUserId\" \n              :size=\"32\" \n              :src=\"currentUser.avatar_url || DEFAULT_AVATAR\"\n              @error=\"handleAvatarError\"\n            />\n          </div>\n        </template>\n      </div>\n      \n      <!-- 消息输入区域 -->\n      <div class=\"message-input\">\n        <el-input\n          v-model=\"messageText\"\n          type=\"textarea\"\n          :rows=\"2\"\n          placeholder=\"输入消息...\"\n          resize=\"none\"\n          @keydown.enter.prevent=\"sendMessage\"\n          ref=\"messageInput\"\n        />\n        <el-button type=\"primary\" :icon=\"Position\" @click=\"sendMessage\" :disabled=\"!messageText.trim()\">\n          发送\n        </el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { Close, Minus, ArrowUp, Position, Loading } from '@element-plus/icons-vue';\n\nimport { sendMessage as sendMessageApi } from '@/api/messages';\nimport { DEFAULT_AVATAR } from '@/constants/default-avatar';\n\nexport default {\n  name: 'ChatWindow',\n  components: {\n    Loading\n  },\n  props: {\n    userId: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props, { emit }) {\n    const store = useStore();\n    const messageContainer = ref(null);\n    const messageText = ref('');\n    const messageInput = ref(null);\n    const minimized = ref(false);\n    const loading = ref(true);\n    const loadingMore = ref(false);\n    const sendingMessage = ref(false);\n    const messageQueue = ref([]);\n    const retryCount = ref(0);\n    const MAX_RETRIES = 3;\n    \n    // 计算属性\n    const currentUser = computed(() => store.state.user);\n    const currentUserId = computed(() => store.getters.userId);\n    const messages = computed(() => store.getters['chat/messagesByUserId'](props.userId) || []);\n    const hasMoreMessages = computed(() => store.getters['chat/hasMoreMessages'](props.userId));\n    \n    // 获取聊天对象用户信息\n    const chatUser = computed(() => {\n      // 从store中获取用户信息\n      const userInfo = store.getters['users/getUserById'](props.userId);\n      \n      // 如果没有用户信息，触发获取\n      if (!userInfo) {\n        fetchUserInfo();\n      }\n      \n      return {\n        id: props.userId,\n        username: userInfo?.username || `用户${props.userId}`,\n        nickname: userInfo?.nickname || userInfo?.username || `用户${props.userId}`,\n        avatar_url: userInfo?.avatar_url || DEFAULT_AVATAR\n      };\n    });\n    \n    // 按时间排序的消息列表\n    const sortedMessages = computed(() => {\n      return [...messages.value].sort((a, b) => {\n        return new Date(a.timestamp) - new Date(b.timestamp);\n      });\n    });\n    \n    // 监听消息列表变化，自动滚动到底部\n    watch(sortedMessages, () => {\n      nextTick(() => {\n        scrollToBottom();\n      });\n    });\n    \n    // 获取用户信息\n    const fetchUserInfo = async () => {\n      try {\n        await store.dispatch('users/fetchUserInfo', props.userId);\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n      }\n    };\n    \n    // 初始化\n    onMounted(async () => {\n      // 获取用户信息\n      await fetchUserInfo();\n      \n      // 加载消息历史\n      await loadMessages();\n      \n      // 标记消息为已读\n      store.dispatch('chat/markMessagesAsRead', props.userId);\n      \n      // 开始轮询新消息\n      startMessagePolling();\n      \n      // 聚焦到输入框\n      nextTick(() => {\n        if (messageInput.value) {\n          messageInput.value.focus();\n        }\n      });\n    });\n    \n    // 组件销毁时停止轮询\n    onUnmounted(() => {\n      stopMessagePolling();\n    });\n    \n    // 加载消息\n    const loadMessages = async () => {\n      loading.value = true;\n      try {\n        await store.dispatch('chat/fetchMessagesWithUser', {\n          userId: props.userId,\n          page: 1\n        });\n        \n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('加载消息失败:', error);\n        ElMessage.error('加载消息失败，请稍后重试');\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // 加载更多消息\n    const loadMoreMessages = async () => {\n      if (loadingMore.value || !hasMoreMessages.value) return;\n      \n      loadingMore.value = true;\n      try {\n        await store.dispatch('chat/loadMoreMessages', props.userId);\n      } catch (error) {\n        console.error('加载更多消息失败:', error);\n        ElMessage.error('加载更多消息失败，请稍后重试');\n      } finally {\n        loadingMore.value = false;\n      }\n    };\n    \n    // 发送消息\n    const sendMessage = async () => {\n      const content = messageText.value.trim();\n      if (!content || sendingMessage.value) return;\n      \n      sendingMessage.value = true;\n      \n      try {\n        // 清空输入框\n        const messageToSend = content;\n        messageText.value = '';\n        \n        // 聚焦回输入框\n        nextTick(() => {\n          if (messageInput.value) {\n            messageInput.value.focus();\n          }\n        });\n        \n        // 通过WebSocket发送消息\n        wsManager.sendChatMessage(props.userId, messageToSend);\n        \n        // 备用方案：通过API发送消息\n        try {\n          await sendMessageApi(props.userId, messageToSend);\n        } catch (error) {\n          console.error('通过API发送消息失败:', error);\n          // 将消息添加到重试队列\n          messageQueue.value.push(messageToSend);\n          // 尝试重新发送队列中的消息\n          retryQueuedMessages();\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        ElMessage.error('发送消息失败，请稍后重试');\n      } finally {\n        sendingMessage.value = false;\n      }\n    };\n    \n    // 重试发送队列中的消息\n    const retryQueuedMessages = async () => {\n      if (retryCount.value >= MAX_RETRIES || messageQueue.value.length === 0) {\n        if (retryCount.value >= MAX_RETRIES) {\n          ElMessage.error('消息发送失败，请检查网络连接');\n          retryCount.value = 0;\n        }\n        return;\n      }\n      \n      retryCount.value++;\n      \n      // 延迟重试\n      setTimeout(async () => {\n        const messagesToRetry = [...messageQueue.value];\n        messageQueue.value = [];\n        \n        for (const message of messagesToRetry) {\n          try {\n            await sendMessageApi(props.userId, message);\n          } catch (error) {\n            console.error('重试发送消息失败:', error);\n            messageQueue.value.push(message);\n          }\n        }\n        \n        // 如果还有消息未发送成功，继续重试\n        if (messageQueue.value.length > 0) {\n          retryQueuedMessages();\n        } else {\n          retryCount.value = 0;\n        }\n      }, 2000 * retryCount.value);\n    };\n    \n    // 滚动到底部\n    const scrollToBottom = () => {\n      if (messageContainer.value) {\n        messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\n      }\n    };\n    \n    // 最小化聊天窗口\n    const minimize = (e) => {\n      if (e) e.stopPropagation();\n      minimized.value = true;\n    };\n    \n    // 最大化聊天窗口\n    const maximize = (e) => {\n      if (e) e.stopPropagation();\n      minimized.value = false;\n      // 恢复窗口后滚动到底部\n      nextTick(() => {\n        scrollToBottom();\n        // 聚焦到输入框\n        if (messageInput.value) {\n          messageInput.value.focus();\n        }\n      });\n    };\n    \n    // 切换最小化/最大化\n    const toggleMinimize = () => {\n      minimized.value = !minimized.value;\n      if (!minimized.value) {\n        nextTick(() => {\n          scrollToBottom();\n          // 聚焦到输入框\n          if (messageInput.value) {\n            messageInput.value.focus();\n          }\n        });\n      }\n    };\n    \n    // 关闭聊天窗口\n    const closeChat = () => {\n      emit('close', props.userId);\n    };\n    \n    // 格式化时间\n    const formatTime = (timestamp) => {\n      if (!timestamp) return '';\n      \n      // 确保timestamp是有效的日期\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) {\n        console.error('Invalid timestamp:', timestamp);\n        return '';\n      }\n      \n      const now = new Date();\n      const isToday = date.toDateString() === now.toDateString();\n      const isYesterday = new Date(now - 86400000).toDateString() === date.toDateString();\n      \n      // 格式化时间部分\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const timeStr = `${hours}:${minutes}`;\n      \n      // 今天的消息只显示时间\n      if (isToday) {\n        return timeStr;\n      }\n      \n      // 昨天的消息显示\"昨天 HH:MM\"\n      if (isYesterday) {\n        return `昨天 ${timeStr}`;\n      }\n      \n      // 今年的消息显示\"MM-DD HH:MM\"\n      if (date.getFullYear() === now.getFullYear()) {\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        return `${month}-${day} ${timeStr}`;\n      }\n      \n      // 其他情况显示完整日期\"YYYY-MM-DD HH:MM\"\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${timeStr}`;\n    };\n    \n    // 头像加载失败处理\n    const handleAvatarError = (e) => {\n      const img = e.target;\n      img.src = DEFAULT_AVATAR;\n    };\n    \n    return {\n      messageContainer,\n      messageText,\n      messageInput,\n      minimized,\n      loading,\n      loadingMore,\n      currentUser,\n      currentUserId,\n      messages,\n      sortedMessages,\n      hasMoreMessages,\n      chatUser,\n      loadMessages,\n      loadMoreMessages,\n      sendMessage,\n      minimize,\n      maximize,\n      toggleMinimize,\n      closeChat,\n      formatTime,\n      handleAvatarError,\n      DEFAULT_AVATAR,\n      // 图标\n      Close,\n      Minus,\n      ArrowUp,\n      Position,\n      Loading\n    };\n  }\n};\n</script>\n\n<style scoped>\n.chat-window {\n  width: 320px;\n  height: 400px;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  background-color: #fff;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  bottom: 0;\n  right: 20px;\n  z-index: 1000;\n  transition: height 0.3s;\n}\n\n.chat-window.is-minimized {\n  height: 40px;\n}\n\n.chat-header {\n  height: 40px;\n  padding: 0 10px;\n  background-color: #409eff;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  user-select: none;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.username {\n  margin-left: 8px;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.header-actions {\n  display: flex;\n  gap: 5px;\n}\n\n.action-button {\n  padding: 2px;\n  color: white;\n  background: transparent;\n  border: none;\n}\n\n.action-button:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.chat-body {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.message-container {\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n}\n\n.loading-messages {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #909399;\n}\n\n.no-messages {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #909399;\n  text-align: center;\n}\n\n.load-more {\n  text-align: center;\n  margin-bottom: 10px;\n}\n\n.message {\n  display: flex;\n  margin-bottom: 10px;\n  align-items: flex-start;\n}\n\n.message.outgoing {\n  flex-direction: row-reverse;\n}\n\n.message-content {\n  max-width: 70%;\n  margin: 0 8px;\n}\n\n.message-text {\n  padding: 8px 12px;\n  border-radius: 4px;\n  background-color: #f4f4f5;\n  word-break: break-word;\n  line-height: 1.4;\n}\n\n.message.outgoing .message-text {\n  background-color: #ecf5ff;\n  color: #409eff;\n}\n\n.message-time {\n  font-size: 12px;\n  color: #909399;\n  margin-top: 4px;\n  text-align: right;\n}\n\n.message.outgoing .message-time {\n  text-align: left;\n}\n\n.message-input {\n  padding: 10px;\n  border-top: 1px solid #ebeef5;\n  display: flex;\n  align-items: flex-end;\n}\n\n.message-input .el-input {\n  margin-right: 10px;\n}\n\n.message-input .el-button {\n  height: 40px;\n}\n</style> "],"mappings":";;;;;;;;;;;;;;;AAsFA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAU,QAAS,KAAK;AAC5E,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,SAAQ,QAAS,cAAc;AACxC,SAASC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAM,QAAS,yBAAyB;AAElF,SAASC,WAAU,IAAKC,cAAa,QAAS,gBAAgB;AAC9D,SAASC,cAAa,QAAS,4BAA4B;AAE3D,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACVL,OAAM,EAANA;EACF,CAAC;EACDM,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;MACtBC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,KAAK,WAALA,KAAKA,CAACP,KAAK,EAAAQ,IAAA,EAAY;IAAA,IAARC,IAAG,GAAAD,IAAA,CAAHC,IAAG;IAChB,IAAMC,KAAI,GAAItB,QAAQ,CAAC,CAAC;IACxB,IAAMuB,gBAAe,GAAI7B,GAAG,CAAC,IAAI,CAAC;IAClC,IAAM8B,WAAU,GAAI9B,GAAG,CAAC,EAAE,CAAC;IAC3B,IAAM+B,YAAW,GAAI/B,GAAG,CAAC,IAAI,CAAC;IAC9B,IAAMgC,SAAQ,GAAIhC,GAAG,CAAC,KAAK,CAAC;IAC5B,IAAMiC,OAAM,GAAIjC,GAAG,CAAC,IAAI,CAAC;IACzB,IAAMkC,WAAU,GAAIlC,GAAG,CAAC,KAAK,CAAC;IAC9B,IAAMmC,cAAa,GAAInC,GAAG,CAAC,KAAK,CAAC;IACjC,IAAMoC,YAAW,GAAIpC,GAAG,CAAC,EAAE,CAAC;IAC5B,IAAMqC,UAAS,GAAIrC,GAAG,CAAC,CAAC,CAAC;IACzB,IAAMsC,WAAU,GAAI,CAAC;;IAErB;IACA,IAAMC,WAAU,GAAItC,QAAQ,CAAC;MAAA,OAAM2B,KAAK,CAACY,KAAK,CAACC,IAAI;IAAA,EAAC;IACpD,IAAMC,aAAY,GAAIzC,QAAQ,CAAC;MAAA,OAAM2B,KAAK,CAACe,OAAO,CAACxB,MAAM;IAAA,EAAC;IAC1D,IAAMyB,QAAO,GAAI3C,QAAQ,CAAC;MAAA,OAAM2B,KAAK,CAACe,OAAO,CAAC,uBAAuB,CAAC,CAACzB,KAAK,CAACC,MAAM,KAAK,EAAE;IAAA,EAAC;IAC3F,IAAM0B,eAAc,GAAI5C,QAAQ,CAAC;MAAA,OAAM2B,KAAK,CAACe,OAAO,CAAC,sBAAsB,CAAC,CAACzB,KAAK,CAACC,MAAM,CAAC;IAAA,EAAC;;IAE3F;IACA,IAAM2B,QAAO,GAAI7C,QAAQ,CAAC,YAAM;MAC9B;MACA,IAAM8C,QAAO,GAAInB,KAAK,CAACe,OAAO,CAAC,mBAAmB,CAAC,CAACzB,KAAK,CAACC,MAAM,CAAC;;MAEjE;MACA,IAAI,CAAC4B,QAAQ,EAAE;QACbC,aAAa,CAAC,CAAC;MACjB;MAEA,OAAO;QACLC,EAAE,EAAE/B,KAAK,CAACC,MAAM;QAChB+B,QAAQ,EAAE,CAAAH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,QAAO,oBAAAC,MAAA,CAAUjC,KAAK,CAACC,MAAM,CAAE;QACnDiC,QAAQ,EAAE,CAAAL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,QAAO,MAAKL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,QAAO,oBAAAC,MAAA,CAAUjC,KAAK,CAACC,MAAM,CAAE;QACzEkC,UAAU,EAAE,CAAAN,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,UAAS,KAAKtC;MACtC,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAMuC,cAAa,GAAIrD,QAAQ,CAAC,YAAM;MACpC,OAAOsD,kBAAA,CAAIX,QAAQ,CAACY,KAAK,EAAEC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;QACxC,OAAO,IAAIC,IAAI,CAACF,CAAC,CAACG,SAAS,IAAI,IAAID,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA3D,KAAK,CAACoD,cAAc,EAAE,YAAM;MAC1BnD,QAAQ,CAAC,YAAM;QACb2D,cAAc,CAAC,CAAC;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAMd,aAAY;MAAA,IAAAe,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEZ5C,KAAK,CAAC6C,QAAQ,CAAC,qBAAqB,EAAEvD,KAAK,CAACC,MAAM,CAAC;YAAA;cAAAmD,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAI,EAAA,GAAAJ,QAAA;cAEzDK,OAAO,CAACC,KAAK,CAAC,WAAW,EAAAN,QAAA,CAAAI,EAAO,CAAC;YAAA;YAAA;cAAA,OAAAJ,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CAEpC;MAAA,gBANKnB,aAAYA,CAAA;QAAA,OAAAe,KAAA,CAAAe,KAAA,OAAAC,SAAA;MAAA;IAAA,GAMjB;;IAED;IACA3E,SAAS,cAAA4D,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAc,SAAA;MAAA,OAAAf,mBAAA,GAAAG,IAAA,UAAAa,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAX,IAAA,GAAAW,SAAA,CAAAV,IAAA;UAAA;YAAAU,SAAA,CAAAV,IAAA;YAAA,OAEFxB,aAAa,CAAC,CAAC;UAAA;YAAAkC,SAAA,CAAAV,IAAA;YAAA,OAGfW,YAAY,CAAC,CAAC;UAAA;YAEpB;YACAvD,KAAK,CAAC6C,QAAQ,CAAC,yBAAyB,EAAEvD,KAAK,CAACC,MAAM,CAAC;;YAEvD;YACAiE,mBAAmB,CAAC,CAAC;;YAErB;YACAjF,QAAQ,CAAC,YAAM;cACb,IAAI4B,YAAY,CAACyB,KAAK,EAAE;gBACtBzB,YAAY,CAACyB,KAAK,CAAC6B,KAAK,CAAC,CAAC;cAC5B;YACF,CAAC,CAAC;UAAA;UAAA;YAAA,OAAAH,SAAA,CAAAL,IAAA;QAAA;MAAA,GAAAG,QAAA;IAAA,CACH,GAAC;;IAEF;IACA3E,WAAW,CAAC,YAAM;MAChBiF,kBAAkB,CAAC,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,IAAMH,YAAW;MAAA,IAAAI,KAAA,GAAAvB,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAsB,SAAA;QAAA,OAAAvB,mBAAA,GAAAG,IAAA,UAAAqB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAnB,IAAA,GAAAmB,SAAA,CAAAlB,IAAA;YAAA;cACnBvC,OAAO,CAACuB,KAAI,GAAI,IAAI;cAAAkC,SAAA,CAAAnB,IAAA;cAAAmB,SAAA,CAAAlB,IAAA;cAAA,OAEZ5C,KAAK,CAAC6C,QAAQ,CAAC,4BAA4B,EAAE;gBACjDtD,MAAM,EAAED,KAAK,CAACC,MAAM;gBACpBwE,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAEF;cACAxF,QAAQ,CAAC,YAAM;gBACb2D,cAAc,CAAC,CAAC;cAClB,CAAC,CAAC;cAAA4B,SAAA,CAAAlB,IAAA;cAAA;YAAA;cAAAkB,SAAA,CAAAnB,IAAA;cAAAmB,SAAA,CAAAhB,EAAA,GAAAgB,SAAA;cAEFf,OAAO,CAACC,KAAK,CAAC,SAAS,EAAAc,SAAA,CAAAhB,EAAO,CAAC;cAC/BnE,SAAS,CAACqE,KAAK,CAAC,cAAc,CAAC;YAAA;cAAAc,SAAA,CAAAnB,IAAA;cAE/BtC,OAAO,CAACuB,KAAI,GAAI,KAAK;cAAA,OAAAkC,SAAA,CAAAE,MAAA;YAAA;YAAA;cAAA,OAAAF,SAAA,CAAAb,IAAA;UAAA;QAAA,GAAAW,QAAA;MAAA,CAExB;MAAA,gBAlBKL,YAAWA,CAAA;QAAA,OAAAI,KAAA,CAAAT,KAAA,OAAAC,SAAA;MAAA;IAAA,GAkBhB;;IAED;IACA,IAAMc,gBAAe;MAAA,IAAAC,KAAA,GAAA9B,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAA6B,SAAA;QAAA,OAAA9B,mBAAA,GAAAG,IAAA,UAAA4B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1B,IAAA,GAAA0B,SAAA,CAAAzB,IAAA;YAAA;cAAA,MACnBtC,WAAW,CAACsB,KAAI,IAAK,CAACX,eAAe,CAACW,KAAK;gBAAAyC,SAAA,CAAAzB,IAAA;gBAAA;cAAA;cAAA,OAAAyB,SAAA,CAAAC,MAAA;YAAA;cAE/ChE,WAAW,CAACsB,KAAI,GAAI,IAAI;cAAAyC,SAAA,CAAA1B,IAAA;cAAA0B,SAAA,CAAAzB,IAAA;cAAA,OAEhB5C,KAAK,CAAC6C,QAAQ,CAAC,uBAAuB,EAAEvD,KAAK,CAACC,MAAM,CAAC;YAAA;cAAA8E,SAAA,CAAAzB,IAAA;cAAA;YAAA;cAAAyB,SAAA,CAAA1B,IAAA;cAAA0B,SAAA,CAAAvB,EAAA,GAAAuB,SAAA;cAE3DtB,OAAO,CAACC,KAAK,CAAC,WAAW,EAAAqB,SAAA,CAAAvB,EAAO,CAAC;cACjCnE,SAAS,CAACqE,KAAK,CAAC,gBAAgB,CAAC;YAAA;cAAAqB,SAAA,CAAA1B,IAAA;cAEjCrC,WAAW,CAACsB,KAAI,GAAI,KAAK;cAAA,OAAAyC,SAAA,CAAAL,MAAA;YAAA;YAAA;cAAA,OAAAK,SAAA,CAAApB,IAAA;UAAA;QAAA,GAAAkB,QAAA;MAAA,CAE5B;MAAA,gBAZKF,gBAAeA,CAAA;QAAA,OAAAC,KAAA,CAAAhB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAYpB;;IAED;IACA,IAAMlE,WAAU;MAAA,IAAAsF,KAAA,GAAAnC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAkC,SAAA;QAAA,IAAAC,OAAA,EAAAC,aAAA;QAAA,OAAArC,mBAAA,GAAAG,IAAA,UAAAmC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAjC,IAAA,GAAAiC,SAAA,CAAAhC,IAAA;YAAA;cACZ6B,OAAM,GAAIvE,WAAW,CAAC0B,KAAK,CAACiD,IAAI,CAAC,CAAC;cAAA,MACpC,CAACJ,OAAM,IAAKlE,cAAc,CAACqB,KAAK;gBAAAgD,SAAA,CAAAhC,IAAA;gBAAA;cAAA;cAAA,OAAAgC,SAAA,CAAAN,MAAA;YAAA;cAEpC/D,cAAc,CAACqB,KAAI,GAAI,IAAI;cAAAgD,SAAA,CAAAjC,IAAA;cAGzB;cACM+B,aAAY,GAAID,OAAO;cAC7BvE,WAAW,CAAC0B,KAAI,GAAI,EAAE;;cAEtB;cACArD,QAAQ,CAAC,YAAM;gBACb,IAAI4B,YAAY,CAACyB,KAAK,EAAE;kBACtBzB,YAAY,CAACyB,KAAK,CAAC6B,KAAK,CAAC,CAAC;gBAC5B;cACF,CAAC,CAAC;;cAEF;cACAqB,SAAS,CAACC,eAAe,CAACzF,KAAK,CAACC,MAAM,EAAEmF,aAAa,CAAC;;cAEtD;cAAAE,SAAA,CAAAjC,IAAA;cAAAiC,SAAA,CAAAhC,IAAA;cAAA,OAEQ1D,cAAc,CAACI,KAAK,CAACC,MAAM,EAAEmF,aAAa,CAAC;YAAA;cAAAE,SAAA,CAAAhC,IAAA;cAAA;YAAA;cAAAgC,SAAA,CAAAjC,IAAA;cAAAiC,SAAA,CAAA9B,EAAA,GAAA8B,SAAA;cAEjD7B,OAAO,CAACC,KAAK,CAAC,cAAc,EAAA4B,SAAA,CAAA9B,EAAO,CAAC;cACpC;cACAtC,YAAY,CAACoB,KAAK,CAACoD,IAAI,CAACN,aAAa,CAAC;cACtC;cACAO,oBAAmB,CAAC,CAAC;YAAA;cAAAL,SAAA,CAAAhC,IAAA;cAAA;YAAA;cAAAgC,SAAA,CAAAjC,IAAA;cAAAiC,SAAA,CAAAM,EAAA,GAAAN,SAAA;cAGvB7B,OAAO,CAACC,KAAK,CAAC,SAAS,EAAA4B,SAAA,CAAAM,EAAO,CAAC;cAC/BvG,SAAS,CAACqE,KAAK,CAAC,cAAc,CAAC;YAAA;cAAA4B,SAAA,CAAAjC,IAAA;cAE/BpC,cAAc,CAACqB,KAAI,GAAI,KAAK;cAAA,OAAAgD,SAAA,CAAAZ,MAAA;YAAA;YAAA;cAAA,OAAAY,SAAA,CAAA3B,IAAA;UAAA;QAAA,GAAAuB,QAAA;MAAA,CAE/B;MAAA,gBArCKvF,WAAUA,CAAA;QAAA,OAAAsF,KAAA,CAAArB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAqCf;;IAED;IACA,IAAM8B,oBAAkB;MAAA,IAAAE,KAAA,GAAA/C,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAA8C,SAAA;QAAA,OAAA/C,mBAAA,GAAAG,IAAA,UAAA6C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA3C,IAAA,GAAA2C,SAAA,CAAA1C,IAAA;YAAA;cAAA,MACtBnC,UAAU,CAACmB,KAAI,IAAKlB,WAAU,IAAKF,YAAY,CAACoB,KAAK,CAAC2D,MAAK,KAAM,CAAC;gBAAAD,SAAA,CAAA1C,IAAA;gBAAA;cAAA;cACpE,IAAInC,UAAU,CAACmB,KAAI,IAAKlB,WAAW,EAAE;gBACnC/B,SAAS,CAACqE,KAAK,CAAC,gBAAgB,CAAC;gBACjCvC,UAAU,CAACmB,KAAI,GAAI,CAAC;cACtB;cAAA,OAAA0D,SAAA,CAAAhB,MAAA;YAAA;cAIF7D,UAAU,CAACmB,KAAK,EAAE;;cAElB;cACA4D,UAAU,cAAApD,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAmD,SAAA;gBAAA,IAAAC,eAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,OAAA;gBAAA,OAAAxD,mBAAA,GAAAG,IAAA,UAAAsD,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAApD,IAAA,GAAAoD,SAAA,CAAAnD,IAAA;oBAAA;sBACH8C,eAAc,GAAA/D,kBAAA,CAAQnB,YAAY,CAACoB,KAAK;sBAC9CpB,YAAY,CAACoB,KAAI,GAAI,EAAE;sBAAA+D,SAAA,GAAAK,0BAAA,CAEDN,eAAe;sBAAAK,SAAA,CAAApD,IAAA;sBAAAgD,SAAA,CAAAM,CAAA;oBAAA;sBAAA,KAAAL,KAAA,GAAAD,SAAA,CAAAO,CAAA,IAAAC,IAAA;wBAAAJ,SAAA,CAAAnD,IAAA;wBAAA;sBAAA;sBAA1BiD,OAAM,GAAAD,KAAA,CAAAhE,KAAA;sBAAAmE,SAAA,CAAApD,IAAA;sBAAAoD,SAAA,CAAAnD,IAAA;sBAAA,OAEP1D,cAAc,CAACI,KAAK,CAACC,MAAM,EAAEsG,OAAO,CAAC;oBAAA;sBAAAE,SAAA,CAAAnD,IAAA;sBAAA;oBAAA;sBAAAmD,SAAA,CAAApD,IAAA;sBAAAoD,SAAA,CAAAjD,EAAA,GAAAiD,SAAA;sBAE3ChD,OAAO,CAACC,KAAK,CAAC,WAAW,EAAA+C,SAAA,CAAAjD,EAAO,CAAC;sBACjCtC,YAAY,CAACoB,KAAK,CAACoD,IAAI,CAACa,OAAO,CAAC;oBAAA;sBAAAE,SAAA,CAAAnD,IAAA;sBAAA;oBAAA;sBAAAmD,SAAA,CAAAnD,IAAA;sBAAA;oBAAA;sBAAAmD,SAAA,CAAApD,IAAA;sBAAAoD,SAAA,CAAAb,EAAA,GAAAa,SAAA;sBAAAJ,SAAA,CAAAS,CAAA,CAAAL,SAAA,CAAAb,EAAA;oBAAA;sBAAAa,SAAA,CAAApD,IAAA;sBAAAgD,SAAA,CAAAU,CAAA;sBAAA,OAAAN,SAAA,CAAA/B,MAAA;oBAAA;sBAIpC;sBACA,IAAIxD,YAAY,CAACoB,KAAK,CAAC2D,MAAK,GAAI,CAAC,EAAE;wBACjCN,oBAAmB,CAAC,CAAC;sBACvB,OAAO;wBACLxE,UAAU,CAACmB,KAAI,GAAI,CAAC;sBACtB;oBAAA;oBAAA;sBAAA,OAAAmE,SAAA,CAAA9C,IAAA;kBAAA;gBAAA,GAAAwC,QAAA;cAAA,CACD,IAAE,IAAG,GAAIhF,UAAU,CAACmB,KAAK,CAAC;YAAA;YAAA;cAAA,OAAA0D,SAAA,CAAArC,IAAA;UAAA;QAAA,GAAAmC,QAAA;MAAA,CAC5B;MAAA,gBAhCKH,mBAAkBA,CAAA;QAAA,OAAAE,KAAA,CAAAjC,KAAA,OAAAC,SAAA;MAAA;IAAA,GAgCvB;;IAED;IACA,IAAMjB,cAAa,GAAI,SAAjBA,cAAaA,CAAA,EAAU;MAC3B,IAAIjC,gBAAgB,CAAC2B,KAAK,EAAE;QAC1B3B,gBAAgB,CAAC2B,KAAK,CAAC0E,SAAQ,GAAIrG,gBAAgB,CAAC2B,KAAK,CAAC2E,YAAY;MACxE;IACF,CAAC;;IAED;IACA,IAAMC,QAAO,GAAI,SAAXA,QAAOA,CAAKJ,CAAC,EAAK;MACtB,IAAIA,CAAC,EAAEA,CAAC,CAACK,eAAe,CAAC,CAAC;MAC1BrG,SAAS,CAACwB,KAAI,GAAI,IAAI;IACxB,CAAC;;IAED;IACA,IAAM8E,QAAO,GAAI,SAAXA,QAAOA,CAAKN,CAAC,EAAK;MACtB,IAAIA,CAAC,EAAEA,CAAC,CAACK,eAAe,CAAC,CAAC;MAC1BrG,SAAS,CAACwB,KAAI,GAAI,KAAK;MACvB;MACArD,QAAQ,CAAC,YAAM;QACb2D,cAAc,CAAC,CAAC;QAChB;QACA,IAAI/B,YAAY,CAACyB,KAAK,EAAE;UACtBzB,YAAY,CAACyB,KAAK,CAAC6B,KAAK,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,IAAMkD,cAAa,GAAI,SAAjBA,cAAaA,CAAA,EAAU;MAC3BvG,SAAS,CAACwB,KAAI,GAAI,CAACxB,SAAS,CAACwB,KAAK;MAClC,IAAI,CAACxB,SAAS,CAACwB,KAAK,EAAE;QACpBrD,QAAQ,CAAC,YAAM;UACb2D,cAAc,CAAC,CAAC;UAChB;UACA,IAAI/B,YAAY,CAACyB,KAAK,EAAE;YACtBzB,YAAY,CAACyB,KAAK,CAAC6B,KAAK,CAAC,CAAC;UAC5B;QACF,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACA,IAAMmD,SAAQ,GAAI,SAAZA,SAAQA,CAAA,EAAU;MACtB7G,IAAI,CAAC,OAAO,EAAET,KAAK,CAACC,MAAM,CAAC;IAC7B,CAAC;;IAED;IACA,IAAMsH,UAAS,GAAI,SAAbA,UAASA,CAAK5E,SAAS,EAAK;MAChC,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;;MAEzB;MACA,IAAM6E,IAAG,GAAI,IAAI9E,IAAI,CAACC,SAAS,CAAC;MAChC,IAAI8E,KAAK,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QACzBjE,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEf,SAAS,CAAC;QAC9C,OAAO,EAAE;MACX;MAEA,IAAMgF,GAAE,GAAI,IAAIjF,IAAI,CAAC,CAAC;MACtB,IAAMkF,OAAM,GAAIJ,IAAI,CAACK,YAAY,CAAC,MAAMF,GAAG,CAACE,YAAY,CAAC,CAAC;MAC1D,IAAMC,WAAU,GAAI,IAAIpF,IAAI,CAACiF,GAAE,GAAI,QAAQ,CAAC,CAACE,YAAY,CAAC,MAAML,IAAI,CAACK,YAAY,CAAC,CAAC;;MAEnF;MACA,IAAME,KAAI,GAAIP,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACzD,IAAMC,OAAM,GAAIX,IAAI,CAACY,UAAU,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC7D,IAAMG,OAAM,MAAApG,MAAA,CAAO8F,KAAK,OAAA9F,MAAA,CAAIkG,OAAO,CAAE;;MAErC;MACA,IAAIP,OAAO,EAAE;QACX,OAAOS,OAAO;MAChB;;MAEA;MACA,IAAIP,WAAW,EAAE;QACf,uBAAA7F,MAAA,CAAaoG,OAAO;MACtB;;MAEA;MACA,IAAIb,IAAI,CAACc,WAAW,CAAC,MAAMX,GAAG,CAACW,WAAW,CAAC,CAAC,EAAE;QAC5C,IAAMC,KAAI,GAAI,CAACf,IAAI,CAACgB,QAAQ,CAAC,IAAI,CAAC,EAAEP,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;QAC/D,IAAMO,GAAE,GAAIjB,IAAI,CAACkB,OAAO,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;QACtD,UAAAjG,MAAA,CAAUsG,KAAK,OAAAtG,MAAA,CAAIwG,GAAG,OAAAxG,MAAA,CAAIoG,OAAO;MACnC;;MAEA;MACA,UAAApG,MAAA,CAAUuF,IAAI,CAACc,WAAW,CAAC,CAAC,OAAArG,MAAA,CAAI,CAACuF,IAAI,CAACgB,QAAQ,CAAC,IAAI,CAAC,EAAEP,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,OAAAjG,MAAA,CAAIuF,IAAI,CAACkB,OAAO,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,OAAAjG,MAAA,CAAIoG,OAAO;IAC5I,CAAC;;IAED;IACA,IAAMM,iBAAgB,GAAI,SAApBA,iBAAgBA,CAAK7B,CAAC,EAAK;MAC/B,IAAM8B,GAAE,GAAI9B,CAAC,CAAC+B,MAAM;MACpBD,GAAG,CAACE,GAAE,GAAIjJ,cAAc;IAC1B,CAAC;IAED,OAAO;MACLc,gBAAgB,EAAhBA,gBAAgB;MAChBC,WAAW,EAAXA,WAAW;MACXC,YAAY,EAAZA,YAAY;MACZC,SAAS,EAATA,SAAS;MACTC,OAAO,EAAPA,OAAO;MACPC,WAAW,EAAXA,WAAW;MACXK,WAAW,EAAXA,WAAW;MACXG,aAAa,EAAbA,aAAa;MACbE,QAAQ,EAARA,QAAQ;MACRU,cAAc,EAAdA,cAAc;MACdT,eAAe,EAAfA,eAAe;MACfC,QAAQ,EAARA,QAAQ;MACRqC,YAAY,EAAZA,YAAY;MACZU,gBAAgB,EAAhBA,gBAAgB;MAChBhF,WAAW,EAAXA,WAAW;MACXuH,QAAQ,EAARA,QAAQ;MACRE,QAAQ,EAARA,QAAQ;MACRC,cAAc,EAAdA,cAAc;MACdC,SAAS,EAATA,SAAS;MACTC,UAAU,EAAVA,UAAU;MACVoB,iBAAiB,EAAjBA,iBAAiB;MACjB9I,cAAc,EAAdA,cAAc;MACd;MACAP,KAAK,EAALA,KAAK;MACLC,KAAK,EAALA,KAAK;MACLC,OAAO,EAAPA,OAAO;MACPC,QAAQ,EAARA,QAAQ;MACRC,OAAM,EAANA;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}