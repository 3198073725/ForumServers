{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { Close, Send, Check, Loading } from '@element-plus/icons-vue';\nimport webSocketManager from '@/utils/websocket';\nexport default {\n  name: 'ChatWindow',\n  props: {\n    userId: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var store = useStore();\n    var messagesContainer = ref(null);\n    var messageInput = ref('');\n    var loading = ref(true);\n    var loadingMore = ref(false);\n\n    // 获取聊天消息\n    var messages = computed(function () {\n      return store.getters.getChatMessages(props.userId);\n    });\n\n    // 获取分页信息\n    var pageInfo = computed(function () {\n      return store.getters.getChatHistoryPage(props.userId);\n    });\n\n    // 是否有更多消息\n    var hasMore = computed(function () {\n      return pageInfo.value.hasMore;\n    });\n\n    // 当前用户信息\n    var currentUser = computed(function () {\n      return store.state.user;\n    });\n\n    // 聊天对象信息（这里应该从用户缓存中获取，简化实现）\n    var chatUser = computed(function () {\n      // 实际应用中应该从用户列表或API获取\n      return {\n        id: props.userId,\n        username: \"\\u7528\\u6237\".concat(props.userId),\n        nickname: null,\n        avatar_url: null\n      };\n    });\n\n    // 初始化聊天\n    var initChat = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              loading.value = true;\n              _context.prev = 1;\n              // 设置当前聊天用户ID\n              store.commit('setCurrentChatUserId', props.userId);\n\n              // 初始化WebSocket连接\n              webSocketManager.initChatSocket(props.userId);\n\n              // 加载聊天历史\n              webSocketManager.loadChatHistory(props.userId);\n\n              // 标记消息为已读\n              _context.next = 7;\n              return store.dispatch('markChatMessagesRead', props.userId);\n            case 7:\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('初始化聊天失败:', _context.t0);\n            case 12:\n              _context.prev = 12;\n              loading.value = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 9, 12, 15]]);\n      }));\n      return function initChat() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 加载更多消息\n    var loadMoreMessages = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var nextPage;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(loadingMore.value || !hasMore.value)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              loadingMore.value = true;\n              try {\n                nextPage = pageInfo.value.page + 1;\n                webSocketManager.loadChatHistory(props.userId, nextPage);\n              } catch (error) {\n                console.error('加载更多消息失败:', error);\n              } finally {\n                loadingMore.value = false;\n              }\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function loadMoreMessages() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 发送消息\n    var sendMessage = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var content;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              content = messageInput.value.trim();\n              if (content) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              try {\n                // 使用WebSocket发送消息\n                webSocketManager.sendChatMessage(props.userId, content);\n\n                // 清空输入框\n                messageInput.value = '';\n\n                // 滚动到底部\n                scrollToBottom();\n              } catch (error) {\n                console.error('发送消息失败:', error);\n              }\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function sendMessage() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 关闭聊天窗口\n    var closeChat = function closeChat() {\n      emit('close');\n    };\n\n    // 滚动到底部\n    var scrollToBottom = function scrollToBottom() {\n      setTimeout(function () {\n        if (messagesContainer.value) {\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n        }\n      }, 50);\n    };\n\n    // 判断是否显示日期分隔线\n    var shouldShowDateDivider = function shouldShowDateDivider(message, index) {\n      if (index === 0) return true;\n      var prevMessage = messages.value[index - 1];\n      var prevDate = new Date(prevMessage.timestamp).toLocaleDateString();\n      var currentDate = new Date(message.timestamp).toLocaleDateString();\n      return prevDate !== currentDate;\n    };\n\n    // 格式化日期\n    var formatDate = function formatDate(timestamp) {\n      var date = new Date(timestamp);\n      return date.toLocaleDateString();\n    };\n\n    // 格式化时间\n    var formatTime = function formatTime(timestamp) {\n      var date = new Date(timestamp);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 监听消息变化，自动滚动到底部\n    watch(messages, function () {\n      scrollToBottom();\n    });\n    onMounted(function () {\n      initChat();\n    });\n    onUnmounted(function () {\n      // 清除当前聊天用户ID\n      store.commit('setCurrentChatUserId', null);\n    });\n    return {\n      messagesContainer: messagesContainer,\n      messageInput: messageInput,\n      messages: messages,\n      loading: loading,\n      loadingMore: loadingMore,\n      hasMore: hasMore,\n      currentUser: currentUser,\n      chatUser: chatUser,\n      sendMessage: sendMessage,\n      closeChat: closeChat,\n      loadMoreMessages: loadMoreMessages,\n      shouldShowDateDivider: shouldShowDateDivider,\n      formatDate: formatDate,\n      formatTime: formatTime,\n      // 图标\n      Close: Close,\n      Send: Send,\n      Check: Check,\n      Loading: Loading\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","onUnmounted","ref","watch","useStore","Close","Send","Check","Loading","webSocketManager","name","props","userId","type","Number","String","required","emits","setup","_ref","emit","store","messagesContainer","messageInput","loading","loadingMore","messages","getters","getChatMessages","pageInfo","getChatHistoryPage","hasMore","value","currentUser","state","user","chatUser","id","username","concat","nickname","avatar_url","initChat","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","commit","initChatSocket","loadChatHistory","dispatch","t0","console","error","finish","stop","apply","arguments","loadMoreMessages","_ref3","_callee2","nextPage","_callee2$","_context2","abrupt","page","sendMessage","_ref4","_callee3","content","_callee3$","_context3","trim","sendChatMessage","scrollToBottom","closeChat","setTimeout","scrollTop","scrollHeight","shouldShowDateDivider","message","index","prevMessage","prevDate","Date","timestamp","toLocaleDateString","currentDate","formatDate","date","formatTime","toLocaleTimeString","hour","minute"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\components\\ChatWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-window\">\r\n    <!-- 聊天窗口头部 -->\r\n    <div class=\"chat-header\">\r\n      <div class=\"user-info\">\r\n        <UserAvatar :user=\"chatUser\" size=\"small\" />\r\n        <div class=\"user-name\">{{ chatUser.nickname || chatUser.username }}</div>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <el-button :icon=\"Close\" circle @click=\"closeChat\" />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 聊天消息区域 -->\r\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n      <div v-if=\"loading\" class=\"chat-loading\">\r\n        <el-icon class=\"is-loading\"><Loading /></el-icon>\r\n        <span>加载中...</span>\r\n      </div>\r\n      \r\n      <div v-if=\"hasMore\" class=\"load-more\">\r\n        <el-button type=\"text\" @click=\"loadMoreMessages\" :loading=\"loadingMore\">\r\n          加载更多消息\r\n        </el-button>\r\n      </div>\r\n      \r\n      <div v-for=\"(message, index) in messages\" :key=\"message.id\">\r\n        <!-- 日期分隔线 -->\r\n        <div v-if=\"shouldShowDateDivider(message, index)\" class=\"date-divider\">\r\n          <span>{{ formatDate(message.timestamp) }}</span>\r\n        </div>\r\n        \r\n        <!-- 消息气泡 -->\r\n        <div \r\n          class=\"message-bubble\" \r\n          :class=\"{ \r\n            'outgoing': message.isOutgoing, \r\n            'incoming': !message.isOutgoing \r\n          }\"\r\n        >\r\n          <UserAvatar \r\n            v-if=\"!message.isOutgoing\" \r\n            :user=\"chatUser\" \r\n            size=\"small\" \r\n            class=\"avatar\"\r\n          />\r\n          \r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\">{{ message.content }}</div>\r\n            <div class=\"message-time\">\r\n              {{ formatTime(message.timestamp) }}\r\n              <el-icon v-if=\"message.isOutgoing && message.isRead\" class=\"read-status\"><Check /></el-icon>\r\n            </div>\r\n          </div>\r\n          \r\n          <UserAvatar \r\n            v-if=\"message.isOutgoing\" \r\n            :user=\"currentUser\" \r\n            size=\"small\" \r\n            class=\"avatar\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div v-if=\"messages.length === 0 && !loading\" class=\"empty-chat\">\r\n        <el-empty description=\"暂无消息记录\" />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 消息输入区域 -->\r\n    <div class=\"chat-input\">\r\n      <el-input\r\n        v-model=\"messageInput\"\r\n        type=\"textarea\"\r\n        :rows=\"2\"\r\n        placeholder=\"输入消息...\"\r\n        resize=\"none\"\r\n        @keydown.enter.prevent=\"sendMessage\"\r\n      />\r\n      <el-button \r\n        type=\"primary\" \r\n        :icon=\"Send\" \r\n        :disabled=\"!messageInput.trim()\" \r\n        @click=\"sendMessage\"\r\n      >\r\n        发送\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { Close, Send, Check, Loading } from '@element-plus/icons-vue'\r\nimport webSocketManager from '@/utils/websocket'\r\n\r\nexport default {\r\n  name: 'ChatWindow',\r\n  props: {\r\n    userId: {\r\n      type: [Number, String],\r\n      required: true\r\n    }\r\n  },\r\n  emits: ['close'],\r\n  setup(props, { emit }) {\r\n    const store = useStore()\r\n    const messagesContainer = ref(null)\r\n    const messageInput = ref('')\r\n    const loading = ref(true)\r\n    const loadingMore = ref(false)\r\n    \r\n    // 获取聊天消息\r\n    const messages = computed(() => {\r\n      return store.getters.getChatMessages(props.userId)\r\n    })\r\n    \r\n    // 获取分页信息\r\n    const pageInfo = computed(() => {\r\n      return store.getters.getChatHistoryPage(props.userId)\r\n    })\r\n    \r\n    // 是否有更多消息\r\n    const hasMore = computed(() => pageInfo.value.hasMore)\r\n    \r\n    // 当前用户信息\r\n    const currentUser = computed(() => store.state.user)\r\n    \r\n    // 聊天对象信息（这里应该从用户缓存中获取，简化实现）\r\n    const chatUser = computed(() => {\r\n      // 实际应用中应该从用户列表或API获取\r\n      return {\r\n        id: props.userId,\r\n        username: `用户${props.userId}`,\r\n        nickname: null,\r\n        avatar_url: null\r\n      }\r\n    })\r\n    \r\n    // 初始化聊天\r\n    const initChat = async () => {\r\n      loading.value = true\r\n      \r\n      try {\r\n        // 设置当前聊天用户ID\r\n        store.commit('setCurrentChatUserId', props.userId)\r\n        \r\n        // 初始化WebSocket连接\r\n        webSocketManager.initChatSocket(props.userId)\r\n        \r\n        // 加载聊天历史\r\n        webSocketManager.loadChatHistory(props.userId)\r\n        \r\n        // 标记消息为已读\r\n        await store.dispatch('markChatMessagesRead', props.userId)\r\n      } catch (error) {\r\n        console.error('初始化聊天失败:', error)\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // 加载更多消息\r\n    const loadMoreMessages = async () => {\r\n      if (loadingMore.value || !hasMore.value) return\r\n      \r\n      loadingMore.value = true\r\n      \r\n      try {\r\n        const nextPage = pageInfo.value.page + 1\r\n        webSocketManager.loadChatHistory(props.userId, nextPage)\r\n      } catch (error) {\r\n        console.error('加载更多消息失败:', error)\r\n      } finally {\r\n        loadingMore.value = false\r\n      }\r\n    }\r\n    \r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      const content = messageInput.value.trim()\r\n      if (!content) return\r\n      \r\n      try {\r\n        // 使用WebSocket发送消息\r\n        webSocketManager.sendChatMessage(props.userId, content)\r\n        \r\n        // 清空输入框\r\n        messageInput.value = ''\r\n        \r\n        // 滚动到底部\r\n        scrollToBottom()\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error)\r\n      }\r\n    }\r\n    \r\n    // 关闭聊天窗口\r\n    const closeChat = () => {\r\n      emit('close')\r\n    }\r\n    \r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      setTimeout(() => {\r\n        if (messagesContainer.value) {\r\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n        }\r\n      }, 50)\r\n    }\r\n    \r\n    // 判断是否显示日期分隔线\r\n    const shouldShowDateDivider = (message, index) => {\r\n      if (index === 0) return true\r\n      \r\n      const prevMessage = messages.value[index - 1]\r\n      const prevDate = new Date(prevMessage.timestamp).toLocaleDateString()\r\n      const currentDate = new Date(message.timestamp).toLocaleDateString()\r\n      \r\n      return prevDate !== currentDate\r\n    }\r\n    \r\n    // 格式化日期\r\n    const formatDate = (timestamp) => {\r\n      const date = new Date(timestamp)\r\n      return date.toLocaleDateString()\r\n    }\r\n    \r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp)\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    }\r\n    \r\n    // 监听消息变化，自动滚动到底部\r\n    watch(messages, () => {\r\n      scrollToBottom()\r\n    })\r\n    \r\n    onMounted(() => {\r\n      initChat()\r\n    })\r\n    \r\n    onUnmounted(() => {\r\n      // 清除当前聊天用户ID\r\n      store.commit('setCurrentChatUserId', null)\r\n    })\r\n    \r\n    return {\r\n      messagesContainer,\r\n      messageInput,\r\n      messages,\r\n      loading,\r\n      loadingMore,\r\n      hasMore,\r\n      currentUser,\r\n      chatUser,\r\n      sendMessage,\r\n      closeChat,\r\n      loadMoreMessages,\r\n      shouldShowDateDivider,\r\n      formatDate,\r\n      formatTime,\r\n      // 图标\r\n      Close,\r\n      Send,\r\n      Check,\r\n      Loading\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-window {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n  overflow: hidden;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 15px;\r\n  border-bottom: 1px solid #dcdfe6;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  margin-left: 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 15px;\r\n  overflow-y: auto;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.chat-loading, .empty-chat {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100px;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.load-more {\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.date-divider {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 15px 0;\r\n}\r\n\r\n.date-divider span {\r\n  background-color: #e4e7ed;\r\n  color: #909399;\r\n  font-size: 12px;\r\n  padding: 2px 10px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.message-bubble {\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n  max-width: 80%;\r\n}\r\n\r\n.message-bubble.outgoing {\r\n  margin-left: auto;\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-bubble.incoming {\r\n  margin-right: auto;\r\n}\r\n\r\n.avatar {\r\n  margin: 0 8px;\r\n  align-self: flex-end;\r\n}\r\n\r\n.message-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.outgoing .message-content {\r\n  background-color: #ecf5ff;\r\n  border-bottom-right-radius: 0;\r\n}\r\n\r\n.incoming .message-content {\r\n  background-color: #fff;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.message-text {\r\n  word-break: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.message-time {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  text-align: right;\r\n  margin-top: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.read-status {\r\n  margin-left: 5px;\r\n  font-size: 12px;\r\n  color: #409eff;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  padding: 10px;\r\n  border-top: 1px solid #dcdfe6;\r\n  background-color: #fff;\r\n}\r\n\r\n.chat-input .el-input {\r\n  margin-right: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}