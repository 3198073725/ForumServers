{"ast":null,"code":"import _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { formatDateTime } from '@/utils/index';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'UserManagement',\n  setup: function setup() {\n    var router = useRouter();\n    var store = useStore();\n\n    // 状态\n    var loading = ref(false);\n    var users = ref([]);\n    var total = ref(0);\n    var currentPage = ref(1);\n    var pageSize = ref(10);\n    var searchQuery = ref('');\n\n    // 当前用户ID\n    var currentUserId = computed(function () {\n      var _store$getters$userIn;\n      return (_store$getters$userIn = store.getters.userInfo) === null || _store$getters$userIn === void 0 ? void 0 : _store$getters$userIn.id;\n    });\n\n    // 编辑用户对话框\n    var editDialogVisible = ref(false);\n    var userForm = ref({\n      id: null,\n      username: '',\n      email: '',\n      nickname: '',\n      avatar_url: ''\n    });\n    var userRules = {\n      nickname: [{\n        max: 50,\n        message: '昵称不能超过50个字符',\n        trigger: 'blur'\n      }]\n    };\n\n    // 修改角色对话框\n    var roleDialogVisible = ref(false);\n    var currentUser = ref(null);\n    var roleForm = ref({\n      role: ''\n    });\n    var roleOptions = [{\n      value: 'user',\n      label: '普通用户'\n    }, {\n      value: 'moderator',\n      label: '版主'\n    }, {\n      value: 'admin',\n      label: '管理员'\n    }];\n    var submitting = ref(false);\n\n    // 获取用户列表\n    var fetchUsers = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              loading.value = true;\n              try {\n                // 这里应该调用实际的API\n                // const response = await getUserList({\n                //   page: currentPage.value,\n                //   page_size: pageSize.value,\n                //   search: searchQuery.value\n                // })\n                // if (response.code === 0) {\n                //   users.value = response.data.results || []\n                //   total.value = response.data.count || 0\n                // } else {\n                //   ElMessage.error(response.msg || '获取用户列表失败')\n                //   users.value = []\n                //   total.value = 0\n                // }\n\n                // 暂时使用空数组，等待后端API实现\n                setTimeout(function () {\n                  users.value = [];\n                  total.value = 0;\n                  loading.value = false;\n                  ElMessage.info('用户管理功能尚未实现，请等待后续更新');\n                }, 500);\n              } catch (error) {\n                console.error('获取用户列表失败:', error);\n                ElMessage.error('获取用户列表失败');\n                users.value = [];\n                total.value = 0;\n              } finally {\n                loading.value = false;\n              }\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function fetchUsers() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // 处理搜索\n    var handleSearch = function handleSearch() {\n      currentPage.value = 1;\n      fetchUsers();\n    };\n\n    // 处理页码变化\n    var handleCurrentChange = function handleCurrentChange(page) {\n      currentPage.value = page;\n      fetchUsers();\n    };\n\n    // 处理每页条数变化\n    var handleSizeChange = function handleSizeChange(size) {\n      pageSize.value = size;\n      currentPage.value = 1;\n      fetchUsers();\n    };\n\n    // 查看用户\n    var handleViewUser = function handleViewUser(user) {\n      router.push({\n        name: 'UserProfile',\n        params: {\n          id: user.id\n        }\n      });\n    };\n\n    // 编辑用户\n    var handleEditUser = function handleEditUser(user) {\n      userForm.value = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        nickname: user.nickname || '',\n        avatar_url: user.avatar_url || ''\n      };\n      editDialogVisible.value = true;\n    };\n\n    // 提交用户表单\n    var submitUserForm = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              submitting.value = true;\n              try {\n                // 这里应该调用实际的API\n                // const response = await updateUser(userForm.value.id, {\n                //   nickname: userForm.value.nickname,\n                //   avatar_url: userForm.value.avatar_url\n                // })\n                // if (response.code === 0) {\n                //   ElMessage.success(response.msg || '用户信息更新成功')\n                //   editDialogVisible.value = false\n                //   fetchUsers()\n                // } else {\n                //   ElMessage.error(response.msg || '用户信息更新失败')\n                // }\n\n                // 暂时使用提示信息\n                setTimeout(function () {\n                  ElMessage.info('用户编辑功能尚未实现，请等待后续更新');\n                  editDialogVisible.value = false;\n                  submitting.value = false;\n                }, 500);\n              } catch (error) {\n                console.error('用户信息更新失败:', error);\n                ElMessage.error('用户信息更新失败');\n              } finally {\n                submitting.value = false;\n              }\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function submitUserForm() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 修改角色\n    var handleChangeRole = function handleChangeRole(user) {\n      currentUser.value = user;\n      roleForm.value.role = user.role;\n      roleDialogVisible.value = true;\n    };\n\n    // 提交角色表单\n    var submitRoleForm = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (currentUser.value) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              submitting.value = true;\n              try {\n                // 模拟API调用\n                setTimeout(function () {\n                  var index = users.value.findIndex(function (u) {\n                    return u.id === currentUser.value.id;\n                  });\n                  if (index !== -1) {\n                    users.value[index] = _objectSpread(_objectSpread({}, users.value[index]), {}, {\n                      role: roleForm.value.role\n                    });\n                  }\n                  ElMessage.success('用户角色更新成功');\n                  roleDialogVisible.value = false;\n                  submitting.value = false;\n                }, 500);\n\n                // 实际API调用\n                // const response = await updateUserRole(currentUser.value.id, {\n                //   role: roleForm.value.role\n                // })\n                // if (response.code === 0) {\n                //   ElMessage.success(response.msg || '用户角色更新成功')\n                //   roleDialogVisible.value = false\n                //   fetchUsers()\n                // } else {\n                //   ElMessage.error(response.msg || '用户角色更新失败')\n                // }\n              } catch (error) {\n                console.error('用户角色更新失败:', error);\n                ElMessage.error('用户角色更新失败');\n              } finally {\n                submitting.value = false;\n              }\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function submitRoleForm() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 删除用户\n    var handleDeleteUser = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(user) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return ElMessageBox.confirm(\"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u7528\\u6237 \\\"\".concat(user.username, \"\\\" \\u5417\\uFF1F\\u6B64\\u64CD\\u4F5C\\u4E0D\\u53EF\\u9006\\uFF01\"), '警告', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n              });\n            case 3:\n              // 模拟API调用\n              setTimeout(function () {\n                users.value = users.value.filter(function (u) {\n                  return u.id !== user.id;\n                });\n                total.value = users.value.length;\n                ElMessage.success('用户删除成功');\n              }, 500);\n\n              // 实际API调用\n              // const response = await deleteUser(user.id)\n              // if (response.code === 0) {\n              //   ElMessage.success(response.msg || '用户删除成功')\n              //   fetchUsers()\n              // } else {\n              //   ElMessage.error(response.msg || '用户删除失败')\n              // }\n              _context4.next = 9;\n              break;\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (_context4.t0 !== 'cancel') {\n                console.error('用户删除失败:', _context4.t0);\n                ElMessage.error('用户删除失败');\n              }\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 6]]);\n      }));\n      return function handleDeleteUser(_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // 获取角色标签类型\n    var getRoleTagType = function getRoleTagType(role) {\n      switch (role) {\n        case 'admin':\n          return 'danger';\n        case 'moderator':\n          return 'warning';\n        case 'user':\n          return 'success';\n        default:\n          return 'info';\n      }\n    };\n\n    // 获取角色标签文本\n    var getRoleLabel = function getRoleLabel(role) {\n      switch (role) {\n        case 'admin':\n          return '管理员';\n        case 'moderator':\n          return '版主';\n        case 'user':\n          return '普通用户';\n        default:\n          return '未知';\n      }\n    };\n\n    // 生命周期钩子\n    onMounted(function () {\n      fetchUsers();\n    });\n    return {\n      loading: loading,\n      users: users,\n      total: total,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      searchQuery: searchQuery,\n      currentUserId: currentUserId,\n      editDialogVisible: editDialogVisible,\n      userForm: userForm,\n      userRules: userRules,\n      roleDialogVisible: roleDialogVisible,\n      currentUser: currentUser,\n      roleForm: roleForm,\n      roleOptions: roleOptions,\n      submitting: submitting,\n      formatDate: formatDate,\n      handleSearch: handleSearch,\n      handleCurrentChange: handleCurrentChange,\n      handleSizeChange: handleSizeChange,\n      handleViewUser: handleViewUser,\n      handleEditUser: handleEditUser,\n      submitUserForm: submitUserForm,\n      handleChangeRole: handleChangeRole,\n      submitRoleForm: submitRoleForm,\n      handleDeleteUser: handleDeleteUser,\n      getRoleTagType: getRoleTagType,\n      getRoleLabel: getRoleLabel\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRouter","useStore","ElMessage","ElMessageBox","formatDateTime","formatDate","date","name","setup","router","store","loading","users","total","currentPage","pageSize","searchQuery","currentUserId","_store$getters$userIn","getters","userInfo","id","editDialogVisible","userForm","username","email","nickname","avatar_url","userRules","max","message","trigger","roleDialogVisible","currentUser","roleForm","role","roleOptions","value","label","submitting","fetchUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","setTimeout","info","error","console","stop","apply","arguments","handleSearch","handleCurrentChange","page","handleSizeChange","size","handleViewUser","user","push","params","handleEditUser","submitUserForm","_ref2","_callee2","_callee2$","_context2","handleChangeRole","submitRoleForm","_ref3","_callee3","_callee3$","_context3","abrupt","index","findIndex","u","_objectSpread","success","handleDeleteUser","_ref4","_callee4","_callee4$","_context4","confirm","concat","confirmButtonText","cancelButtonText","type","filter","length","t0","_x","getRoleTagType","getRoleLabel"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\admin\\UserManagement.vue"],"sourcesContent":["<template>\n  <div class=\"user-management-container\">\n    <el-card class=\"user-management-card\">\n      <template #header>\n        <div class=\"clearfix\">\n          <span>用户管理</span>\n          <el-input\n            v-model=\"searchQuery\"\n            placeholder=\"搜索用户名或邮箱\"\n            style=\"width: 300px; float: right\"\n            clearable\n            @keyup.enter=\"handleSearch\"\n            @clear=\"handleSearch\"\n          >\n            <template #append>\n              <el-button icon=\"el-icon-search\" @click=\"handleSearch\"></el-button>\n            </template>\n          </el-input>\n        </div>\n      </template>\n\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <el-table\n          :data=\"users\"\n          style=\"width: 100%\"\n          border\n        >\n          <el-table-column\n            prop=\"id\"\n            label=\"ID\"\n            width=\"80\"\n            align=\"center\"\n          >\n          </el-table-column>\n\n          <el-table-column\n            prop=\"username\"\n            label=\"用户名\"\n            width=\"120\"\n          >\n          </el-table-column>\n\n          <el-table-column\n            prop=\"nickname\"\n            label=\"昵称\"\n            width=\"120\"\n          >\n            <template #default=\"scope\">\n              {{ scope.row.nickname || '-' }}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"email\"\n            label=\"邮箱\"\n            width=\"180\"\n          >\n          </el-table-column>\n\n          <el-table-column\n            prop=\"role\"\n            label=\"角色\"\n            width=\"100\"\n            align=\"center\"\n          >\n            <template #default=\"scope\">\n              <el-tag\n                :type=\"getRoleTagType(scope.row.role)\"\n              >\n                {{ getRoleLabel(scope.row.role) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"created_at\"\n            label=\"注册时间\"\n            width=\"180\"\n          >\n            <template #default=\"scope\">\n              {{ formatDate(scope.row.created_at) }}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"last_login\"\n            label=\"最后登录\"\n            width=\"180\"\n          >\n            <template #default=\"scope\">\n              {{ scope.row.last_login ? formatDate(scope.row.last_login) : '-' }}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            label=\"操作\"\n            align=\"center\"\n          >\n            <template #default=\"scope\">\n              <el-button\n                size=\"small\"\n                type=\"primary\"\n                @click=\"handleViewUser(scope.row)\"\n              >\n                查看\n              </el-button>\n              <el-button\n                size=\"small\"\n                type=\"success\"\n                @click=\"handleEditUser(scope.row)\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                size=\"small\"\n                type=\"warning\"\n                @click=\"handleChangeRole(scope.row)\"\n              >\n                角色\n              </el-button>\n              <el-button\n                size=\"small\"\n                type=\"danger\"\n                @click=\"handleDeleteUser(scope.row)\"\n                :disabled=\"scope.row.id === currentUserId\"\n              >\n                删除\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n\n        <!-- 分页 -->\n        <div class=\"pagination-container\">\n          <el-pagination\n            background\n            layout=\"total, sizes, prev, pager, next, jumper\"\n            :total=\"total\"\n            :page-sizes=\"[10, 20, 50, 100]\"\n            :page-size=\"pageSize\"\n            :current-page=\"currentPage\"\n            @size-change=\"handleSizeChange\"\n            @current-change=\"handleCurrentChange\"\n          >\n          </el-pagination>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 编辑用户对话框 -->\n    <el-dialog\n      title=\"编辑用户信息\"\n      :visible=\"editDialogVisible\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"userForm\"\n        :model=\"userForm\"\n        :rules=\"userRules\"\n        label-width=\"80px\"\n      >\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userForm.username\" disabled></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"userForm.email\" disabled></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"昵称\" prop=\"nickname\">\n          <el-input v-model=\"userForm.nickname\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"头像URL\" prop=\"avatar_url\">\n          <el-input v-model=\"userForm.avatar_url\"></el-input>\n          <div class=\"avatar-preview\">\n            <el-avatar :size=\"60\" :src=\"userForm.avatar_url || ''\">\n              {{ userForm.nickname?.charAt(0) || userForm.username?.charAt(0) || 'U' }}\n            </el-avatar>\n          </div>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitUserForm\" :loading=\"submitting\">确 定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 修改角色对话框 -->\n    <el-dialog\n      title=\"修改用户角色\"\n      :visible=\"roleDialogVisible\"\n      width=\"400px\"\n    >\n      <el-form\n        ref=\"roleForm\"\n        :model=\"roleForm\"\n        label-width=\"80px\"\n      >\n        <el-form-item label=\"用户名\">\n          <span>{{ currentUser?.username }}</span>\n        </el-form-item>\n\n        <el-form-item label=\"当前角色\">\n          <el-tag :type=\"getRoleTagType(currentUser?.role)\">\n            {{ getRoleLabel(currentUser?.role) }}\n          </el-tag>\n        </el-form-item>\n\n        <el-form-item label=\"新角色\" prop=\"role\">\n          <el-select v-model=\"roleForm.role\" placeholder=\"请选择角色\">\n            <el-option\n              v-for=\"item in roleOptions\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"roleDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitRoleForm\" :loading=\"submitting\">确 定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { formatDateTime } from '@/utils/index'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'UserManagement',\n  setup() {\n    const router = useRouter()\n    const store = useStore()\n\n    // 状态\n    const loading = ref(false)\n    const users = ref([])\n    const total = ref(0)\n    const currentPage = ref(1)\n    const pageSize = ref(10)\n    const searchQuery = ref('')\n\n    // 当前用户ID\n    const currentUserId = computed(() => store.getters.userInfo?.id)\n\n    // 编辑用户对话框\n    const editDialogVisible = ref(false)\n    const userForm = ref({\n      id: null,\n      username: '',\n      email: '',\n      nickname: '',\n      avatar_url: ''\n    })\n    const userRules = {\n      nickname: [\n        { max: 50, message: '昵称不能超过50个字符', trigger: 'blur' }\n      ]\n    }\n\n    // 修改角色对话框\n    const roleDialogVisible = ref(false)\n    const currentUser = ref(null)\n    const roleForm = ref({\n      role: ''\n    })\n    const roleOptions = [\n      { value: 'user', label: '普通用户' },\n      { value: 'moderator', label: '版主' },\n      { value: 'admin', label: '管理员' }\n    ]\n\n    const submitting = ref(false)\n\n    // 获取用户列表\n    const fetchUsers = async () => {\n      loading.value = true\n      try {\n        // 这里应该调用实际的API\n        // const response = await getUserList({\n        //   page: currentPage.value,\n        //   page_size: pageSize.value,\n        //   search: searchQuery.value\n        // })\n        // if (response.code === 0) {\n        //   users.value = response.data.results || []\n        //   total.value = response.data.count || 0\n        // } else {\n        //   ElMessage.error(response.msg || '获取用户列表失败')\n        //   users.value = []\n        //   total.value = 0\n        // }\n        \n        // 暂时使用空数组，等待后端API实现\n        setTimeout(() => {\n          users.value = []\n          total.value = 0\n          loading.value = false\n          ElMessage.info('用户管理功能尚未实现，请等待后续更新')\n        }, 500)\n      } catch (error) {\n        console.error('获取用户列表失败:', error)\n        ElMessage.error('获取用户列表失败')\n        users.value = []\n        total.value = 0\n      } finally {\n        loading.value = false\n      }\n    }\n\n    // 处理搜索\n    const handleSearch = () => {\n      currentPage.value = 1\n      fetchUsers()\n    }\n\n    // 处理页码变化\n    const handleCurrentChange = (page) => {\n      currentPage.value = page\n      fetchUsers()\n    }\n\n    // 处理每页条数变化\n    const handleSizeChange = (size) => {\n      pageSize.value = size\n      currentPage.value = 1\n      fetchUsers()\n    }\n\n    // 查看用户\n    const handleViewUser = (user) => {\n      router.push({ name: 'UserProfile', params: { id: user.id } })\n    }\n\n    // 编辑用户\n    const handleEditUser = (user) => {\n      userForm.value = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        nickname: user.nickname || '',\n        avatar_url: user.avatar_url || ''\n      }\n      editDialogVisible.value = true\n    }\n\n    // 提交用户表单\n    const submitUserForm = async () => {\n      submitting.value = true\n      try {\n        // 这里应该调用实际的API\n        // const response = await updateUser(userForm.value.id, {\n        //   nickname: userForm.value.nickname,\n        //   avatar_url: userForm.value.avatar_url\n        // })\n        // if (response.code === 0) {\n        //   ElMessage.success(response.msg || '用户信息更新成功')\n        //   editDialogVisible.value = false\n        //   fetchUsers()\n        // } else {\n        //   ElMessage.error(response.msg || '用户信息更新失败')\n        // }\n        \n        // 暂时使用提示信息\n        setTimeout(() => {\n          ElMessage.info('用户编辑功能尚未实现，请等待后续更新')\n          editDialogVisible.value = false\n          submitting.value = false\n        }, 500)\n      } catch (error) {\n        console.error('用户信息更新失败:', error)\n        ElMessage.error('用户信息更新失败')\n      } finally {\n        submitting.value = false\n      }\n    }\n\n    // 修改角色\n    const handleChangeRole = (user) => {\n      currentUser.value = user\n      roleForm.value.role = user.role\n      roleDialogVisible.value = true\n    }\n\n    // 提交角色表单\n    const submitRoleForm = async () => {\n      if (!currentUser.value) return\n\n      submitting.value = true\n      try {\n        // 模拟API调用\n        setTimeout(() => {\n          const index = users.value.findIndex(u => u.id === currentUser.value.id)\n          if (index !== -1) {\n            users.value[index] = {\n              ...users.value[index],\n              role: roleForm.value.role\n            }\n          }\n\n          ElMessage.success('用户角色更新成功')\n          roleDialogVisible.value = false\n          submitting.value = false\n        }, 500)\n\n        // 实际API调用\n        // const response = await updateUserRole(currentUser.value.id, {\n        //   role: roleForm.value.role\n        // })\n        // if (response.code === 0) {\n        //   ElMessage.success(response.msg || '用户角色更新成功')\n        //   roleDialogVisible.value = false\n        //   fetchUsers()\n        // } else {\n        //   ElMessage.error(response.msg || '用户角色更新失败')\n        // }\n      } catch (error) {\n        console.error('用户角色更新失败:', error)\n        ElMessage.error('用户角色更新失败')\n      } finally {\n        submitting.value = false\n      }\n    }\n\n    // 删除用户\n    const handleDeleteUser = async (user) => {\n      try {\n        await ElMessageBox.confirm(\n          `确定要删除用户 \"${user.username}\" 吗？此操作不可逆！`,\n          '警告',\n          {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }\n        )\n\n        // 模拟API调用\n        setTimeout(() => {\n          users.value = users.value.filter(u => u.id !== user.id)\n          total.value = users.value.length\n\n          ElMessage.success('用户删除成功')\n        }, 500)\n\n        // 实际API调用\n        // const response = await deleteUser(user.id)\n        // if (response.code === 0) {\n        //   ElMessage.success(response.msg || '用户删除成功')\n        //   fetchUsers()\n        // } else {\n        //   ElMessage.error(response.msg || '用户删除失败')\n        // }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('用户删除失败:', error)\n          ElMessage.error('用户删除失败')\n        }\n      }\n    }\n\n    // 获取角色标签类型\n    const getRoleTagType = (role) => {\n      switch (role) {\n        case 'admin':\n          return 'danger'\n        case 'moderator':\n          return 'warning'\n        case 'user':\n          return 'success'\n        default:\n          return 'info'\n      }\n    }\n\n    // 获取角色标签文本\n    const getRoleLabel = (role) => {\n      switch (role) {\n        case 'admin':\n          return '管理员'\n        case 'moderator':\n          return '版主'\n        case 'user':\n          return '普通用户'\n        default:\n          return '未知'\n      }\n    }\n\n    // 生命周期钩子\n    onMounted(() => {\n      fetchUsers()\n    })\n\n    return {\n      loading,\n      users,\n      total,\n      currentPage,\n      pageSize,\n      searchQuery,\n      currentUserId,\n      editDialogVisible,\n      userForm,\n      userRules,\n      roleDialogVisible,\n      currentUser,\n      roleForm,\n      roleOptions,\n      submitting,\n      formatDate,\n      handleSearch,\n      handleCurrentChange,\n      handleSizeChange,\n      handleViewUser,\n      handleEditUser,\n      submitUserForm,\n      handleChangeRole,\n      submitRoleForm,\n      handleDeleteUser,\n      getRoleTagType,\n      getRoleLabel\n    }\n  }\n}\n</script>\n\n<style scoped>\n.user-management-container {\n  padding: 20px;\n}\n\n.user-management-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  text-align: center;\n}\n\n.avatar-preview {\n  margin-top: 10px;\n  display: flex;\n  justify-content: center;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}