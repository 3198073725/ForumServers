{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index = require('../../../hooks/use-forward-ref/index.js');\nvar shared = require('@vue/shared');\nvar error = require('../../../utils/error.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar NAME = \"ElOnlyChild\";\nvar OnlyChild = vue.defineComponent({\n  name: NAME,\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n      attrs = _ref.attrs;\n    var _a;\n    var forwardRefInjection = vue.inject(index.FORWARD_REF_INJECTION_KEY);\n    var forwardRefDirective = index.useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : shared.NOOP);\n    return function () {\n      var _a2;\n      var defaultSlot = (_a2 = slots[\"default\"]) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n      if (defaultSlot.length > 1) {\n        error.debugWarn(NAME, \"requires exact only one valid child.\");\n        return null;\n      }\n      var firstLegitNode = findFirstLegitChild(defaultSlot);\n      if (!firstLegitNode) {\n        error.debugWarn(NAME, \"no valid child node found\");\n        return null;\n      }\n      return vue.withDirectives(vue.cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\nfunction findFirstLegitChild(node) {\n  if (!node) return null;\n  var children = node;\n  var _iterator = _createForOfIteratorHelper(children),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n      if (shared.isObject(child)) {\n        switch (child.type) {\n          case vue.Comment:\n            continue;\n          case vue.Text:\n          case \"svg\":\n            return wrapTextContent(child);\n          case vue.Fragment:\n            return findFirstLegitChild(child.children);\n          default:\n            return child;\n        }\n      }\n      return wrapTextContent(child);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction wrapTextContent(s) {\n  var ns = index$1.useNamespace(\"only-child\");\n  return vue.createVNode(\"span\", {\n    \"class\": ns.e(\"content\")\n  }, [s]);\n}\nexports.OnlyChild = OnlyChild;","map":{"version":3,"names":["NAME","OnlyChild","vue","defineComponent","name","slots","_ref","attrs","_a","forwardRefInjection","inject","index","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","shared","NOOP","_a2","defaultSlot","call","length","error","debugWarn","firstLegitNode","findFirstLegitChild","withDirectives","cloneVNode","node","children","_step","_iterator","s","n","done","child","value","isObject","type","Text","wrapTextContent","Fragment","err","e","f","ns","index$1","useNamespace","createVNode"],"sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, debugWarn, isObject } from '@element-plus/utils'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n  useNamespace,\n} from '@element-plus/hooks'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined): VNode | null {\n  if (!node) return null\n  const children = node as VNode[]\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  const ns = useNamespace('only-child')\n  return <span class={ns.e('content')}>{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"],"mappings":";;;;;;;;;;;;AAkBA,IAAMA,IAAI,GAAG,aAAb;AAEa,IAAAC,SAAS,GAAGC,GAAA,CAAAC,eAAe,CAAC;EACvCC,IAAI,EAAEJ,IADiC;iCAErB;IAAA,IAAbK,KAAA,GAAAC,IAAA,CAAAD,KAAA;MAAME,KAAF,GAAAD,IAAA,CAAEC,KAAF;IAAkB,IAAAC,EAAA;IACzB,IAAMC,mBAAmB,GAAGP,GAAA,CAAAQ,MAAM,CAACC,KAAA,CAAAC,yBAAD,CAAlC;IACA,IAAMC,mBAAmB,GAAGF,KAAA,CAAAG,sBAAsB,CAChD,CAAAN,EAAA,GAAAC,mBAAqB,WAAiB,MADU,GAAlDA,mBAAA,CAAAM,aAAA,YAAAP,EAAA,GAAAQ,MAAA,CAAAC,IAAA;IAGA,OAAO,YAAM;MACX,IAAAC,GAAA;MACA,IAAKC,WAAa,IAAAD,GAAA,GAAAb,KAAA,gCAAAa,GAAA,CAAAE,IAAA,CAAAf,KAAA,EAAAE,KAAA;wBAElB,OAAe;MACb,IAAAY,WAAU,CAADE,MAAO;QAChBC,KAAA,CAAAC,SAAA,CAAAvB,IAAA;QACD;;MAED,IAAMwB,cAAc,GAAGC,mBAAmB,CAACN,WAAD,CAA1C;;QACIG,KAAA,CAAAC,SAAA,CAAAvB,IAAA,6BAAiB;QACnB,WAAU;MACV;MACD,OAAAE,GAAA,CAAAwB,cAAA,CAAAxB,GAAA,CAAAyB,UAAA,CAAAH,cAAA,EAAAjB,KAAA,KAAAM,mBAAA;;EAED;;AAIH,SAAAY,oBAAAG,IAAA;aA1BI;;6CA6BEC,QAAoB;IAAAC,KAAA;EAAA;IAApB,KAAAC,SAAA,CAAAC,CAAA,MAAAF,KAAA,GAAAC,SAAA,CAAAE,CAAA,IAAAC,IAAA,GAAoB;MAAA,IAApBC,KAAA,GAAAL,KAAA,CAAAM,KAAA;MACP,IAAKpB,MAAA,CAAAqB,QAAM,CAAAF,KAAA;QACL,QAAAA,KAAW,CAAjBG,IAAA;;YACW;UACT,KAAApC,GAAA,CAAAqC,IAAA;UACJ;YACA,OAAAC,eAAA,CAAAL,KAAA;UACA,KAAAjC,GAAA,CAAAuC,QAAA;YACA,OAAAhB,mBAAA,CAAAU,KAAA,CAAAN,QAAA;UACQ;YACM,OAAAM,KAAR;QACE;MACE;;IACF;EAAA,SAAAO,GAAA;IAAAX,SAAA,CAAAY,CAAA,CAAAD,GAAA;EAAA;IAAAX,SAAA,CAAAa,CAAA;EAAA;EACA,WAAK;;;EAEL,IAAAC,EAAA,GAAKC,OAAA,CAAAC,YAAL;EACE,OAAA7C,GAAA,CAAA8C,WAA0B;;EAC5B,IAAAhB,CAAA;AACE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}