{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport request from '@/utils/request';\n\n// 模拟帖子数据，用于API调用失败时返回\nexport var mockPosts = [{\n  id: 1,\n  title: '欢迎使用论坛系统',\n  content: '这是一个基于Vue和Django的论坛系统',\n  created_at: new Date().toISOString(),\n  views: 100,\n  likes_count: 50,\n  comments_count: 20,\n  is_pinned: true,\n  is_featured: false,\n  board_name: '公告板块',\n  user: {\n    id: 1,\n    username: 'admin',\n    nickname: '管理员',\n    avatar_url: ''\n  }\n}, {\n  id: 2,\n  title: '如何使用论坛的功能',\n  content: '本帖介绍论坛的基本功能和使用方法',\n  created_at: new Date(Date.now() - 86400000).toISOString(),\n  // 一天前\n  views: 85,\n  likes_count: 30,\n  comments_count: 15,\n  is_pinned: false,\n  is_featured: true,\n  board_name: '使用指南',\n  user: {\n    id: 2,\n    username: 'guide',\n    nickname: '指南员',\n    avatar_url: ''\n  }\n}, {\n  id: 3,\n  title: '分享一些有用的网站资源',\n  content: '这里收集了一些学习编程的好网站',\n  created_at: new Date(Date.now() - 172800000).toISOString(),\n  // 两天前\n  views: 65,\n  likes_count: 25,\n  comments_count: 10,\n  is_pinned: false,\n  is_featured: false,\n  board_name: '资源分享',\n  user: {\n    id: 3,\n    username: 'resource',\n    nickname: '资源达人',\n    avatar_url: ''\n  }\n}];\n\n// 生成模拟帖子详情数据\nfunction getMockPostDetail(id) {\n  return {\n    id: id || 1,\n    title: \"模拟帖子标题 - 服务器暂时不可用\",\n    content: \"这是一个模拟帖子内容。当前服务器API不可用，我们显示的是模拟数据。请稍后再试。\\n\\n这个帖子是由前端自动生成的，用于在后端API不可用时提供基本的浏览体验。\",\n    author: {\n      id: 1,\n      username: \"系统用户\",\n      avatar: null\n    },\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    view_count: 0,\n    like_count: 0,\n    comment_count: 0,\n    tags: [\"系统\", \"模拟数据\"],\n    is_mock: true // 标记这是模拟数据\n  };\n}\n\n// 获取帖子列表\nexport function getPostList(params) {\n  console.log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u5217\\u8868API\\uFF0C\\u53C2\\u6570:\", params);\n\n  // 准备模拟数据作为备用\n  var mockData = {\n    code: 0,\n    status: 0,\n    data: {\n      results: mockPosts,\n      count: mockPosts.length\n    }\n  };\n  return request({\n    url: '/api/v1/posts/',\n    method: 'get',\n    params: params\n  }).then(function (response) {\n    console.log(\"\\u5E16\\u5B50\\u5217\\u8868API\\u54CD\\u5E94\\u6210\\u529F:\", response);\n\n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n\n    // 如果响应成功且有数据，直接返回\n    if (response && response.code === 0 && response.data && (Array.isArray(response.data) || response.data.results && Array.isArray(response.data.results))) {\n      return response;\n    }\n\n    // 如果响应本身就是数据对象或数组\n    if (response && (Array.isArray(response) || response.results && Array.isArray(response.results))) {\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n\n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子列表API返回异常或空数据，使用模拟数据');\n    return mockData;\n  })[\"catch\"](function (error) {\n    console.error('获取帖子列表失败，使用模拟数据', error);\n    // 返回模拟数据\n    return mockData;\n  });\n}\n\n// 获取帖子详情\nexport function getPostDetail(id) {\n  console.log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u8BE6\\u60C5API\\uFF0CID: \".concat(id));\n\n  // 先尝试从本地获取模拟数据，作为备用\n  var mockPost = getMockPostDetail(id);\n  var mockData = {\n    code: 0,\n    status: 0,\n    data: mockPost\n  };\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'get'\n  }).then(function (response) {\n    console.log(\"\\u5E16\\u5B50\\u8BE6\\u60C5API\\u54CD\\u5E94\\u6210\\u529F:\", response);\n\n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n\n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && _typeof(response.data) === 'object' && Object.keys(response.data).length > 0) {\n      return {\n        code: 0,\n        status: 0,\n        data: response.data\n      };\n    } else if (response && _typeof(response) === 'object' && Object.keys(response).length > 0 && !response.data) {\n      // 如果响应本身就是数据对象\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n\n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子详情API返回异常或空数据，使用模拟数据');\n    return mockData;\n  })[\"catch\"](function (error) {\n    console.error(\"\\u83B7\\u53D6\\u5E16\\u5B50\\u8BE6\\u60C5(ID: \".concat(id, \")\\u5931\\u8D25\\uFF0C\\u4F7F\\u7528\\u6A21\\u62DF\\u6570\\u636E\"), error);\n    // 返回模拟数据\n    return mockData;\n  });\n}\n\n// 创建帖子\nexport function createPost(data) {\n  return request({\n    url: '/api/v1/posts/',\n    method: 'post',\n    data: data\n  });\n}\n\n// 更新帖子\nexport function updatePost(id, data) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'put',\n    data: data\n  });\n}\n\n// 删除帖子\nexport function deletePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/\"),\n    method: 'delete'\n  });\n}\n\n// 点赞/取消点赞帖子\nexport function likePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/like/\"),\n    method: 'post'\n  });\n}\n\n// 收藏/取消收藏帖子\nexport function favoritePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/favorite/\"),\n    method: 'post'\n  });\n}\n\n// 置顶/取消置顶帖子 (管理员)\nexport function pinPost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/pin/\"),\n    method: 'put'\n  });\n}\n\n// 加精/取消加精帖子 (管理员)\nexport function featurePost(id) {\n  return request({\n    url: \"/api/v1/posts/\".concat(id, \"/feature/\"),\n    method: 'put'\n  });\n}\n\n// 获取用户收藏的帖子列表\nexport function getUserFavorites() {\n  return request({\n    url: '/api/v1/posts/favorites/',\n    method: 'get'\n  });\n}\n\n// 获取帖子评论\nexport function getPostComments(postId) {\n  console.log(\"\\u5F00\\u59CB\\u8BF7\\u6C42\\u5E16\\u5B50\\u8BC4\\u8BBAAPI\\uFF0C\\u5E16\\u5B50ID: \".concat(postId));\n\n  // 先准备模拟数据作为备用\n  var mockComments = getMockComments(postId);\n  var mockData = {\n    code: 0,\n    status: 0,\n    data: mockComments\n  };\n  return request({\n    url: \"/api/v1/posts/\".concat(postId, \"/comments/\"),\n    method: 'get'\n  }).then(function (response) {\n    console.log(\"\\u5E16\\u5B50\\u8BC4\\u8BBAAPI\\u54CD\\u5E94\\u6210\\u529F:\", response);\n\n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n\n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && (Array.isArray(response.data) || _typeof(response.data) === 'object' && response.data.results)) {\n      // 处理不同格式的响应\n      var comments = Array.isArray(response.data) ? response.data : response.data.results || [];\n      return {\n        code: 0,\n        status: 0,\n        data: comments\n      };\n    } else if (response && _typeof(response) === 'object' && Array.isArray(response)) {\n      // 如果响应本身就是数组\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n\n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子评论API返回异常或空数据，使用模拟数据');\n    return mockData;\n  })[\"catch\"](function (error) {\n    console.error(\"\\u83B7\\u53D6\\u5E16\\u5B50\\u8BC4\\u8BBA(\\u5E16\\u5B50ID: \".concat(postId, \")\\u5931\\u8D25\\uFF0C\\u4F7F\\u7528\\u6A21\\u62DF\\u6570\\u636E\"), error);\n    // 返回模拟数据\n    return mockData;\n  });\n}","map":{"version":3,"names":["request","mockPosts","id","title","content","created_at","Date","toISOString","views","likes_count","comments_count","is_pinned","is_featured","board_name","user","username","nickname","avatar_url","now","getMockPostDetail","author","avatar","updated_at","view_count","like_count","comment_count","tags","is_mock","getPostList","params","console","log","mockData","code","status","data","results","count","length","url","method","then","response","includes","error","Array","isArray","getPostDetail","concat","mockPost","_typeof","Object","keys","createPost","updatePost","deletePost","likePost","favoritePost","pinPost","featurePost","getUserFavorites","getPostComments","postId","mockComments","getMockComments","comments"],"sources":["H:/ForumServers/ForumFrontend/src/api/post.js"],"sourcesContent":["import request from '@/utils/request'\n\n// 模拟帖子数据，用于API调用失败时返回\nexport const mockPosts = [\n  {\n    id: 1,\n    title: '欢迎使用论坛系统',\n    content: '这是一个基于Vue和Django的论坛系统',\n    created_at: new Date().toISOString(),\n    views: 100,\n    likes_count: 50,\n    comments_count: 20,\n    is_pinned: true,\n    is_featured: false,\n    board_name: '公告板块',\n    user: {\n      id: 1,\n      username: 'admin',\n      nickname: '管理员',\n      avatar_url: ''\n    }\n  },\n  {\n    id: 2,\n    title: '如何使用论坛的功能',\n    content: '本帖介绍论坛的基本功能和使用方法',\n    created_at: new Date(Date.now() - 86400000).toISOString(), // 一天前\n    views: 85,\n    likes_count: 30,\n    comments_count: 15,\n    is_pinned: false,\n    is_featured: true,\n    board_name: '使用指南',\n    user: {\n      id: 2,\n      username: 'guide',\n      nickname: '指南员',\n      avatar_url: ''\n    }\n  },\n  {\n    id: 3,\n    title: '分享一些有用的网站资源',\n    content: '这里收集了一些学习编程的好网站',\n    created_at: new Date(Date.now() - 172800000).toISOString(), // 两天前\n    views: 65,\n    likes_count: 25,\n    comments_count: 10,\n    is_pinned: false,\n    is_featured: false,\n    board_name: '资源分享',\n    user: {\n      id: 3,\n      username: 'resource',\n      nickname: '资源达人',\n      avatar_url: ''\n    }\n  }\n]\n\n// 生成模拟帖子详情数据\nfunction getMockPostDetail(id) {\n  return {\n    id: id || 1,\n    title: \"模拟帖子标题 - 服务器暂时不可用\",\n    content: \"这是一个模拟帖子内容。当前服务器API不可用，我们显示的是模拟数据。请稍后再试。\\n\\n这个帖子是由前端自动生成的，用于在后端API不可用时提供基本的浏览体验。\",\n    author: {\n      id: 1,\n      username: \"系统用户\",\n      avatar: null\n    },\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    view_count: 0,\n    like_count: 0,\n    comment_count: 0,\n    tags: [\"系统\", \"模拟数据\"],\n    is_mock: true  // 标记这是模拟数据\n  };\n}\n\n// 获取帖子列表\nexport function getPostList(params) {\n  console.log(`开始请求帖子列表API，参数:`, params);\n  \n  // 准备模拟数据作为备用\n  const mockData = {\n    code: 0,\n    status: 0,\n    data: {\n      results: mockPosts,\n      count: mockPosts.length\n    }\n  };\n  \n  return request({\n    url: '/api/v1/posts/',\n    method: 'get',\n    params\n  }).then(response => {\n    console.log(`帖子列表API响应成功:`, response);\n    \n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n    \n    // 如果响应成功且有数据，直接返回\n    if (response && response.code === 0 && response.data && \n        (Array.isArray(response.data) || \n         (response.data.results && Array.isArray(response.data.results)))) {\n      return response;\n    }\n    \n    // 如果响应本身就是数据对象或数组\n    if (response && (Array.isArray(response) || \n                    (response.results && Array.isArray(response.results)))) {\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n    \n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子列表API返回异常或空数据，使用模拟数据');\n    return mockData;\n  }).catch(error => {\n    console.error('获取帖子列表失败，使用模拟数据', error);\n    // 返回模拟数据\n    return mockData;\n  });\n}\n\n// 获取帖子详情\nexport function getPostDetail(id) {\n  console.log(`开始请求帖子详情API，ID: ${id}`);\n  \n  // 先尝试从本地获取模拟数据，作为备用\n  const mockPost = getMockPostDetail(id);\n  const mockData = {\n    code: 0,\n    status: 0,\n    data: mockPost\n  };\n  \n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'get'\n  }).then(response => {\n    console.log(`帖子详情API响应成功:`, response);\n    \n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n    \n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && \n        (typeof response.data === 'object' && Object.keys(response.data).length > 0)) {\n      return {\n        code: 0,\n        status: 0,\n        data: response.data\n      };\n    } else if (response && typeof response === 'object' && \n               Object.keys(response).length > 0 && \n               !response.data) {\n      // 如果响应本身就是数据对象\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n    \n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子详情API返回异常或空数据，使用模拟数据');\n    return mockData;\n  }).catch(error => {\n    console.error(`获取帖子详情(ID: ${id})失败，使用模拟数据`, error);\n    // 返回模拟数据\n    return mockData;\n  });\n}\n\n// 创建帖子\nexport function createPost(data) {\n  return request({\n    url: '/api/v1/posts/',\n    method: 'post',\n    data\n  })\n}\n\n// 更新帖子\nexport function updatePost(id, data) {\n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'put',\n    data\n  })\n}\n\n// 删除帖子\nexport function deletePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/`,\n    method: 'delete'\n  })\n}\n\n// 点赞/取消点赞帖子\nexport function likePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/like/`,\n    method: 'post'\n  })\n}\n\n// 收藏/取消收藏帖子\nexport function favoritePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/favorite/`,\n    method: 'post'\n  })\n}\n\n// 置顶/取消置顶帖子 (管理员)\nexport function pinPost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/pin/`,\n    method: 'put'\n  })\n}\n\n// 加精/取消加精帖子 (管理员)\nexport function featurePost(id) {\n  return request({\n    url: `/api/v1/posts/${id}/feature/`,\n    method: 'put'\n  })\n}\n\n// 获取用户收藏的帖子列表\nexport function getUserFavorites() {\n  return request({\n    url: '/api/v1/posts/favorites/',\n    method: 'get'\n  })\n}\n\n// 获取帖子评论\nexport function getPostComments(postId) {\n  console.log(`开始请求帖子评论API，帖子ID: ${postId}`);\n  \n  // 先准备模拟数据作为备用\n  const mockComments = getMockComments(postId);\n  const mockData = {\n    code: 0,\n    status: 0,\n    data: mockComments\n  };\n\n  return request({\n    url: `/api/v1/posts/${postId}/comments/`,\n    method: 'get'\n  }).then(response => {\n    console.log(`帖子评论API响应成功:`, response);\n    \n    // 检查响应是否包含HTML错误页面（表示服务器500错误）\n    if (response && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || response.data.includes('Error'))) {\n      console.error('服务器返回了HTML错误页面，使用模拟数据');\n      return mockData;\n    }\n    \n    // 如果响应成功且有数据，直接返回\n    if (response && response.data && \n        (Array.isArray(response.data) || \n         (typeof response.data === 'object' && response.data.results))) {\n      // 处理不同格式的响应\n      const comments = Array.isArray(response.data) ? \n        response.data : \n        (response.data.results || []);\n        \n      return {\n        code: 0,\n        status: 0,\n        data: comments\n      };\n    } else if (response && typeof response === 'object' && \n               Array.isArray(response)) {\n      // 如果响应本身就是数组\n      return {\n        code: 0,\n        status: 0,\n        data: response\n      };\n    }\n    \n    // 如果响应不成功或没有数据，使用模拟数据\n    console.log('帖子评论API返回异常或空数据，使用模拟数据');\n    return mockData;\n  }).catch(error => {\n    console.error(`获取帖子评论(帖子ID: ${postId})失败，使用模拟数据`, error);\n    // 返回模拟数据\n    return mockData;\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}