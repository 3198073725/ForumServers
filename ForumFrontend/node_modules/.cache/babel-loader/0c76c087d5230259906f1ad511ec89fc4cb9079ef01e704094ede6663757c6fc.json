{"ast":null,"code":"import _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\n/**\n * Quill编辑器全局配置\n * 用于解决Quill中的警告和配置问题\n */\n\n// 默认的Quill配置选项\nexport var defaultQuillOptions = {\n  theme: 'snow',\n  modules: {\n    toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n      'header': 1\n    }, {\n      'header': 2\n    }], [{\n      'list': 'ordered'\n    }, {\n      'list': 'bullet'\n    }], [{\n      'script': 'sub'\n    }, {\n      'script': 'super'\n    }], [{\n      'indent': '-1'\n    }, {\n      'indent': '+1'\n    }], [{\n      'direction': 'rtl'\n    }], [{\n      'size': ['small', false, 'large', 'huge']\n    }], [{\n      'header': [1, 2, 3, 4, 5, 6, false]\n    }], [{\n      'color': []\n    }, {\n      'background': []\n    }], [{\n      'font': []\n    }], [{\n      'align': []\n    }], ['clean'], ['link', 'image']]\n  },\n  placeholder: '请输入内容...',\n  scrollingContainer: 'html',\n  bounds: document.body,\n  // 使用 MutationObserver 替代已弃用的 DOM 事件\n  experimental: {\n    useModernScrollingApi: true,\n    useMutationObserver: true\n  }\n};\n\n// 初始化Quill，应用全局配置\nexport function initQuill() {\n  if (typeof window === 'undefined') return;\n\n  // 确保 Quill 对象存在\n  window.Quill = window.Quill || {};\n\n  // 设置默认配置\n  var defaults = window.Quill.DEFAULTS || {};\n  window.Quill.DEFAULTS = _objectSpread(_objectSpread({}, defaults), {}, {\n    experimental: {\n      useModernScrollingApi: true,\n      useMutationObserver: true\n    }\n  });\n\n  // 禁用DOMNodeInserted事件\n  if (typeof window.Element !== 'undefined') {\n    var originalAddEventListener = window.Element.prototype.addEventListener;\n    window.Element.prototype.addEventListener = function (type, listener, options) {\n      if (type === 'DOMNodeInserted' || type === 'DOMNodeRemoved') {\n        // 忽略已弃用的DOM变更事件\n        return;\n      }\n      return originalAddEventListener.call(this, type, listener, options);\n    };\n  }\n\n  // 重写Quill的DOM相关方法（如果存在）\n  if (window.Quill && window.Quill.prototype) {\n    // 保存原始方法引用\n    var originalMethods = {};\n\n    // 需要重写的方法列表\n    var methodsToOverride = ['constructor', 'scroll', 'update', 'updateContents', 'setContents'];\n\n    // 遍历Quill原型上的所有方法\n    var _loop = function _loop() {\n      var method = _methodsToOverride[_i];\n      if (typeof window.Quill.prototype[method] === 'function') {\n        // 保存原始方法\n        originalMethods[method] = window.Quill.prototype[method];\n\n        // 重写方法，包装在try-catch中\n        window.Quill.prototype[method] = function () {\n          try {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return originalMethods[method].apply(this, args);\n          } catch (error) {\n            // 忽略与DOM变更相关的错误\n            if (error && error.message && (error.message.includes('DOMNodeInserted') || error.message.includes('mutation event'))) {\n              return;\n            }\n            throw error;\n          }\n        };\n      }\n    };\n    for (var _i = 0, _methodsToOverride = methodsToOverride; _i < _methodsToOverride.length; _i++) {\n      _loop();\n    }\n  }\n\n  // 替换原生的 MutationObserver\n  if (window.MutationObserver) {\n    var originalMutationObserver = window.MutationObserver;\n    window.MutationObserver = function (callback) {\n      return new originalMutationObserver(function (mutations) {\n        // 过滤掉不需要的 DOM 变更事件\n        var filteredMutations = mutations.filter(function (mutation) {\n          var _mutation$target$clas;\n          return !((_mutation$target$clas = mutation.target.classList) !== null && _mutation$target$clas !== void 0 && _mutation$target$clas.contains('ql-clipboard'));\n        });\n        if (filteredMutations.length > 0) {\n          callback(filteredMutations);\n        }\n      });\n    };\n  }\n\n  // 禁用控制台警告 - 在所有环境中都生效\n  var originalWarn = console.warn;\n  console.warn = function (msg) {\n    // 过滤掉Quill的特定警告\n    if (msg && typeof msg === 'string' && (msg.includes('DOMNodeInserted') || msg.includes('Listener added for a') || msg.includes('mutation event') || msg.includes('vue-quill') || msg.includes('Quill') || msg.includes('scroll'))) {\n      return;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    originalWarn.call.apply(originalWarn, [console, msg].concat(args));\n  };\n}","map":{"version":3,"names":["defaultQuillOptions","theme","modules","toolbar","placeholder","scrollingContainer","bounds","document","body","experimental","useModernScrollingApi","useMutationObserver","initQuill","window","Quill","defaults","DEFAULTS","_objectSpread","Element","originalAddEventListener","prototype","addEventListener","type","listener","options","call","originalMethods","methodsToOverride","_loop","method","_methodsToOverride","_i","_len","arguments","length","args","Array","_key","apply","error","message","includes","MutationObserver","originalMutationObserver","callback","mutations","filteredMutations","filter","mutation","_mutation$target$clas","target","classList","contains","originalWarn","console","warn","msg","_len2","_key2","concat"],"sources":["H:/ForumServers/ForumFrontend/src/utils/quill-config.js"],"sourcesContent":["/**\n * Quill编辑器全局配置\n * 用于解决Quill中的警告和配置问题\n */\n\n// 默认的Quill配置选项\nexport const defaultQuillOptions = {\n  theme: 'snow',\n  modules: {\n    toolbar: [\n      ['bold', 'italic', 'underline', 'strike'],\n      ['blockquote', 'code-block'],\n      [{ 'header': 1 }, { 'header': 2 }],\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n      [{ 'script': 'sub' }, { 'script': 'super' }],\n      [{ 'indent': '-1' }, { 'indent': '+1' }],\n      [{ 'direction': 'rtl' }],\n      [{ 'size': ['small', false, 'large', 'huge'] }],\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      [{ 'color': [] }, { 'background': [] }],\n      [{ 'font': [] }],\n      [{ 'align': [] }],\n      ['clean'],\n      ['link', 'image']\n    ]\n  },\n  placeholder: '请输入内容...',\n  scrollingContainer: 'html',\n  bounds: document.body,\n  // 使用 MutationObserver 替代已弃用的 DOM 事件\n  experimental: {\n    useModernScrollingApi: true,\n    useMutationObserver: true\n  }\n};\n\n// 初始化Quill，应用全局配置\nexport function initQuill() {\n  if (typeof window === 'undefined') return;\n\n  // 确保 Quill 对象存在\n  window.Quill = window.Quill || {};\n  \n  // 设置默认配置\n  const defaults = window.Quill.DEFAULTS || {};\n  window.Quill.DEFAULTS = {\n    ...defaults,\n    experimental: {\n      useModernScrollingApi: true,\n      useMutationObserver: true\n    }\n  };\n\n  // 禁用DOMNodeInserted事件\n  if (typeof window.Element !== 'undefined') {\n    const originalAddEventListener = window.Element.prototype.addEventListener;\n    window.Element.prototype.addEventListener = function(type, listener, options) {\n      if (type === 'DOMNodeInserted' || type === 'DOMNodeRemoved') {\n        // 忽略已弃用的DOM变更事件\n        return;\n      }\n      return originalAddEventListener.call(this, type, listener, options);\n    };\n  }\n  \n  // 重写Quill的DOM相关方法（如果存在）\n  if (window.Quill && window.Quill.prototype) {\n    // 保存原始方法引用\n    const originalMethods = {};\n    \n    // 需要重写的方法列表\n    const methodsToOverride = [\n      'constructor', \n      'scroll', \n      'update', \n      'updateContents',\n      'setContents'\n    ];\n    \n    // 遍历Quill原型上的所有方法\n    for (const method of methodsToOverride) {\n      if (typeof window.Quill.prototype[method] === 'function') {\n        // 保存原始方法\n        originalMethods[method] = window.Quill.prototype[method];\n        \n        // 重写方法，包装在try-catch中\n        window.Quill.prototype[method] = function(...args) {\n          try {\n            return originalMethods[method].apply(this, args);\n          } catch (error) {\n            // 忽略与DOM变更相关的错误\n            if (error && error.message && \n                (error.message.includes('DOMNodeInserted') || \n                 error.message.includes('mutation event'))) {\n              return;\n            }\n            throw error;\n          }\n        };\n      }\n    }\n  }\n\n  // 替换原生的 MutationObserver\n  if (window.MutationObserver) {\n    const originalMutationObserver = window.MutationObserver;\n    window.MutationObserver = function(callback) {\n      return new originalMutationObserver((mutations) => {\n        // 过滤掉不需要的 DOM 变更事件\n        const filteredMutations = mutations.filter(mutation => {\n          return !mutation.target.classList?.contains('ql-clipboard');\n        });\n        if (filteredMutations.length > 0) {\n          callback(filteredMutations);\n        }\n      });\n    };\n  }\n\n  // 禁用控制台警告 - 在所有环境中都生效\n  const originalWarn = console.warn;\n  console.warn = function(msg, ...args) {\n        // 过滤掉Quill的特定警告\n        if (msg && typeof msg === 'string' && \n            (msg.includes('DOMNodeInserted') || \n             msg.includes('Listener added for a') ||\n         msg.includes('mutation event') ||\n         msg.includes('vue-quill') ||\n         msg.includes('Quill') ||\n         msg.includes('scroll'))) {\n          return;\n        }\n        originalWarn.call(console, msg, ...args);\n      };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}