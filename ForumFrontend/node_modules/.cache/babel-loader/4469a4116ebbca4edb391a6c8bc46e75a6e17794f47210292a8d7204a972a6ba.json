{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"post-create-container\"\n};\nvar _hoisted_2 = {\n  slot: \"header\",\n  \"class\": \"clearfix\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_option = _resolveComponent(\"el-option\");\n  var _component_el_select = _resolveComponent(\"el-select\");\n  var _component_rich_text_editor = _resolveComponent(\"rich-text-editor\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    \"class\": \"post-form-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"span\", null, _toDisplayString($data.isEdit ? '编辑帖子' : '发布新帖'), 1 /* TEXT */)]), _createVNode(_component_el_form, {\n        ref: \"postForm\",\n        model: $data.postForm,\n        rules: $data.postRules,\n        \"label-width\": \"80px\",\n        \"validate-on-rule-change\": false,\n        onSubmit: _cache[3] || (_cache[3] = _withModifiers(function () {}, [\"prevent\"]))\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"标题\",\n            prop: \"title\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $data.postForm.title,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n                  return $data.postForm.title = $event;\n                }),\n                placeholder: \"请输入帖子标题\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"板块\",\n            prop: \"board\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_select, {\n                modelValue: $data.postForm.board,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $data.postForm.board = $event;\n                }),\n                placeholder: \"请选择板块\",\n                style: {\n                  \"width\": \"100%\"\n                },\n                disabled: $data.isEdit && !_ctx.isAdmin\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boardOptions, function (board) {\n                    return _openBlock(), _createBlock(_component_el_option, {\n                      key: board.id,\n                      label: board.name,\n                      value: board.id\n                    }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\", \"disabled\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"内容\",\n            prop: \"content\",\n            \"show-message\": false\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_rich_text_editor, {\n                modelValue: $data.postForm.content,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $data.postForm.content = $event;\n                }),\n                disabled: false,\n                onChange: $options.handleContentChange\n              }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, null, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_button, {\n                onClick: $options.cancel\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[4] || (_cache[4] = [_createTextVNode(\"取消\")]);\n                }),\n                _: 1 /* STABLE */,\n                __: [4]\n              }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n                type: \"primary\",\n                onClick: $options.submitForm,\n                loading: $data.submitting\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($data.isEdit ? '保存修改' : '发布帖子'), 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\", \"loading\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\", \"rules\"])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["slot","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","_withCtx","_createElementVNode","_hoisted_2","_toDisplayString","$data","isEdit","_component_el_form","ref","model","postForm","rules","postRules","onSubmit","_cache","_withModifiers","_component_el_form_item","label","prop","_component_el_input","modelValue","title","$event","placeholder","_","_component_el_select","board","style","disabled","_ctx","isAdmin","_Fragment","_renderList","boardOptions","_createBlock","_component_el_option","key","id","name","value","_component_rich_text_editor","content","onChange","$options","handleContentChange","_component_el_button","onClick","cancel","_createTextVNode","__","type","submitForm","loading","submitting"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostCreate.vue"],"sourcesContent":["<template>\n  <div class=\"post-create-container\">\n    <el-card class=\"post-form-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>{{ isEdit ? '编辑帖子' : '发布新帖' }}</span>\n      </div>\n\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"postRules\"\n        label-width=\"80px\"\n        :validate-on-rule-change=\"false\"\n        @submit.prevent\n      >\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"postForm.title\" placeholder=\"请输入帖子标题\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"板块\" prop=\"board\">\n          <el-select\n            v-model=\"postForm.board\"\n            placeholder=\"请选择板块\"\n            style=\"width: 100%\"\n            :disabled=\"isEdit && !isAdmin\"\n          >\n            <el-option\n              v-for=\"board in boardOptions\"\n              :key=\"board.id\"\n              :label=\"board.name\"\n              :value=\"board.id\"\n            >\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\" :show-message=\"false\">\n          <rich-text-editor\n            v-model=\"postForm.content\"\n            :disabled=\"false\"\n            @change=\"handleContentChange\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button @click=\"cancel\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\n            {{ isEdit ? '保存修改' : '发布帖子' }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { getBoardList } from '@/api/board'\nimport { createPost, getPostDetail, updatePost } from '@/api/post'\nimport { mapGetters } from 'vuex'\nimport RichTextEditor from '@/components/RichTextEditor.vue'\nimport { useRouter } from 'vue-router'\nimport { inject } from 'vue'\n\nexport default {\n  name: 'PostCreate',\n  components: {\n    RichTextEditor\n  },\n  setup() {\n    const router = useRouter()\n    // 注入刷新函数\n    const refreshLatestPosts = inject('refreshLatestPosts', () => {\n      console.log('未找到刷新函数')\n    })\n    \n    return {\n      refreshLatestPosts\n    }\n  },\n  data() {\n    return {\n      isEdit: false,\n      postId: null,\n      submitting: false,\n      boardOptions: [],\n      postForm: {\n        title: '',\n        board: null,\n        content: ''\n      },\n      postRules: {\n        title: [\n          { required: true, message: '请输入帖子标题', trigger: 'blur' },\n          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }\n        ],\n        board: [\n          { required: true, message: '请选择板块', trigger: 'change' }\n        ],\n        content: [\n          { \n            required: true, \n            message: '请输入帖子内容', \n            trigger: 'change'\n          }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAdmin',\n      'isAuthenticated'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    }\n  },\n  created() {\n    console.log('发帖页面创建, 登录状态:', this.isLogin, '认证状态:', this.isAuthenticated)\n\n    // 检查是否登录\n    if (!this.isLogin) {\n      console.log('发帖页面检测到未登录，跳转到登录页面')\n      this.$message.warning('请先登录')\n      this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n      return\n    }\n\n    console.log('发帖页面检测到已登录，继续加载页面')\n\n    // 清除可能的成功消息提示\n    this.$message.closeAll()\n\n    // 添加延时清除，确保异步请求完成后也不会显示消息\n    setTimeout(() => {\n      console.log('组件内延时清除消息')\n      this.$message.closeAll()\n    }, 200)\n\n    // 获取板块选项\n    this.fetchBoardOptions()\n\n    // 检查是否是编辑模式\n    const id = this.$route.params.id\n    if (id) {\n      this.isEdit = true\n      this.postId = id\n      this.fetchPostDetail(id)\n    } else {\n      // 如果是从板块详情页跳转过来，预设板块\n      const boardId = this.$route.params.boardId\n      if (boardId) {\n        this.postForm.board = parseInt(boardId)\n      }\n    }\n  },\n  methods: {\n    // 获取板块选项\n    async fetchBoardOptions() {\n      try {\n        // 清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n\n        console.log('开始获取板块列表...')\n        const response = await getBoardList()\n        console.log('板块列表响应:', response)\n\n        let boardsData = []\n        if (response && response.status === 0 && response.data) {\n          // 处理Django REST framework自定义响应格式\n          console.log('使用status=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && response.code === 0 && response.data) {\n          // 处理另一种自定义响应格式\n          console.log('使用code=0格式处理板块列表数据')\n          boardsData = response.data || []\n        } else if (response && Array.isArray(response)) {\n          // 直接返回数组的情况\n          console.log('使用数组格式处理板块列表数据')\n          boardsData = response\n        } else {\n          console.error('获取板块列表失败:', response ? response.msg : '未知错误')\n          boardsData = [] // 如果获取失败，设置为空数组\n          this.$message.error(response?.msg || '获取板块列表失败')\n        }\n        \n        // 过滤板块列表，如果不是管理员，则过滤掉\"推荐\"和\"精选\"板块\n        if (!this.isAdmin) {\n          console.log('非管理员用户，过滤掉推荐和精选板块')\n          boardsData = boardsData.filter(board => \n            board.name !== '推荐' && board.name !== '精选'\n          )\n        }\n        \n        this.boardOptions = boardsData\n        \n        // 再次清除所有消息，确保不显示\"操作成功\"\n        this.$message.closeAll()\n        \n        console.log('获取到的板块选项:', this.boardOptions)\n      } catch (error) {\n        console.error('获取板块列表失败:', error)\n        this.$message.error('获取板块列表失败')\n      }\n\n      // 添加延时清除，确保异步请求完成后也不会显示消息\n      setTimeout(() => {\n        console.log('获取板块列表后延时清除消息')\n        this.$message.closeAll()\n      }, 300)\n    },\n\n    // 获取帖子详情（编辑模式）\n    async fetchPostDetail(id) {\n      try {\n        const response = await getPostDetail(id)\n        if (response.code === 0) {\n          const post = response.data\n          this.postForm = {\n            title: post.title,\n            board: post.board.id,\n            content: post.content\n          }\n\n          // 检查是否有权限编辑\n          if (!this.isAdmin && post.user.id !== this.$store.getters.userId) {\n            this.$message.error('您没有权限编辑该帖子')\n            this.$router.push({ name: 'PostDetail', params: { id } })\n          }\n        } else {\n          this.$message.error(response.msg || '获取帖子详情失败')\n          this.$router.push({ name: 'PostList' })\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败')\n        this.$router.push({ name: 'PostList' })\n      }\n    },\n\n    // 取消\n    cancel() {\n      // 使用router.back()返回上一页\n      this.$router.back()\n    },\n\n    // 提交表单\n    async submitForm() {\n      console.log('开始提交表单，当前表单数据:', this.postForm);\n      \n      // 先检查内容是否为空\n      if (!this.postForm.content || this.postForm.content === '<p><br></p>') {\n        this.$message.warning('请输入帖子内容');\n        return;\n      }\n      \n      this.$refs.postForm.validate(async (valid, fields) => {\n        console.log('表单验证结果:', valid, '验证失败字段:', fields);\n        \n        if (valid) {\n          this.submitting = true;\n          try {\n            // 显示提交中的加载提示\n            const loadingInstance = this.$loading({\n              lock: true,\n              text: this.isEdit ? '正在更新...' : '正在发布...',\n              spinner: 'el-icon-loading',\n              background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            let response;\n            try {\n              // 发送请求到服务器\n              if (this.isEdit) {\n                response = await updatePost(this.postId, this.postForm);\n              } else {\n                response = await createPost(this.postForm);\n              }\n              \n              // 请求完成后关闭加载提示\n              loadingInstance.close();\n\n              console.log('提交帖子响应:', response);\n\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 打印完整的响应对象\n                console.log('发布成功，完整响应对象:', {\n                  response,\n                  responseData: response.data,\n                  responseType: typeof response.data,\n                  hasId: response.data?.id,\n                  hasPostId: response.data?.post_id\n                });\n\n                // 获取帖子ID\n                let postId;\n                if (this.isEdit) {\n                  postId = this.postId;\n                } else {\n                  // 尝试从不同位置获取帖子ID\n                  if (response.data) {\n                    if (typeof response.data === 'number') {\n                      postId = response.data;\n                    } else if (typeof response.data === 'object') {\n                      postId = response.data.id || response.data.post_id || response.data.postId;\n                    }\n                  }\n                  \n                  // 如果在data中没找到，尝试在response根级别查找\n                  if (!postId) {\n                    postId = response.id || response.post_id || response.postId;\n                  }\n                  \n                  // 如果还是没找到，尝试解析响应消息中的ID\n                  if (!postId && response.msg) {\n                    const match = response.msg.match(/ID[:：]?\\s*(\\d+)/i);\n                    if (match) {\n                      postId = parseInt(match[1]);\n                    }\n                  }\n                }\n\n                console.log('解析后的帖子ID:', postId);\n\n                if (postId) {\n                  // 先显示成功消息\n                  this.$message({\n                    message: this.isEdit ? '更新成功' : '发布成功',\n                    type: 'success',\n                    duration: 2000\n                  });\n\n                  // 刷新首页的帖子列表\n                  await this.refreshLatestPosts();\n                  console.log('已刷新最新帖子列表');\n\n                  // 获取当前选择的板块ID\n                  const boardId = this.postForm.board;\n                  console.log('跳转到板块详情页，板块ID:', boardId);\n\n                  // 延迟跳转到板块详情页\n                  setTimeout(() => {\n                    this.$router.push({ \n                      name: 'BoardDetail', \n                      params: { id: boardId }\n                    });\n                  }, 1000);\n                } else {\n                  this.$message({\n                    message: '操作成功，正在返回列表页...',\n                    type: 'success',\n                    duration: 2000\n                  });\n                  \n                  // 刷新首页的帖子列表\n                  await this.refreshLatestPosts();\n                  \n                  // 延迟跳转到列表页\n                  setTimeout(() => {\n                    this.$router.push({ name: 'PostList' });\n                  }, 1000);\n                }\n              } else {\n                // 发布失败的处理\n                const errorMsg = response?.msg || (this.isEdit ? '更新失败' : '发布失败');\n                this.$message({\n                  message: errorMsg,\n                  type: 'error',\n                  duration: 3000\n                });\n                console.error('提交失败，响应:', response);\n              }\n            } catch (error) {\n              // 异常错误处理\n              loadingInstance.close();\n              const errorMsg = this.isEdit ? '更新帖子失败' : '发布帖子失败';\n              console.error(errorMsg + ':', error);\n              this.$message({\n                message: errorMsg + '，请稍后重试',\n                type: 'error',\n                duration: 3000\n              });\n            }\n          } finally {\n            this.submitting = false;\n          }\n        } else {\n          console.log('表单验证失败');\n          // 显示具体的验证错误信息\n          if (fields) {\n            if (fields.title) {\n              this.$message.warning(fields.title[0].message);\n            } else if (fields.board) {\n              this.$message.warning(fields.board[0].message);\n            } else if (fields.content) {\n              this.$message.warning(fields.content[0].message);\n            } else {\n              this.$message.warning('请填写完整的表单信息');\n            }\n          }\n          return false;\n        }\n      });\n    },\n\n    // 处理内容变化\n    handleContentChange(content) {\n      console.log('内容变化:', content);\n      \n      // 处理空内容的情况\n      if (!content || content === '<p><br></p>') {\n        this.postForm.content = '';\n        this.$message.warning('请输入帖子内容');\n      } else {\n        this.postForm.content = content;\n      }\n      \n      // 手动触发表单验证\n      this.$nextTick(() => {\n        this.$refs.postForm.validateField('content');\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-create-container {\n  max-width: 1200px;\n  margin: 20px auto;\n  padding: 0 20px;\n}\n\n.post-form-card {\n  margin-bottom: 20px;\n}\n\n:deep(.el-form-item__content) {\n  line-height: normal;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}