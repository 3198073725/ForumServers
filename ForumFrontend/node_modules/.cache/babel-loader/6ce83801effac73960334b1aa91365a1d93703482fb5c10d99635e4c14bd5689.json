{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n  console.log('发送请求:', config.url, '是否有token:', !!token);\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n    console.log('请求头部:', config.headers);\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  // 检查是否有明确的错误状态\n  if (res.status && res.status !== 0 && res.status !== 200) {\n    ElMessage({\n      message: res.msg || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.status === 401) {\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    // 返回整个响应数据，让调用者决定如何处理\n    // 不自动显示成功消息，由具体组件决定是否显示\n\n    // 如果是获取板块列表的请求，并且路径包含/post/create，则不显示成功消息\n    var url = response.config.url;\n    var currentPath = window.location.pathname;\n    if (url.includes('/api/v1/boards/') && (currentPath.includes('/post/create') || currentPath.includes('/post/edit'))) {\n      // 清除所有消息，确保不显示“操作成功”\n      ElMessage.closeAll();\n    }\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n    if (status === 401) {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else {\n      ElMessage({\n        message: error.response.data.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n  } else {\n    ElMessage({\n      message: '网络错误，请检查您的网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","console","log","url","headers","Authorization","concat","error","Promise","reject","response","res","data","status","message","msg","type","duration","removeItem","push","Error","currentPath","window","location","pathname","includes","closeAll"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    console.log('发送请求:', config.url, '是否有token:', !!token)\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n      console.log('请求头部:', config.headers)\n    }\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    // 检查是否有明确的错误状态\n    if (res.status && res.status !== 0 && res.status !== 200) {\n      ElMessage({\n        message: res.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      // 401: 未登录或token过期\n      if (res.status === 401) {\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      }\n\n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      // 返回整个响应数据，让调用者决定如何处理\n      // 不自动显示成功消息，由具体组件决定是否显示\n\n      // 如果是获取板块列表的请求，并且路径包含/post/create，则不显示成功消息\n      const url = response.config.url\n      const currentPath = window.location.pathname\n\n      if (url.includes('/api/v1/boards/') && (currentPath.includes('/post/create') || currentPath.includes('/post/edit'))) {\n        // 清除所有消息，确保不显示“操作成功”\n        ElMessage.closeAll()\n      }\n\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n\n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n\n      if (status === 401) {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'error',\n          duration: 5 * 1000\n        })\n\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      } else {\n        ElMessage({\n          message: error.response.data.msg || '请求失败',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    } else {\n      ElMessage({\n        message: '网络错误，请检查您的网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    }\n\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}