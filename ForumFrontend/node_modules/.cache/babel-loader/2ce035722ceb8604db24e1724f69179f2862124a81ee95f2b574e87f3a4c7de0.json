{"ast":null,"code":"import \"core-js/modules/es.string.trim.js\";\nimport { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, normalizeClass as _normalizeClass, withModifiers as _withModifiers, withKeys as _withKeys } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"chat-window\"\n};\nvar _hoisted_2 = {\n  \"class\": \"chat-header\"\n};\nvar _hoisted_3 = {\n  \"class\": \"user-info\"\n};\nvar _hoisted_4 = {\n  \"class\": \"user-name\"\n};\nvar _hoisted_5 = {\n  \"class\": \"header-actions\"\n};\nvar _hoisted_6 = {\n  \"class\": \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nvar _hoisted_7 = {\n  key: 0,\n  \"class\": \"chat-loading\"\n};\nvar _hoisted_8 = {\n  key: 1,\n  \"class\": \"load-more\"\n};\nvar _hoisted_9 = {\n  key: 0,\n  \"class\": \"date-divider\"\n};\nvar _hoisted_10 = {\n  \"class\": \"message-content\"\n};\nvar _hoisted_11 = {\n  \"class\": \"message-text\"\n};\nvar _hoisted_12 = {\n  \"class\": \"message-time\"\n};\nvar _hoisted_13 = {\n  key: 2,\n  \"class\": \"empty-chat\"\n};\nvar _hoisted_14 = {\n  \"class\": \"chat-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_UserAvatar = _resolveComponent(\"UserAvatar\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_Loading = _resolveComponent(\"Loading\");\n  var _component_el_icon = _resolveComponent(\"el-icon\");\n  var _component_Check = _resolveComponent(\"Check\");\n  var _component_el_empty = _resolveComponent(\"el-empty\");\n  var _component_el_input = _resolveComponent(\"el-input\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 聊天窗口头部 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_UserAvatar, {\n    user: $setup.chatUser,\n    size: \"small\"\n  }, null, 8 /* PROPS */, [\"user\"]), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.chatUser.nickname || $setup.chatUser.username), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_button, {\n    icon: $setup.Close,\n    circle: \"\",\n    onClick: $setup.closeChat\n  }, null, 8 /* PROPS */, [\"icon\", \"onClick\"])])]), _createCommentVNode(\" 聊天消息区域 \"), _createElementVNode(\"div\", _hoisted_6, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createVNode(_component_el_icon, {\n    \"class\": \"is-loading\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_Loading)];\n    }),\n    _: 1 /* STABLE */\n  }), _cache[1] || (_cache[1] = _createElementVNode(\"span\", null, \"加载中...\", -1 /* HOISTED */))])) : _createCommentVNode(\"v-if\", true), $setup.hasMore ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createVNode(_component_el_button, {\n    type: \"text\",\n    onClick: $setup.loadMoreMessages,\n    loading: $setup.loadingMore\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[2] || (_cache[2] = [_createTextVNode(\" 加载更多消息 \")]);\n    }),\n    _: 1 /* STABLE */,\n    __: [2]\n  }, 8 /* PROPS */, [\"onClick\", \"loading\"])])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, function (message, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id\n    }, [_createCommentVNode(\" 日期分隔线 \"), $setup.shouldShowDateDivider(message, index) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"span\", null, _toDisplayString($setup.formatDate(message.timestamp)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 消息气泡 \"), _createElementVNode(\"div\", {\n      \"class\": _normalizeClass([\"message-bubble\", {\n        'outgoing': message.isOutgoing,\n        'incoming': !message.isOutgoing\n      }])\n    }, [!message.isOutgoing ? (_openBlock(), _createBlock(_component_UserAvatar, {\n      key: 0,\n      user: $setup.chatUser,\n      size: \"small\",\n      \"class\": \"avatar\"\n    }, null, 8 /* PROPS */, [\"user\"])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, _toDisplayString(message.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, [_createTextVNode(_toDisplayString($setup.formatTime(message.timestamp)) + \" \", 1 /* TEXT */), message.isOutgoing && message.isRead ? (_openBlock(), _createBlock(_component_el_icon, {\n      key: 0,\n      \"class\": \"read-status\"\n    }, {\n      \"default\": _withCtx(function () {\n        return [_createVNode(_component_Check)];\n      }),\n      _: 1 /* STABLE */\n    })) : _createCommentVNode(\"v-if\", true)])]), message.isOutgoing ? (_openBlock(), _createBlock(_component_UserAvatar, {\n      key: 1,\n      user: $setup.currentUser,\n      size: \"small\",\n      \"class\": \"avatar\"\n    }, null, 8 /* PROPS */, [\"user\"])) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.messages.length === 0 && !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createVNode(_component_el_empty, {\n    description: \"暂无消息记录\"\n  })])) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */), _createCommentVNode(\" 消息输入区域 \"), _createElementVNode(\"div\", _hoisted_14, [_createVNode(_component_el_input, {\n    modelValue: $setup.messageInput,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $setup.messageInput = $event;\n    }),\n    type: \"textarea\",\n    rows: 2,\n    placeholder: \"输入消息...\",\n    resize: \"none\",\n    onKeydown: _withKeys(_withModifiers($setup.sendMessage, [\"prevent\"]), [\"enter\"])\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onKeydown\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    icon: $setup.Send,\n    disabled: !$setup.messageInput.trim(),\n    onClick: $setup.sendMessage\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[3] || (_cache[3] = [_createTextVNode(\" 发送 \")]);\n    }),\n    _: 1 /* STABLE */,\n    __: [3]\n  }, 8 /* PROPS */, [\"icon\", \"disabled\", \"onClick\"])])]);\n}","map":{"version":3,"names":["ref","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_UserAvatar","user","$setup","chatUser","size","_hoisted_4","_toDisplayString","nickname","username","_hoisted_5","_component_el_button","icon","Close","circle","onClick","closeChat","_hoisted_6","loading","_hoisted_7","_component_el_icon","_withCtx","_component_Loading","_","hasMore","_hoisted_8","type","loadMoreMessages","loadingMore","_cache","_createTextVNode","__","_Fragment","_renderList","messages","message","index","id","shouldShowDateDivider","_hoisted_9","formatDate","timestamp","_normalizeClass","isOutgoing","_createBlock","_hoisted_10","_hoisted_11","content","_hoisted_12","formatTime","isRead","_component_Check","currentUser","length","_hoisted_13","_component_el_empty","description","_hoisted_14","_component_el_input","modelValue","messageInput","$event","rows","placeholder","resize","onKeydown","_withKeys","_withModifiers","sendMessage","Send","disabled","trim"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\components\\ChatWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-window\">\r\n    <!-- 聊天窗口头部 -->\r\n    <div class=\"chat-header\">\r\n      <div class=\"user-info\">\r\n        <UserAvatar :user=\"chatUser\" size=\"small\" />\r\n        <div class=\"user-name\">{{ chatUser.nickname || chatUser.username }}</div>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <el-button :icon=\"Close\" circle @click=\"closeChat\" />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 聊天消息区域 -->\r\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n      <div v-if=\"loading\" class=\"chat-loading\">\r\n        <el-icon class=\"is-loading\"><Loading /></el-icon>\r\n        <span>加载中...</span>\r\n      </div>\r\n      \r\n      <div v-if=\"hasMore\" class=\"load-more\">\r\n        <el-button type=\"text\" @click=\"loadMoreMessages\" :loading=\"loadingMore\">\r\n          加载更多消息\r\n        </el-button>\r\n      </div>\r\n      \r\n      <div v-for=\"(message, index) in messages\" :key=\"message.id\">\r\n        <!-- 日期分隔线 -->\r\n        <div v-if=\"shouldShowDateDivider(message, index)\" class=\"date-divider\">\r\n          <span>{{ formatDate(message.timestamp) }}</span>\r\n        </div>\r\n        \r\n        <!-- 消息气泡 -->\r\n        <div \r\n          class=\"message-bubble\" \r\n          :class=\"{ \r\n            'outgoing': message.isOutgoing, \r\n            'incoming': !message.isOutgoing \r\n          }\"\r\n        >\r\n          <UserAvatar \r\n            v-if=\"!message.isOutgoing\" \r\n            :user=\"chatUser\" \r\n            size=\"small\" \r\n            class=\"avatar\"\r\n          />\r\n          \r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\">{{ message.content }}</div>\r\n            <div class=\"message-time\">\r\n              {{ formatTime(message.timestamp) }}\r\n              <el-icon v-if=\"message.isOutgoing && message.isRead\" class=\"read-status\"><Check /></el-icon>\r\n            </div>\r\n          </div>\r\n          \r\n          <UserAvatar \r\n            v-if=\"message.isOutgoing\" \r\n            :user=\"currentUser\" \r\n            size=\"small\" \r\n            class=\"avatar\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div v-if=\"messages.length === 0 && !loading\" class=\"empty-chat\">\r\n        <el-empty description=\"暂无消息记录\" />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 消息输入区域 -->\r\n    <div class=\"chat-input\">\r\n      <el-input\r\n        v-model=\"messageInput\"\r\n        type=\"textarea\"\r\n        :rows=\"2\"\r\n        placeholder=\"输入消息...\"\r\n        resize=\"none\"\r\n        @keydown.enter.prevent=\"sendMessage\"\r\n      />\r\n      <el-button \r\n        type=\"primary\" \r\n        :icon=\"Send\" \r\n        :disabled=\"!messageInput.trim()\" \r\n        @click=\"sendMessage\"\r\n      >\r\n        发送\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { Close, Send, Check, Loading } from '@element-plus/icons-vue'\r\nimport webSocketManager from '@/utils/websocket'\r\n\r\nexport default {\r\n  name: 'ChatWindow',\r\n  props: {\r\n    userId: {\r\n      type: [Number, String],\r\n      required: true\r\n    }\r\n  },\r\n  emits: ['close'],\r\n  setup(props, { emit }) {\r\n    const store = useStore()\r\n    const messagesContainer = ref(null)\r\n    const messageInput = ref('')\r\n    const loading = ref(true)\r\n    const loadingMore = ref(false)\r\n    \r\n    // 获取聊天消息\r\n    const messages = computed(() => {\r\n      return store.getters.getChatMessages(props.userId)\r\n    })\r\n    \r\n    // 获取分页信息\r\n    const pageInfo = computed(() => {\r\n      return store.getters.getChatHistoryPage(props.userId)\r\n    })\r\n    \r\n    // 是否有更多消息\r\n    const hasMore = computed(() => pageInfo.value.hasMore)\r\n    \r\n    // 当前用户信息\r\n    const currentUser = computed(() => store.state.user)\r\n    \r\n    // 聊天对象信息（这里应该从用户缓存中获取，简化实现）\r\n    const chatUser = computed(() => {\r\n      // 实际应用中应该从用户列表或API获取\r\n      return {\r\n        id: props.userId,\r\n        username: `用户${props.userId}`,\r\n        nickname: null,\r\n        avatar_url: null\r\n      }\r\n    })\r\n    \r\n    // 初始化聊天\r\n    const initChat = async () => {\r\n      loading.value = true\r\n      \r\n      try {\r\n        // 设置当前聊天用户ID\r\n        store.commit('setCurrentChatUserId', props.userId)\r\n        \r\n        // 初始化WebSocket连接\r\n        webSocketManager.initChatSocket(props.userId)\r\n        \r\n        // 加载聊天历史\r\n        webSocketManager.loadChatHistory(props.userId)\r\n        \r\n        // 标记消息为已读\r\n        await store.dispatch('markChatMessagesRead', props.userId)\r\n      } catch (error) {\r\n        console.error('初始化聊天失败:', error)\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // 加载更多消息\r\n    const loadMoreMessages = async () => {\r\n      if (loadingMore.value || !hasMore.value) return\r\n      \r\n      loadingMore.value = true\r\n      \r\n      try {\r\n        const nextPage = pageInfo.value.page + 1\r\n        webSocketManager.loadChatHistory(props.userId, nextPage)\r\n      } catch (error) {\r\n        console.error('加载更多消息失败:', error)\r\n      } finally {\r\n        loadingMore.value = false\r\n      }\r\n    }\r\n    \r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      const content = messageInput.value.trim()\r\n      if (!content) return\r\n      \r\n      try {\r\n        // 使用WebSocket发送消息\r\n        webSocketManager.sendChatMessage(props.userId, content)\r\n        \r\n        // 清空输入框\r\n        messageInput.value = ''\r\n        \r\n        // 滚动到底部\r\n        scrollToBottom()\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error)\r\n      }\r\n    }\r\n    \r\n    // 关闭聊天窗口\r\n    const closeChat = () => {\r\n      emit('close')\r\n    }\r\n    \r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      setTimeout(() => {\r\n        if (messagesContainer.value) {\r\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n        }\r\n      }, 50)\r\n    }\r\n    \r\n    // 判断是否显示日期分隔线\r\n    const shouldShowDateDivider = (message, index) => {\r\n      if (index === 0) return true\r\n      \r\n      const prevMessage = messages.value[index - 1]\r\n      const prevDate = new Date(prevMessage.timestamp).toLocaleDateString()\r\n      const currentDate = new Date(message.timestamp).toLocaleDateString()\r\n      \r\n      return prevDate !== currentDate\r\n    }\r\n    \r\n    // 格式化日期\r\n    const formatDate = (timestamp) => {\r\n      const date = new Date(timestamp)\r\n      return date.toLocaleDateString()\r\n    }\r\n    \r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp)\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    }\r\n    \r\n    // 监听消息变化，自动滚动到底部\r\n    watch(messages, () => {\r\n      scrollToBottom()\r\n    })\r\n    \r\n    onMounted(() => {\r\n      initChat()\r\n    })\r\n    \r\n    onUnmounted(() => {\r\n      // 清除当前聊天用户ID\r\n      store.commit('setCurrentChatUserId', null)\r\n    })\r\n    \r\n    return {\r\n      messagesContainer,\r\n      messageInput,\r\n      messages,\r\n      loading,\r\n      loadingMore,\r\n      hasMore,\r\n      currentUser,\r\n      chatUser,\r\n      sendMessage,\r\n      closeChat,\r\n      loadMoreMessages,\r\n      shouldShowDateDivider,\r\n      formatDate,\r\n      formatTime,\r\n      // 图标\r\n      Close,\r\n      Send,\r\n      Check,\r\n      Loading\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-window {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n  overflow: hidden;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 15px;\r\n  border-bottom: 1px solid #dcdfe6;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  margin-left: 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 15px;\r\n  overflow-y: auto;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.chat-loading, .empty-chat {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100px;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.load-more {\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.date-divider {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 15px 0;\r\n}\r\n\r\n.date-divider span {\r\n  background-color: #e4e7ed;\r\n  color: #909399;\r\n  font-size: 12px;\r\n  padding: 2px 10px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.message-bubble {\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n  max-width: 80%;\r\n}\r\n\r\n.message-bubble.outgoing {\r\n  margin-left: auto;\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-bubble.incoming {\r\n  margin-right: auto;\r\n}\r\n\r\n.avatar {\r\n  margin: 0 8px;\r\n  align-self: flex-end;\r\n}\r\n\r\n.message-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.outgoing .message-content {\r\n  background-color: #ecf5ff;\r\n  border-bottom-right-radius: 0;\r\n}\r\n\r\n.incoming .message-content {\r\n  background-color: #fff;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.message-text {\r\n  word-break: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.message-time {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  text-align: right;\r\n  margin-top: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.read-status {\r\n  margin-left: 5px;\r\n  font-size: 12px;\r\n  color: #409eff;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  padding: 10px;\r\n  border-top: 1px solid #dcdfe6;\r\n  background-color: #fff;\r\n}\r\n\r\n.chat-input .el-input {\r\n  margin-right: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}