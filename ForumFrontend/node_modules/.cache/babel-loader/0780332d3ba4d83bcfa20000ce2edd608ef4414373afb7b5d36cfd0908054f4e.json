{"ast":null,"code":"import _classCallCheck from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport store from '@/store';\nimport { ElMessage } from 'element-plus';\n\n// WebSocket基础URL\nvar WS_BASE_URL = process.env.NODE_ENV === 'production' ? 'wss://yourserver.com/ws' : 'ws://localhost:8000/ws';\n\n/**\r\n * WebSocket管理类\r\n */\nvar WebSocketManager = /*#__PURE__*/function () {\n  function WebSocketManager() {\n    _classCallCheck(this, WebSocketManager);\n    this.notificationSocket = null;\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\n    this.token = null;\n  }\n\n  /**\r\n   * 初始化WebSocket连接\r\n   * @param {string} token - JWT令牌\r\n   */\n  return _createClass(WebSocketManager, [{\n    key: \"init\",\n    value: function init(token) {\n      this.token = token;\n      if (token) {\n        this.connectNotification(token);\n      }\n    }\n\n    /**\r\n     * 连接到通知WebSocket\r\n     * @param {string} token - JWT令牌\r\n     */\n  }, {\n    key: \"connectNotification\",\n    value: function connectNotification(token) {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n      }\n\n      // 创建通知WebSocket连接\n      this.notificationSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/notifications/?token=\").concat(token));\n\n      // 连接打开时的处理\n      this.notificationSocket.onopen = function () {\n        console.log('通知WebSocket连接已建立');\n      };\n\n      // 接收消息的处理\n      this.notificationSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'connection_established':\n              console.log(data.message);\n              break;\n            case 'unread_count':\n              // 更新未读通知数量\n              store.commit('notifications/setUnreadCount', data.count);\n              break;\n            case 'notification':\n              // 处理新通知\n              store.commit('notifications/addNotification', data);\n              store.commit('notifications/incrementUnreadCount');\n\n              // 显示通知提示\n              ElMessage({\n                message: data.title,\n                type: 'info',\n                duration: 3000\n              });\n              break;\n            case 'mark_read_response':\n            case 'mark_all_read_response':\n              // 标记通知已读的响应处理\n              break;\n            default:\n              console.log('未知的通知类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析通知消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的处理\n      this.notificationSocket.onclose = function () {\n        console.log('通知WebSocket连接已关闭');\n      };\n\n      // 连接错误时的处理\n      this.notificationSocket.onerror = function (error) {\n        console.error('通知WebSocket连接错误:', error);\n      };\n    }\n\n    /**\r\n     * 连接到聊天WebSocket\r\n     * @param {number} userId - 对方用户ID\r\n     */\n  }, {\n    key: \"connectChat\",\n    value: function connectChat(userId) {\n      var _this = this;\n      if (!this.token) {\n        console.error('未登录，无法建立聊天连接');\n        return;\n      }\n\n      // 如果已存在与该用户的连接，则返回\n      if (this.chatSockets[userId]) {\n        return;\n      }\n\n      // 创建聊天WebSocket连接\n      var chatSocket = new ReconnectingWebSocket(\"\".concat(WS_BASE_URL, \"/chat/\").concat(userId, \"/?token=\").concat(this.token));\n\n      // 连接打开时的处理\n      chatSocket.onopen = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB\"));\n      };\n\n      // 接收消息的处理\n      chatSocket.onmessage = function (event) {\n        try {\n          var data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'connection_established':\n              console.log(data.message);\n              break;\n            case 'chat_message':\n              // 处理聊天消息\n              store.commit('chat/addMessage', {\n                userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\n                message: {\n                  id: data.id,\n                  senderId: data.sender_id,\n                  receiverId: data.receiver_id,\n                  content: data.content,\n                  timestamp: data.timestamp,\n                  isRead: data.is_read\n                }\n              });\n              break;\n            case 'history_messages':\n              // 处理历史消息\n              store.commit('chat/setMessages', {\n                userId: userId,\n                messages: data.messages.map(function (msg) {\n                  return {\n                    id: msg.id,\n                    senderId: msg.sender_id,\n                    receiverId: msg.receiver_id,\n                    content: msg.content,\n                    timestamp: msg.timestamp,\n                    isRead: msg.is_read\n                  };\n                }),\n                hasMore: data.has_more,\n                page: data.page\n              });\n              break;\n            default:\n              console.log('未知的聊天消息类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析聊天消息失败:', error);\n        }\n      };\n\n      // 连接关闭时的处理\n      chatSocket.onclose = function () {\n        console.log(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED\"));\n        delete _this.chatSockets[userId];\n      };\n\n      // 连接错误时的处理\n      chatSocket.onerror = function (error) {\n        console.error(\"\\u4E0E\\u7528\\u6237\".concat(userId, \"\\u7684\\u804A\\u5929WebSocket\\u8FDE\\u63A5\\u9519\\u8BEF:\"), error);\n      };\n\n      // 保存连接\n      this.chatSockets[userId] = chatSocket;\n    }\n\n    /**\r\n     * 断开与用户的聊天连接\r\n     * @param {number} userId - 用户ID\r\n     */\n  }, {\n    key: \"disconnectChat\",\n    value: function disconnectChat(userId) {\n      if (this.chatSockets[userId]) {\n        this.chatSockets[userId].close();\n        delete this.chatSockets[userId];\n      }\n    }\n\n    /**\r\n     * 发送聊天消息\r\n     * @param {number} userId - 接收者ID\r\n     * @param {string} content - 消息内容\r\n     */\n  }, {\n    key: \"sendChatMessage\",\n    value: function sendChatMessage(userId, content) {\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'chat_message',\n        content: content\n      }));\n    }\n\n    /**\r\n     * 加载历史消息\r\n     * @param {number} userId - 用户ID\r\n     * @param {number} page - 页码\r\n     * @param {number} pageSize - 每页大小\r\n     */\n  }, {\n    key: \"loadChatHistory\",\n    value: function loadChatHistory(userId) {\n      var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n      if (!this.chatSockets[userId]) {\n        this.connectChat(userId);\n      }\n      this.chatSockets[userId].send(JSON.stringify({\n        type: 'load_history',\n        page: page,\n        page_size: pageSize\n      }));\n    }\n\n    /**\r\n     * 标记通知为已读\r\n     * @param {number} notificationId - 通知ID\r\n     */\n  }, {\n    key: \"markNotificationRead\",\n    value: function markNotificationRead(notificationId) {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_read',\n          id: notificationId\n        }));\n      }\n    }\n\n    /**\r\n     * 标记所有通知为已读\r\n     */\n  }, {\n    key: \"markAllNotificationsRead\",\n    value: function markAllNotificationsRead() {\n      if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\n        this.notificationSocket.send(JSON.stringify({\n          type: 'mark_all_read'\n        }));\n      }\n    }\n\n    /**\r\n     * 关闭所有WebSocket连接\r\n     */\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      if (this.notificationSocket) {\n        this.notificationSocket.close();\n        this.notificationSocket = null;\n      }\n      Object.values(this.chatSockets).forEach(function (socket) {\n        socket.close();\n      });\n      this.chatSockets = {};\n      this.token = null;\n    }\n  }]);\n}(); // 创建单例\nvar wsManager = new WebSocketManager();\nexport default wsManager;","map":{"version":3,"names":["ReconnectingWebSocket","store","ElMessage","WS_BASE_URL","process","env","NODE_ENV","WebSocketManager","_classCallCheck","notificationSocket","chatSockets","token","_createClass","key","value","init","connectNotification","close","concat","onopen","console","log","onmessage","event","data","JSON","parse","type","message","commit","count","title","duration","error","onclose","onerror","connectChat","userId","_this","chatSocket","sender_id","state","user","currentUser","id","receiver_id","senderId","receiverId","content","timestamp","isRead","is_read","messages","map","msg","hasMore","has_more","page","disconnectChat","sendChatMessage","send","stringify","loadChatHistory","arguments","length","undefined","pageSize","page_size","markNotificationRead","notificationId","readyState","WebSocket","OPEN","markAllNotificationsRead","closeAll","Object","values","forEach","socket","wsManager"],"sources":["H:/ForumServers/ForumFrontend/src/utils/websocket.js"],"sourcesContent":["import ReconnectingWebSocket from 'reconnecting-websocket';\r\nimport store from '@/store';\r\nimport { ElMessage } from 'element-plus';\r\n\r\n// WebSocket基础URL\r\nconst WS_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? 'wss://yourserver.com/ws' \r\n  : 'ws://localhost:8000/ws';\r\n\r\n/**\r\n * WebSocket管理类\r\n */\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.notificationSocket = null;\r\n    this.chatSockets = {}; // 存储与不同用户的聊天WebSocket连接\r\n    this.token = null;\r\n  }\r\n\r\n  /**\r\n   * 初始化WebSocket连接\r\n   * @param {string} token - JWT令牌\r\n   */\r\n  init(token) {\r\n    this.token = token;\r\n    if (token) {\r\n      this.connectNotification(token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 连接到通知WebSocket\r\n   * @param {string} token - JWT令牌\r\n   */\r\n  connectNotification(token) {\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n    }\r\n\r\n    // 创建通知WebSocket连接\r\n    this.notificationSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/notifications/?token=${token}`);\r\n\r\n    // 连接打开时的处理\r\n    this.notificationSocket.onopen = () => {\r\n      console.log('通知WebSocket连接已建立');\r\n    };\r\n\r\n    // 接收消息的处理\r\n    this.notificationSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        switch (data.type) {\r\n          case 'connection_established':\r\n            console.log(data.message);\r\n            break;\r\n          \r\n          case 'unread_count':\r\n            // 更新未读通知数量\r\n            store.commit('notifications/setUnreadCount', data.count);\r\n            break;\r\n          \r\n          case 'notification':\r\n            // 处理新通知\r\n            store.commit('notifications/addNotification', data);\r\n            store.commit('notifications/incrementUnreadCount');\r\n            \r\n            // 显示通知提示\r\n            ElMessage({\r\n              message: data.title,\r\n              type: 'info',\r\n              duration: 3000\r\n            });\r\n            break;\r\n          \r\n          case 'mark_read_response':\r\n          case 'mark_all_read_response':\r\n            // 标记通知已读的响应处理\r\n            break;\r\n          \r\n          default:\r\n            console.log('未知的通知类型:', data.type);\r\n        }\r\n      } catch (error) {\r\n        console.error('解析通知消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的处理\r\n    this.notificationSocket.onclose = () => {\r\n      console.log('通知WebSocket连接已关闭');\r\n    };\r\n\r\n    // 连接错误时的处理\r\n    this.notificationSocket.onerror = (error) => {\r\n      console.error('通知WebSocket连接错误:', error);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 连接到聊天WebSocket\r\n   * @param {number} userId - 对方用户ID\r\n   */\r\n  connectChat(userId) {\r\n    if (!this.token) {\r\n      console.error('未登录，无法建立聊天连接');\r\n      return;\r\n    }\r\n\r\n    // 如果已存在与该用户的连接，则返回\r\n    if (this.chatSockets[userId]) {\r\n      return;\r\n    }\r\n\r\n    // 创建聊天WebSocket连接\r\n    const chatSocket = new ReconnectingWebSocket(`${WS_BASE_URL}/chat/${userId}/?token=${this.token}`);\r\n\r\n    // 连接打开时的处理\r\n    chatSocket.onopen = () => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已建立`);\r\n    };\r\n\r\n    // 接收消息的处理\r\n    chatSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        switch (data.type) {\r\n          case 'connection_established':\r\n            console.log(data.message);\r\n            break;\r\n          \r\n          case 'chat_message':\r\n            // 处理聊天消息\r\n            store.commit('chat/addMessage', {\r\n              userId: data.sender_id === store.state.user.currentUser.id ? data.receiver_id : data.sender_id,\r\n              message: {\r\n                id: data.id,\r\n                senderId: data.sender_id,\r\n                receiverId: data.receiver_id,\r\n                content: data.content,\r\n                timestamp: data.timestamp,\r\n                isRead: data.is_read\r\n              }\r\n            });\r\n            break;\r\n          \r\n          case 'history_messages':\r\n            // 处理历史消息\r\n            store.commit('chat/setMessages', {\r\n              userId: userId,\r\n              messages: data.messages.map(msg => ({\r\n                id: msg.id,\r\n                senderId: msg.sender_id,\r\n                receiverId: msg.receiver_id,\r\n                content: msg.content,\r\n                timestamp: msg.timestamp,\r\n                isRead: msg.is_read\r\n              })),\r\n              hasMore: data.has_more,\r\n              page: data.page\r\n            });\r\n            break;\r\n          \r\n          default:\r\n            console.log('未知的聊天消息类型:', data.type);\r\n        }\r\n      } catch (error) {\r\n        console.error('解析聊天消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 连接关闭时的处理\r\n    chatSocket.onclose = () => {\r\n      console.log(`与用户${userId}的聊天WebSocket连接已关闭`);\r\n      delete this.chatSockets[userId];\r\n    };\r\n\r\n    // 连接错误时的处理\r\n    chatSocket.onerror = (error) => {\r\n      console.error(`与用户${userId}的聊天WebSocket连接错误:`, error);\r\n    };\r\n\r\n    // 保存连接\r\n    this.chatSockets[userId] = chatSocket;\r\n  }\r\n\r\n  /**\r\n   * 断开与用户的聊天连接\r\n   * @param {number} userId - 用户ID\r\n   */\r\n  disconnectChat(userId) {\r\n    if (this.chatSockets[userId]) {\r\n      this.chatSockets[userId].close();\r\n      delete this.chatSockets[userId];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送聊天消息\r\n   * @param {number} userId - 接收者ID\r\n   * @param {string} content - 消息内容\r\n   */\r\n  sendChatMessage(userId, content) {\r\n    if (!this.chatSockets[userId]) {\r\n      this.connectChat(userId);\r\n    }\r\n\r\n    this.chatSockets[userId].send(JSON.stringify({\r\n      type: 'chat_message',\r\n      content: content\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * 加载历史消息\r\n   * @param {number} userId - 用户ID\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 每页大小\r\n   */\r\n  loadChatHistory(userId, page = 1, pageSize = 20) {\r\n    if (!this.chatSockets[userId]) {\r\n      this.connectChat(userId);\r\n    }\r\n\r\n    this.chatSockets[userId].send(JSON.stringify({\r\n      type: 'load_history',\r\n      page: page,\r\n      page_size: pageSize\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * 标记通知为已读\r\n   * @param {number} notificationId - 通知ID\r\n   */\r\n  markNotificationRead(notificationId) {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_read',\r\n        id: notificationId\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 标记所有通知为已读\r\n   */\r\n  markAllNotificationsRead() {\r\n    if (this.notificationSocket && this.notificationSocket.readyState === WebSocket.OPEN) {\r\n      this.notificationSocket.send(JSON.stringify({\r\n        type: 'mark_all_read'\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 关闭所有WebSocket连接\r\n   */\r\n  closeAll() {\r\n    if (this.notificationSocket) {\r\n      this.notificationSocket.close();\r\n      this.notificationSocket = null;\r\n    }\r\n\r\n    Object.values(this.chatSockets).forEach(socket => {\r\n      socket.close();\r\n    });\r\n    this.chatSockets = {};\r\n    this.token = null;\r\n  }\r\n}\r\n\r\n// 创建单例\r\nconst wsManager = new WebSocketManager();\r\n\r\nexport default wsManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}