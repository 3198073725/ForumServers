{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n  console.log('发送请求:', config.url, '是否有token:', !!token);\n\n  // 设置Authorization头\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n\n  // 设置Content-Type头（如果没有设置）\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n  }\n  console.log('请求头部:', config.headers);\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n  console.log('响应数据:', res);\n\n  // 检查是否有明确的错误状态\n  if (res.status && res.status !== 0 && res.status !== 200) {\n    console.error('API错误响应:', res);\n    ElMessage({\n      message: res.msg || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.status === 401) {\n      console.log('检测到401未授权状态，准备清除token并跳转到登录页');\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.msg || '请求失败'));\n  } else {\n    // 返回整个响应数据，让调用者决定如何处理\n    // 不自动显示成功消息，由具体组件决定是否显示\n\n    // 如果是“操作成功”消息，则不显示\n    if (res.msg === '操作成功') {\n      console.log('拦截到“操作成功”消息，不显示');\n      // 清除所有消息，确保不显示“操作成功”\n      ElMessage.closeAll();\n\n      // 修改响应中的消息，避免其他地方显示\n      res.msg = '';\n    }\n\n    // 如果当前路径是发帖页面，则清除所有消息\n    var currentPath = window.location.pathname;\n    if (currentPath.includes('/post/create') || currentPath.includes('/post/edit')) {\n      console.log('当前路径是发帖页面，清除所有消息');\n      ElMessage.closeAll();\n    }\n\n    // 兼容不同的响应格式\n    if (res.code === undefined && res.status === undefined) {\n      // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n      console.log('检测到直接返回的数据格式，进行标准化处理');\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: res\n      };\n    }\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误:', error);\n\n  // 处理HTTP错误状态码\n  if (error.response) {\n    var status = error.response.status;\n    if (status === 401) {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      // 清除本地token和用户信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n\n      // 跳转到登录页\n      router.push('/login');\n    } else {\n      ElMessage({\n        message: error.response.data.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n  } else {\n    ElMessage({\n      message: '网络错误，请检查您的网络连接',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","console","log","url","headers","Authorization","concat","method","data","FormData","error","Promise","reject","response","res","status","message","msg","type","duration","removeItem","push","Error","closeAll","currentPath","window","location","pathname","includes","code","undefined"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    console.log('发送请求:', config.url, '是否有token:', !!token)\n\n    // 设置Authorization头\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    // 设置Content-Type头（如果没有设置）\n    if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n      if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n        config.headers['Content-Type'] = 'application/json'\n      }\n    }\n\n    console.log('请求头部:', config.headers)\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    console.log('响应数据:', res)\n\n    // 检查是否有明确的错误状态\n    if (res.status && res.status !== 0 && res.status !== 200) {\n      console.error('API错误响应:', res)\n      ElMessage({\n        message: res.msg || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      // 401: 未登录或token过期\n      if (res.status === 401) {\n        console.log('检测到401未授权状态，准备清除token并跳转到登录页')\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      }\n\n      return Promise.reject(new Error(res.msg || '请求失败'))\n    } else {\n      // 返回整个响应数据，让调用者决定如何处理\n      // 不自动显示成功消息，由具体组件决定是否显示\n\n      // 如果是“操作成功”消息，则不显示\n      if (res.msg === '操作成功') {\n        console.log('拦截到“操作成功”消息，不显示')\n        // 清除所有消息，确保不显示“操作成功”\n        ElMessage.closeAll()\n\n        // 修改响应中的消息，避免其他地方显示\n        res.msg = ''\n      }\n\n      // 如果当前路径是发帖页面，则清除所有消息\n      const currentPath = window.location.pathname\n      if (currentPath.includes('/post/create') || currentPath.includes('/post/edit')) {\n        console.log('当前路径是发帖页面，清除所有消息')\n        ElMessage.closeAll()\n      }\n\n      // 兼容不同的响应格式\n      if (res.code === undefined && res.status === undefined) {\n        // 如果响应中既没有code也没有status字段，可能是直接返回的数据\n        console.log('检测到直接返回的数据格式，进行标准化处理')\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: res\n        }\n      }\n\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n\n    // 处理HTTP错误状态码\n    if (error.response) {\n      const status = error.response.status\n\n      if (status === 401) {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'error',\n          duration: 5 * 1000\n        })\n\n        // 清除本地token和用户信息\n        localStorage.removeItem('token')\n        localStorage.removeItem('userInfo')\n\n        // 跳转到登录页\n        router.push('/login')\n      } else {\n        ElMessage({\n          message: error.response.data.msg || '请求失败',\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    } else {\n      ElMessage({\n        message: '网络错误，请检查您的网络连接',\n        type: 'error',\n        duration: 5 * 1000\n      })\n    }\n\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}