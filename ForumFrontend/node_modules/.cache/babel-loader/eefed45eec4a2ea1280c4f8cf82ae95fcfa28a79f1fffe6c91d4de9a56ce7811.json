{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.array.fill.js\");\nrequire(\"core-js/modules/es.function.name.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar constants = require('./constants.js');\nvar checkbox = require('./checkbox.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar useCheckbox = require('./composables/use-checkbox.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElCheckboxButton\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkbox.checkboxProps,\n  emits: checkbox.checkboxEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var slots = vue.useSlots();\n    var _useCheckbox$useCheck = useCheckbox.useCheckbox(props, slots),\n      isFocused = _useCheckbox$useCheck.isFocused,\n      isChecked = _useCheckbox$useCheck.isChecked,\n      isDisabled = _useCheckbox$useCheck.isDisabled,\n      checkboxButtonSize = _useCheckbox$useCheck.checkboxButtonSize,\n      model = _useCheckbox$useCheck.model,\n      actualValue = _useCheckbox$useCheck.actualValue,\n      handleChange = _useCheckbox$useCheck.handleChange;\n    var checkboxGroup = vue.inject(constants.checkboxGroupContextKey, void 0);\n    var ns = index.useNamespace(\"checkbox\");\n    var activeStyle = vue.computed(function () {\n      var _a, _b, _c, _d;\n      var fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? \"-1px 0 0 0 \".concat(fillValue) : void 0\n      };\n    });\n    var labelKls = vue.computed(function () {\n      return [ns.b(\"button\"), ns.bm(\"button\", checkboxButtonSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"focus\", isFocused.value)];\n    });\n    return function (_ctx, _cache) {\n      var _a, _b, _c, _d;\n      return vue.openBlock(), vue.createElementBlock(\"label\", {\n        \"class\": vue.normalizeClass(vue.unref(labelKls))\n      }, [_ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return vue.isRef(model) ? model.value = $event : null;\n        },\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: vue.unref(isDisabled),\n        \"true-value\": (_b = (_a = _ctx.trueValue) != null ? _a : _ctx.trueLabel) != null ? _b : true,\n        \"false-value\": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,\n        onChange: vue.unref(handleChange),\n        onFocus: function onFocus($event) {\n          return isFocused.value = true;\n        },\n        onBlur: function onBlur($event) {\n          return isFocused.value = false;\n        },\n        onClick: vue.withModifiers(function () {}, [\"stop\"])\n      }, null, 42, [\"onUpdate:modelValue\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vue.vModelCheckbox, vue.unref(model)]]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n        key: 1,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return vue.isRef(model) ? model.value = $event : null;\n        },\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: vue.unref(isDisabled),\n        value: vue.unref(actualValue),\n        onChange: vue.unref(handleChange),\n        onFocus: function onFocus($event) {\n          return isFocused.value = true;\n        },\n        onBlur: function onBlur($event) {\n          return isFocused.value = false;\n        },\n        onClick: vue.withModifiers(function () {}, [\"stop\"])\n      }, null, 42, [\"onUpdate:modelValue\", \"name\", \"tabindex\", \"disabled\", \"value\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"])), [[vue.vModelCheckbox, vue.unref(model)]]), _ctx.$slots[\"default\"] || _ctx.label ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 2,\n        \"class\": vue.normalizeClass(vue.unref(ns).be(\"button\", \"inner\")),\n        style: vue.normalizeStyle(vue.unref(isChecked) ? vue.unref(activeStyle) : void 0)\n      }, [vue.renderSlot(_ctx.$slots, \"default\", {}, function () {\n        return [vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)];\n      })], 6)) : vue.createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n}));\nvar CheckboxButton = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"checkbox-button.vue\"]]);\nexports[\"default\"] = CheckboxButton;","map":{"version":3,"names":["name","slots","vue","useSlots","_useCheckbox$useCheck","useCheckbox","props","isFocused","isChecked","isDisabled","checkboxButtonSize","model","actualValue","handleChange","checkboxGroup","inject","constants","checkboxGroupContextKey","ns","index","useNamespace","activeStyle","computed","_a","_b","_c","_d","fillValue","fill","value","backgroundColor","borderColor","color","textColor","boxShadow","concat","labelKls","b","bm","is"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-button.vue"],"sourcesContent":["<template>\n  <label :class=\"labelKls\">\n    <input\n      v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueValue ?? trueLabel ?? true\"\n      :false-value=\"falseValue ?? falseLabel ?? false\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"actualValue\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  actualValue,\n  handleChange,\n} = useCheckbox(props, slots)\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;qCAmDc;EACZA,IAAM;AACR;;;;;;IAIA,IAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEjB,IAAAC,qBAAA,GAQFC,WAAA,CAAAA,WAAY,CAAAC,KAAA,EAAOL,KAAK;MAP1BM,SAAA,GAAAH,qBAAA,CAAAG,SAAA;MACAC,SAAA,GAAAJ,qBAAA,CAAAI,SAAA;MACAC,UAAA,GAAAL,qBAAA,CAAAK,UAAA;MACAC,kBAAA,GAAAN,qBAAA,CAAAM,kBAAA;MACAC,KAAA,GAAAP,qBAAA,CAAAO,KAAA;MACAC,WAAA,GAAAR,qBAAA,CAAAQ,WAAA;MACAC,YAAA,GAAAT,qBAAA,CAAAS,YAAA;IAEI,IAAAC,aAAA,GAAgBZ,GAAA,CAAAa,MAAO,CAAAC,SAAA,CAAAC,uBAAA,EAAyB,KAAS;IACzD,IAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,UAAU;IAE5B,IAAAC,WAAA,GAAcnB,GAAA,CAAAoB,QAAA,CAAwB,YAAM;MAC1C,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAY;MACX,IAAAC,SAAA,IAAAH,EAAA,IAAAD,EAAA,GAAAT,aAAA,oBAAAA,aAAA,CAAAc,IAAA,qBAAAL,EAAA,CAAAM,KAAA,YAAAL,EAAA;MAAA,OACY;QACjBM,eAAa,EAAAH,SAAA;QACbI,WAAsB,EAAAJ,SAAA;QACtBK,KAAW,GAAAN,EAAA,IAAAD,EAAA,GAAAX,aAA0B,gBAAc,IAAAA,aAAA,CAAAmB,SAAA,qBAAAR,EAAA,CAAAI,KAAA,YAAAH,EAAA;QACrDQ,SAAA,EAAAP,SAAA,iBAAAQ,MAAA,CAAAR,SAAA;MAAA,CACD;IAED,CAAM;IACG,IAAAS,QAAA,GAAAlC,GAAA,CAAAoB,QAAA;MACL,OAAK,CACLJ,EAAG,CAAAmB,CAAA,SAAa,GAChBnB,EAAG,CAAAoB,EAAA,CAAG,QAAY,EAAA5B,kBAAgB,CAAAmB,KAAA,GAClCX,EAAG,CAAAqB,EAAA,CAAG,UAAW,EAAA9B,UAAe,CAAAoB,KAAA,GAChCX,EAAG,CAAAqB,EAAA,CAAG,SAAS,EAAA/B,SAAe,CAAAqB,KAAA,GAChCX,EAAA,CAAAqB,EAAA,UAAAhC,SAAA,CAAAsB,KAAA,EACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}