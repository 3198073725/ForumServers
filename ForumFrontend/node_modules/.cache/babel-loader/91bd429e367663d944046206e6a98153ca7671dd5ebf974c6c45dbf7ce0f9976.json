{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost } from '@/api/post';\nimport { getPostComments, createComment, replyComment, updateComment, deleteComment } from '@/api/comment';\nimport { formatDateTime } from '@/utils/index';\nimport { mapGetters } from 'vuex';\n\n// 格式化日期函数\nvar formatDate = function formatDate(date) {\n  return formatDateTime(date);\n};\nexport default {\n  name: 'PostDetail',\n  data: function data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      editCommentDialogVisible: false,\n      editCommentContent: '',\n      currentEditingComment: null,\n      forceRefresh: false // 用于强制刷新评论列表的内部标志\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['isAuthenticated', 'isAdmin', 'userId'])), {}, {\n    isLogin: function isLogin() {\n      return this.isAuthenticated;\n    },\n    isPostAuthor: function isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId;\n    },\n    canManagePost: function canManagePost() {\n      return this.isLogin && (this.isAdmin || this.isPostAuthor);\n    }\n  }),\n  created: function created() {\n    var postId = this.$route.params.id;\n    if (postId) {\n      this.fetchPostDetail(postId);\n      this.fetchComments(postId);\n    } else {\n      this.$router.push({\n        name: 'PostList'\n      });\n    }\n  },\n  methods: {\n    formatDate: formatDate,\n    // 获取帖子详情\n    fetchPostDetail: function fetchPostDetail(id) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              console.log('开始获取帖子详情, ID:', id);\n              _context.next = 5;\n              return getPostDetail(id);\n            case 5:\n              response = _context.sent;\n              console.log('帖子详情响应:', response);\n              if (response && response.code === 0 && response.data) {\n                console.log('使用code=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else if (response && response.status === 0 && response.data) {\n                console.log('使用status=0格式处理帖子详情数据');\n                _this.post = response.data;\n                // 检查是否已点赞和收藏\n                _this.checkLikeAndFavorite();\n              } else {\n                console.error('获取帖子详情失败:', response ? response.msg : '未知错误');\n                _this.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '获取帖子详情失败');\n\n                // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n                // 添加延时重试\n                if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n                  console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情');\n                  setTimeout(function () {\n                    _this.fetchPostDetail(id);\n                  }, 1000);\n                } else {\n                  // 如果不是从发帖页面跳转，则返回帖子列表\n                  setTimeout(function () {\n                    _this.$router.push({\n                      name: 'PostList'\n                    });\n                  }, 1500);\n                }\n              }\n              _context.next = 15;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取帖子详情失败:', _context.t0);\n              _this.$message.error('获取帖子详情失败，请稍后再试');\n\n              // 添加延时重试\n              if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n                console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情');\n                setTimeout(function () {\n                  _this.fetchPostDetail(id);\n                }, 1000);\n              } else {\n                // 如果不是从发帖页面跳转，则返回帖子列表\n                setTimeout(function () {\n                  _this.$router.push({\n                    name: 'PostList'\n                  });\n                }, 1500);\n              }\n            case 15:\n              _context.prev = 15;\n              _this.loading = false;\n              return _context.finish(15);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 10, 15, 18]]);\n      }))();\n    },\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite: function checkLikeAndFavorite() {\n      // 这里需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      this.isLiked = false;\n      this.isFavorited = false;\n    },\n    // 获取评论列表\n    fetchComments: function fetchComments(postId) {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this2.commentsLoading && !_this2.forceRefresh)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 2:\n              _this2.commentsLoading = true;\n\n              // 返回Promise以便调用者可以使用then/catch\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                getPostComments(postId).then(function (response) {\n                  if (response.code === 0) {\n                    _this2.comments = response.data.results || [];\n                    _this2.commentsTotal = response.data.count || 0;\n\n                    // 更新帖子评论数，确保与后端同步\n                    if (_this2.post && typeof response.data.count === 'number') {\n                      _this2.post.comments_count = response.data.count;\n                    }\n                    resolve(response.data);\n                  } else {\n                    _this2.$message.error(response.msg || '获取评论列表失败');\n                    reject(new Error(response.msg || '获取评论列表失败'));\n                  }\n                })[\"catch\"](function (error) {\n                  console.error('获取评论列表失败:', error);\n                  _this2.$message.error('获取评论列表失败');\n                  reject(error);\n                })[\"finally\"](function () {\n                  _this2.commentsLoading = false;\n                  _this2.forceRefresh = false; // 重置强制刷新标志\n                });\n              }));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // 评论分页变化\n    handleCommentsPageChange: function handleCommentsPageChange(page) {\n      this.commentsQuery.page = page;\n      this.fetchComments(this.post.id);\n    },\n    // 前往板块页面\n    goToBoard: function goToBoard() {\n      if (this.post.board) {\n        this.$router.push({\n          name: 'BoardDetail',\n          params: {\n            id: this.post.board.id\n          }\n        });\n      }\n    },\n    // 点赞帖子\n    handleLike: function handleLike() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this3.isLogin) {\n                _context3.next = 4;\n                break;\n              }\n              _this3.$message.warning('请先登录');\n              _this3.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this3.$route.fullPath\n                }\n              });\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return likePost(_this3.post.id);\n            case 7:\n              response = _context3.sent;\n              if (response.code === 0) {\n                _this3.isLiked = !_this3.isLiked;\n                // 更新点赞数\n                if (_this3.isLiked) {\n                  _this3.post.likes_count++;\n                } else {\n                  _this3.post.likes_count--;\n                }\n                _this3.$message.success(response.msg || (_this3.isLiked ? '点赞成功' : '取消点赞成功'));\n              } else {\n                _this3.$message.error(response.msg || '操作失败');\n              }\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('点赞操作失败:', _context3.t0);\n              _this3.$message.error('点赞操作失败');\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 11]]);\n      }))();\n    },\n    // 收藏帖子\n    handleFavorite: function handleFavorite() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this4.isLogin) {\n                _context4.next = 4;\n                break;\n              }\n              _this4.$message.warning('请先登录');\n              _this4.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this4.$route.fullPath\n                }\n              });\n              return _context4.abrupt(\"return\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return favoritePost(_this4.post.id);\n            case 7:\n              response = _context4.sent;\n              if (response.code === 0) {\n                _this4.isFavorited = !_this4.isFavorited;\n                _this4.$message.success(response.msg || (_this4.isFavorited ? '收藏成功' : '取消收藏成功'));\n              } else {\n                _this4.$message.error(response.msg || '操作失败');\n              }\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('收藏操作失败:', _context4.t0);\n              _this4.$message.error('收藏操作失败');\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 11]]);\n      }))();\n    },\n    // 帖子管理操作\n    handleCommand: function handleCommand(command) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = command;\n              _context5.next = _context5.t0 === 'pin' ? 3 : _context5.t0 === 'feature' ? 5 : 7;\n              break;\n            case 3:\n              _this5.handlePinPost();\n              return _context5.abrupt(\"break\", 7);\n            case 5:\n              _this5.handleFeaturePost();\n              return _context5.abrupt(\"break\", 7);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // 编辑帖子\n    handleEditPost: function handleEditPost() {\n      this.$router.push({\n        name: 'PostEdit',\n        params: {\n          id: this.post.id\n        }\n      });\n    },\n    // 删除帖子\n    handleDeletePost: function handleDeletePost() {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var loading, response;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return _this6.$confirm('确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。', '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 3:\n              // 显示加载状态\n              loading = _this6.$loading({\n                lock: true,\n                text: '正在删除帖子...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context6.prev = 4;\n              _context6.next = 7;\n              return deletePost(_this6.post.id);\n            case 7:\n              response = _context6.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，直接返回帖子列表页\n                console.log('帖子删除成功，正在返回帖子列表页...');\n                // 返回帖子列表页\n                _this6.$router.push({\n                  name: 'PostList'\n                });\n              } else {\n                _this6.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context6.next = 17;\n              break;\n            case 12:\n              _context6.prev = 12;\n              _context6.t0 = _context6[\"catch\"](4);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除帖子请求失败:', _context6.t0);\n              _this6.$message.error('删除帖子失败，请检查网络连接');\n            case 17:\n              _context6.next = 22;\n              break;\n            case 19:\n              _context6.prev = 19;\n              _context6.t1 = _context6[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context6.t1 !== 'cancel') {\n                console.error('删除帖子操作异常:', _context6.t1);\n                _this6.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 22:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[0, 19], [4, 12]]);\n      }))();\n    },\n    // 置顶/取消置顶帖子\n    handlePinPost: function handlePinPost() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return pinPost(_this7.post.id);\n            case 3:\n              response = _context7.sent;\n              if (response.code === 0) {\n                _this7.post.is_pinned = !_this7.post.is_pinned;\n                _this7.$message.success(response.msg || (_this7.post.is_pinned ? '置顶成功' : '取消置顶成功'));\n              } else {\n                _this7.$message.error(response.msg || '操作失败');\n              }\n              _context7.next = 11;\n              break;\n            case 7:\n              _context7.prev = 7;\n              _context7.t0 = _context7[\"catch\"](0);\n              console.error('置顶操作失败:', _context7.t0);\n              _this7.$message.error('置顶操作失败');\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 7]]);\n      }))();\n    },\n    // 加精/取消加精帖子\n    handleFeaturePost: function handleFeaturePost() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return featurePost(_this8.post.id);\n            case 3:\n              response = _context8.sent;\n              if (response.code === 0) {\n                _this8.post.is_featured = !_this8.post.is_featured;\n                _this8.$message.success(response.msg || (_this8.post.is_featured ? '加精成功' : '取消加精成功'));\n              } else {\n                _this8.$message.error(response.msg || '操作失败');\n              }\n              _context8.next = 11;\n              break;\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('加精操作失败:', _context8.t0);\n              _this8.$message.error('加精操作失败');\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 7]]);\n      }))();\n    },\n    // 提交评论\n    submitComment: function submitComment() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var response, userInfo, newComment;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this9.isLogin) {\n                _context9.next = 4;\n                break;\n              }\n              _this9.$message.warning('请先登录');\n              _this9.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this9.$route.fullPath\n                }\n              });\n              return _context9.abrupt(\"return\");\n            case 4:\n              if (_this9.commentContent.trim()) {\n                _context9.next = 7;\n                break;\n              }\n              _this9.$message.warning('评论内容不能为空');\n              return _context9.abrupt(\"return\");\n            case 7:\n              _context9.prev = 7;\n              console.log('提交评论数据:', {\n                post: _this9.post.id,\n                content: _this9.commentContent\n              });\n              _context9.next = 11;\n              return createComment({\n                post: _this9.post.id,\n                content: _this9.commentContent\n              });\n            case 11:\n              response = _context9.sent;\n              console.log('评论提交响应:', response);\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 不显示成功消息\n                console.log('评论发表成功，不显示成功消息');\n\n                // 清空评论内容\n                _this9.commentContent = '';\n\n                // 获取新评论数据并直接添加到评论列表\n                if (response.data) {\n                  console.log('获取到新评论数据:', response.data);\n\n                  // 获取当前用户信息\n                  userInfo = _this9.$store.getters.userInfo;\n                  console.log('当前用户信息:', userInfo);\n\n                  // 构建评论对象\n                  newComment = _objectSpread(_objectSpread({}, response.data), {}, {\n                    user: userInfo,\n                    // 使用当前用户信息\n                    replies: [],\n                    // 初始化回复列表为空\n                    created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n                  });\n                  console.log('构建的新评论对象:', newComment);\n\n                  // 将新评论添加到评论列表的开头\n                  _this9.comments.unshift(newComment);\n                  console.log('更新后的评论列表:', _this9.comments);\n\n                  // 更新评论总数\n                  _this9.commentsTotal++;\n\n                  // 更新帖子评论数\n                  _this9.post.comments_count = (_this9.post.comments_count || 0) + 1;\n                } else {\n                  // 如果没有返回评论数据，则刷新评论列表\n                  console.log('未获取到评论数据，刷新评论列表');\n                  _this9.fetchComments(_this9.post.id);\n                }\n              } else {\n                console.error('评论发表失败，响应:', response);\n                _this9.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '评论发表失败');\n              }\n              _context9.next = 20;\n              break;\n            case 16:\n              _context9.prev = 16;\n              _context9.t0 = _context9[\"catch\"](7);\n              console.error('评论发表失败:', _context9.t0);\n              _this9.$message.error('评论发表失败，请检查网络连接');\n            case 20:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[7, 16]]);\n      }))();\n    },\n    // 回复评论\n    handleReply: function handleReply(comment) {\n      var reply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!this.isLogin) {\n        this.$message.warning('请先登录');\n        this.$router.push({\n          name: 'Login',\n          query: {\n            redirect: this.$route.fullPath\n          }\n        });\n        return;\n      }\n      this.replyingTo = comment.id;\n      this.replyContent = reply ? \"@\".concat(reply.user.nickname || reply.user.username, \" \") : '';\n    },\n    // 取消回复\n    cancelReply: function cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    // 提交回复\n    submitReply: function submitReply(comment) {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var response, userInfo, newReply;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              if (_this0.isLogin) {\n                _context0.next = 4;\n                break;\n              }\n              _this0.$message.warning('请先登录');\n              _this0.$router.push({\n                name: 'Login',\n                query: {\n                  redirect: _this0.$route.fullPath\n                }\n              });\n              return _context0.abrupt(\"return\");\n            case 4:\n              if (_this0.replyContent.trim()) {\n                _context0.next = 7;\n                break;\n              }\n              _this0.$message.warning('回复内容不能为空');\n              return _context0.abrupt(\"return\");\n            case 7:\n              _context0.prev = 7;\n              console.log('提交回复数据:', {\n                post: _this0.post.id,\n                parent: comment.id,\n                content: _this0.replyContent\n              });\n              _context0.next = 11;\n              return replyComment(_this0.post.id, comment.id, _this0.replyContent);\n            case 11:\n              response = _context0.sent;\n              console.log('回复提交响应:', response);\n              if (response && (response.code === 0 || response.status === 0)) {\n                // 不显示成功消息\n                console.log('回复发表成功，不显示成功消息');\n\n                // 清空回复状态\n                _this0.replyingTo = null;\n                _this0.replyContent = '';\n\n                // 获取新回复数据并直接添加到回复列表\n                if (response.data) {\n                  console.log('获取到新回复数据:', response.data);\n\n                  // 获取当前用户信息\n                  userInfo = _this0.$store.getters.userInfo;\n                  console.log('当前用户信息:', userInfo);\n\n                  // 构建回复对象\n                  newReply = _objectSpread(_objectSpread({}, response.data), {}, {\n                    user: userInfo,\n                    // 使用当前用户信息\n                    created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n                  });\n                  console.log('构建的新回复对象:', newReply);\n\n                  // 将新回复添加到对应评论的回复列表\n                  if (!comment.replies) {\n                    comment.replies = [];\n                  }\n                  comment.replies.push(newReply);\n                  console.log('更新后的回复列表:', comment.replies);\n\n                  // 更新帖子评论数\n                  _this0.post.comments_count = (_this0.post.comments_count || 0) + 1;\n                } else {\n                  // 如果没有返回回复数据，则刷新评论列表\n                  console.log('未获取到回复数据，刷新评论列表');\n                  _this0.fetchComments(_this0.post.id);\n                }\n              } else {\n                console.error('回复发表失败，响应:', response);\n                _this0.$message.error((response === null || response === void 0 ? void 0 : response.msg) || '回复发表失败');\n              }\n              _context0.next = 20;\n              break;\n            case 16:\n              _context0.prev = 16;\n              _context0.t0 = _context0[\"catch\"](7);\n              console.error('回复发表失败:', _context0.t0);\n              _this0.$message.error('回复发表失败，请检查网络连接');\n            case 20:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, null, [[7, 16]]);\n      }))();\n    },\n    // 判断是否可以管理评论\n    canManageComment: function canManageComment(comment) {\n      return this.isLogin && (this.isAdmin || comment.user && comment.user.id === this.userId);\n    },\n    // 评论操作方法已直接绑定到按钮上，不再需要此方法\n    // 编辑评论\n    handleEditComment: function handleEditComment(comment) {\n      this.currentEditingComment = comment;\n      this.editCommentContent = comment.content;\n      this.editCommentDialogVisible = true;\n    },\n    // 提交编辑评论\n    submitEditComment: function submitEditComment() {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n          while (1) switch (_context1.prev = _context1.next) {\n            case 0:\n              if (_this1.editCommentContent.trim()) {\n                _context1.next = 3;\n                break;\n              }\n              _this1.$message.warning('评论内容不能为空');\n              return _context1.abrupt(\"return\");\n            case 3:\n              _context1.prev = 3;\n              _context1.next = 6;\n              return updateComment(_this1.currentEditingComment.id, {\n                content: _this1.editCommentContent\n              });\n            case 6:\n              response = _context1.sent;\n              if (response.code === 0) {\n                _this1.$message.success(response.msg || '评论更新成功');\n                _this1.editCommentDialogVisible = false;\n                // 刷新评论列表\n                _this1.fetchComments(_this1.post.id);\n              } else {\n                _this1.$message.error(response.msg || '评论更新失败');\n              }\n              _context1.next = 14;\n              break;\n            case 10:\n              _context1.prev = 10;\n              _context1.t0 = _context1[\"catch\"](3);\n              console.error('评论更新失败:', _context1.t0);\n              _this1.$message.error('评论更新失败');\n            case 14:\n            case \"end\":\n              return _context1.stop();\n          }\n        }, _callee1, null, [[3, 10]]);\n      }))();\n    },\n    // 删除评论\n    handleDeleteComment: function handleDeleteComment(comment) {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var hasReplies, confirmMessage, loading, response, commentsToDecrease, parentComment;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              // 判断是否有回复，提供更详细的确认信息\n              hasReplies = comment.replies && comment.replies.length > 0;\n              confirmMessage = hasReplies ? \"\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u8FD9\\u6761\\u8BC4\\u8BBA\\u5417\\uFF1F\\u5220\\u9664\\u540E\\u5C06\\u540C\\u65F6\\u5220\\u9664\\u8BE5\\u8BC4\\u8BBA\\u4E0B\\u7684 \".concat(comment.replies.length, \" \\u6761\\u56DE\\u590D\\uFF0C\\u4E14\\u65E0\\u6CD5\\u6062\\u590D\\u3002\") : '确定要删除这条评论吗？删除后将无法恢复。';\n              _context10.next = 5;\n              return _this10.$confirm(confirmMessage, '删除确认', {\n                confirmButtonText: '确定删除',\n                cancelButtonText: '取消',\n                type: 'warning',\n                distinguishCancelAndClose: true,\n                closeOnClickModal: false\n              });\n            case 5:\n              // 显示加载状态\n              loading = _this10.$loading({\n                lock: true,\n                text: '正在删除评论...',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n              });\n              _context10.prev = 6;\n              _context10.next = 9;\n              return deleteComment(comment.id);\n            case 9:\n              response = _context10.sent;\n              loading.close(); // 关闭加载状态\n\n              if (response.code === 0) {\n                // 不显示任何提示弹窗，只在控制台输出日志\n                console.log('评论删除成功，正在刷新页面...');\n\n                // 计算需要减少的评论数\n                commentsToDecrease = hasReplies ? 1 + comment.replies.length : 1; // 更新帖子评论数\n                _this10.post.comments_count = Math.max(0, _this10.post.comments_count - commentsToDecrease);\n\n                // 标记为加载中，防止用户重复操作\n                _this10.commentsLoading = true;\n\n                // 直接从前端状态中移除已删除的评论\n                if (comment.parent) {\n                  // 如果是回复，从父评论的回复列表中移除\n                  parentComment = _this10.comments.find(function (c) {\n                    return c.id === comment.parent;\n                  });\n                  if (parentComment && parentComment.replies) {\n                    parentComment.replies = parentComment.replies.filter(function (r) {\n                      return r.id !== comment.id;\n                    });\n                  }\n                } else {\n                  // 如果是顶级评论，从评论列表中移除\n                  _this10.comments = _this10.comments.filter(function (c) {\n                    return c.id !== comment.id;\n                  });\n                  // 更新评论总数\n                  _this10.commentsTotal = Math.max(0, _this10.commentsTotal - commentsToDecrease);\n                }\n\n                // 增加延迟时间，确保后端有足够时间处理删除操作\n                // 并在回调中显示成功消息\n                setTimeout(function () {\n                  // 设置强制刷新标志\n                  _this10.forceRefresh = true;\n\n                  // 强制刷新评论列表，不显示任何提示弹窗\n                  _this10.fetchComments(_this10.post.id).then(function () {\n                    // 刷新成功，不显示任何提示\n                    // console.log('评论删除成功，页面已刷新')\n                  })[\"catch\"](function (err) {\n                    console.error('刷新评论列表失败:', err);\n                    // 如果刷新失败，尝试再次刷新，仍然不显示提示\n                    setTimeout(function () {\n                      _this10.forceRefresh = true;\n                      _this10.fetchComments(_this10.post.id);\n                    }, 1000);\n                  })[\"finally\"](function () {\n                    _this10.commentsLoading = false;\n                  });\n                }, 800); // 增加延迟时间到800毫秒\n              } else {\n                _this10.$message.error(response.msg || '删除失败，请稍后重试');\n              }\n              _context10.next = 19;\n              break;\n            case 14:\n              _context10.prev = 14;\n              _context10.t0 = _context10[\"catch\"](6);\n              loading.close(); // 确保加载状态被关闭\n              console.error('删除评论请求失败:', _context10.t0);\n              _this10.$message.error('删除评论失败，请检查网络连接');\n            case 19:\n              _context10.next = 24;\n              break;\n            case 21:\n              _context10.prev = 21;\n              _context10.t1 = _context10[\"catch\"](0);\n              // 用户取消删除，不做任何处理\n              if (_context10.t1 !== 'cancel') {\n                console.error('删除评论操作异常:', _context10.t1);\n                _this10.$message.error('操作异常，请刷新页面后重试');\n              }\n            case 24:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[0, 21], [6, 14]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["getPostDetail","likePost","favoritePost","pinPost","featurePost","deletePost","getPostComments","createComment","replyComment","updateComment","deleteComment","formatDateTime","mapGetters","formatDate","date","name","data","loading","commentsLoading","post","isLiked","isFavorited","comments","commentsTotal","commentsQuery","page","limit","commentContent","replyingTo","replyContent","editCommentDialogVisible","editCommentContent","currentEditingComment","forceRefresh","computed","_objectSpread","isLogin","isAuthenticated","isPostAuthor","user","id","userId","canManagePost","isAdmin","created","postId","$route","params","fetchPostDetail","fetchComments","$router","push","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","console","log","sent","code","checkLikeAndFavorite","status","error","msg","$message","document","referrer","includes","setTimeout","t0","finish","stop","_this2","_callee2","_callee2$","_context2","abrupt","Promise","resolve","reject","then","results","count","comments_count","Error","handleCommentsPageChange","goToBoard","board","handleLike","_this3","_callee3","_callee3$","_context3","warning","query","redirect","fullPath","likes_count","success","handleFavorite","_this4","_callee4","_callee4$","_context4","handleCommand","command","_this5","_callee5","_callee5$","_context5","handlePinPost","handleFeaturePost","handleEditPost","handleDeletePost","_this6","_callee6","_callee6$","_context6","$confirm","confirmButtonText","cancelButtonText","type","distinguishCancelAndClose","closeOnClickModal","$loading","lock","text","spinner","background","close","t1","_this7","_callee7","_callee7$","_context7","is_pinned","_this8","_callee8","_callee8$","_context8","is_featured","submitComment","_this9","_callee9","userInfo","newComment","_callee9$","_context9","trim","content","$store","getters","replies","created_at","Date","toISOString","unshift","handleReply","comment","reply","arguments","length","undefined","concat","nickname","username","cancelReply","submitReply","_this0","_callee0","newReply","_callee0$","_context0","parent","canManageComment","handleEditComment","submitEditComment","_this1","_callee1","_callee1$","_context1","handleDeleteComment","_this10","_callee10","hasReplies","confirmMessage","commentsToDecrease","parentComment","_callee10$","_context10","Math","max","find","c","filter","r","err"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\post\\PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail-container\">\n    <!-- 帖子详情卡片 -->\n    <el-card class=\"post-detail-card\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      <div v-else>\n        <div class=\"post-header\">\n          <h1 class=\"post-title\">\n            <el-tag v-if=\"post.is_pinned\" size=\"medium\" type=\"danger\">置顶</el-tag>\n            <el-tag v-if=\"post.is_featured\" size=\"medium\" type=\"success\">精华</el-tag>\n            {{ post.title }}\n          </h1>\n          <div class=\"post-meta\">\n            <div class=\"post-author\">\n              <el-avatar :size=\"40\" :src=\"post.user?.avatar_url || ''\">\n                {{ post.user?.nickname?.charAt(0) || post.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ post.user?.nickname || post.user?.username }}</div>\n                <div class=\"post-time\">发布于 {{ formatDate(post.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"post-board\" @click=\"goToBoard\">\n              <i class=\"el-icon-s-grid\"></i>\n              <span>{{ post.board?.name }}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"post-content\">\n          {{ post.content }}\n        </div>\n\n        <div class=\"post-footer\">\n          <div class=\"post-stats\">\n            <span><i class=\"el-icon-view\"></i> {{ post.views }}</span>\n            <span><i class=\"el-icon-star-on\"></i> {{ post.likes_count }}</span>\n            <span><i class=\"el-icon-chat-dot-round\"></i> {{ post.comments_count }}</span>\n          </div>\n          <div class=\"post-actions\">\n            <!-- 帖子作者可见的操作按钮 -->\n            <template v-if=\"isPostAuthor\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditPost\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeletePost\"\n              >\n                删除\n              </el-button>\n            </template>\n\n            <!-- 非作者可见的操作按钮 -->\n            <template v-else>\n              <el-button\n                :type=\"isLiked ? 'primary' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-star-on\"\n                @click=\"handleLike\"\n              >\n                {{ isLiked ? '已点赞' : '点赞' }}\n              </el-button>\n              <el-button\n                :type=\"isFavorited ? 'warning' : 'default'\"\n                size=\"small\"\n                icon=\"el-icon-collection-tag\"\n                @click=\"handleFavorite\"\n              >\n                {{ isFavorited ? '已收藏' : '收藏' }}\n              </el-button>\n            </template>\n\n            <!-- 管理员操作下拉菜单 -->\n            <el-dropdown v-if=\"isAdmin\" trigger=\"click\" @command=\"handleCommand\">\n              <el-button size=\"small\" icon=\"el-icon-setting\">\n                管理\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"pin\">\n                  {{ post.is_pinned ? '取消置顶' : '置顶' }}\n                </el-dropdown-item>\n                <el-dropdown-item command=\"feature\">\n                  {{ post.is_featured ? '取消加精' : '加精' }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 评论区 -->\n    <el-card class=\"comments-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>评论区 ({{ post.comments_count || 0 }})</span>\n      </div>\n\n      <!-- 发表评论 -->\n      <div class=\"comment-form\">\n        <el-input\n          v-model=\"commentContent\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"发表你的评论...\"\n          :disabled=\"!isLogin\"\n        ></el-input>\n        <div class=\"comment-form-footer\">\n          <el-button\n            type=\"primary\"\n            :disabled=\"!isLogin || !commentContent.trim()\"\n            @click=\"submitComment\"\n          >\n            发表评论\n          </el-button>\n          <div v-if=\"!isLogin\" class=\"login-tip\">\n            请先 <router-link :to=\"{ name: 'Login', query: { redirect: $route.fullPath } }\">登录</router-link> 后发表评论\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div v-if=\"commentsLoading\" class=\"loading-container\">\n        <el-skeleton :rows=\"5\" animated />\n      </div>\n      <div v-else-if=\"comments.length === 0\" class=\"empty-comments\">\n        <i class=\"el-icon-chat-dot-round\"></i>\n        <p>暂无评论，快来发表第一条评论吧！</p>\n      </div>\n      <div v-else class=\"comments-list\">\n        <div\n          v-for=\"comment in comments\"\n          :key=\"comment.id\"\n          class=\"comment-item\"\n        >\n          <div class=\"comment-header\">\n            <div class=\"comment-author\">\n              <el-avatar :size=\"32\" :src=\"comment.user?.avatar_url || ''\">\n                {{ comment.user?.nickname?.charAt(0) || comment.user?.username?.charAt(0) || 'U' }}\n              </el-avatar>\n              <div class=\"author-info\">\n                <div class=\"author-name\">{{ comment.user?.nickname || comment.user?.username }}</div>\n                <div class=\"comment-time\">{{ formatDate(comment.created_at) }}</div>\n              </div>\n            </div>\n            <div class=\"comment-actions\">\n              <el-button text size=\"small\" @click=\"handleReply(comment)\">回复</el-button>\n              <!-- 删除评论按钮 -->\n              <el-button\n                v-if=\"canManageComment(comment)\"\n                text\n                type=\"danger\"\n                size=\"small\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDeleteComment(comment)\"\n              >删除</el-button>\n              <!-- 编辑评论按钮 -->\n              <el-button\n                v-if=\"canManageComment(comment)\"\n                text\n                type=\"primary\"\n                size=\"small\"\n                icon=\"el-icon-edit\"\n                @click=\"handleEditComment(comment)\"\n              >编辑</el-button>\n            </div>\n          </div>\n\n          <div class=\"comment-content\">\n            {{ comment.content }}\n          </div>\n\n          <!-- 回复表单 -->\n          <div v-if=\"replyingTo === comment.id\" class=\"reply-form\">\n            <el-input\n              v-model=\"replyContent\"\n              type=\"textarea\"\n              :rows=\"2\"\n              placeholder=\"回复评论...\"\n            ></el-input>\n            <div class=\"reply-form-footer\">\n              <el-button size=\"small\" @click=\"cancelReply\">取消</el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                :disabled=\"!replyContent.trim()\"\n                @click=\"submitReply(comment)\"\n              >\n                回复\n              </el-button>\n            </div>\n          </div>\n\n          <!-- 回复列表 -->\n          <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\n            <div\n              v-for=\"reply in comment.replies\"\n              :key=\"reply.id\"\n              class=\"reply-item\"\n            >\n              <div class=\"reply-header\">\n                <div class=\"reply-author\">\n                  <el-avatar :size=\"24\" :src=\"reply.user?.avatar_url || ''\">\n                    {{ reply.user?.nickname?.charAt(0) || reply.user?.username?.charAt(0) || 'U' }}\n                  </el-avatar>\n                  <div class=\"author-info\">\n                    <div class=\"author-name\">{{ reply.user?.nickname || reply.user?.username }}</div>\n                    <div class=\"reply-time\">{{ formatDate(reply.created_at) }}</div>\n                  </div>\n                </div>\n                <div class=\"reply-actions\">\n                  <el-button text size=\"small\" @click=\"handleReply(comment, reply)\">回复</el-button>\n                  <!-- 删除回复按钮 -->\n                  <el-button\n                    v-if=\"canManageComment(reply)\"\n                    text\n                    type=\"danger\"\n                    size=\"small\"\n                    icon=\"el-icon-delete\"\n                    @click=\"handleDeleteComment(reply)\"\n                  >删除</el-button>\n                  <!-- 编辑回复按钮 -->\n                  <el-button\n                    v-if=\"canManageComment(reply)\"\n                    text\n                    type=\"primary\"\n                    size=\"small\"\n                    icon=\"el-icon-edit\"\n                    @click=\"handleEditComment(reply)\"\n                  >编辑</el-button>\n                </div>\n              </div>\n\n              <div class=\"reply-content\">\n                {{ reply.content }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 评论分页 -->\n      <div v-if=\"comments.length > 0\" class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"commentsTotal\"\n          :page-size=\"commentsQuery.limit\"\n          v-model:current-page=\"commentsQuery.page\"\n          @current-change=\"handleCommentsPageChange\"\n        >\n        </el-pagination>\n      </div>\n    </el-card>\n\n    <!-- 编辑评论对话框 -->\n    <el-dialog\n      title=\"编辑评论\"\n      v-model:visible=\"editCommentDialogVisible\"\n      width=\"500px\"\n    >\n      <el-input\n        v-model=\"editCommentContent\"\n        type=\"textarea\"\n        :rows=\"4\"\n        placeholder=\"请输入评论内容\"\n      ></el-input>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"editCommentDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitEditComment\">确 定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { getPostDetail, likePost, favoritePost, pinPost, featurePost, deletePost } from '@/api/post'\nimport { getPostComments, createComment, replyComment, updateComment, deleteComment } from '@/api/comment'\nimport { formatDateTime } from '@/utils/index'\nimport { mapGetters } from 'vuex'\n\n// 格式化日期函数\nconst formatDate = (date) => {\n  return formatDateTime(date)\n}\n\nexport default {\n  name: 'PostDetail',\n  data() {\n    return {\n      loading: false,\n      commentsLoading: false,\n      post: {},\n      isLiked: false,\n      isFavorited: false,\n      comments: [],\n      commentsTotal: 0,\n      commentsQuery: {\n        page: 1,\n        limit: 10\n      },\n      commentContent: '',\n      replyingTo: null,\n      replyContent: '',\n      editCommentDialogVisible: false,\n      editCommentContent: '',\n      currentEditingComment: null,\n      forceRefresh: false // 用于强制刷新评论列表的内部标志\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isAuthenticated',\n      'isAdmin',\n      'userId'\n    ]),\n    isLogin() {\n      return this.isAuthenticated\n    },\n    isPostAuthor() {\n      return this.isLogin && this.post.user && this.post.user.id === this.userId\n    },\n    canManagePost() {\n      return this.isLogin && (\n        this.isAdmin ||\n        this.isPostAuthor\n      )\n    }\n  },\n  created() {\n    const postId = this.$route.params.id\n    if (postId) {\n      this.fetchPostDetail(postId)\n      this.fetchComments(postId)\n    } else {\n      this.$router.push({ name: 'PostList' })\n    }\n  },\n  methods: {\n    formatDate,\n\n    // 获取帖子详情\n    async fetchPostDetail(id) {\n      this.loading = true\n      try {\n        console.log('开始获取帖子详情, ID:', id)\n        const response = await getPostDetail(id)\n        console.log('帖子详情响应:', response)\n\n        if (response && response.code === 0 && response.data) {\n          console.log('使用code=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else if (response && response.status === 0 && response.data) {\n          console.log('使用status=0格式处理帖子详情数据')\n          this.post = response.data\n          // 检查是否已点赞和收藏\n          this.checkLikeAndFavorite()\n        } else {\n          console.error('获取帖子详情失败:', response ? response.msg : '未知错误')\n          this.$message.error(response?.msg || '获取帖子详情失败')\n\n          // 如果是从发帖页面跳转过来的，可能是因为帖子还未完全保存到数据库\n          // 添加延时重试\n          if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n            console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情')\n            setTimeout(() => {\n              this.fetchPostDetail(id)\n            }, 1000)\n          } else {\n            // 如果不是从发帖页面跳转，则返回帖子列表\n            setTimeout(() => {\n              this.$router.push({ name: 'PostList' })\n            }, 1500)\n          }\n        }\n      } catch (error) {\n        console.error('获取帖子详情失败:', error)\n        this.$message.error('获取帖子详情失败，请稍后再试')\n\n        // 添加延时重试\n        if (document.referrer.includes('/post/create') || document.referrer.includes('/post/edit')) {\n          console.log('检测到从发帖页面跳转，将在1秒后重试获取帖子详情')\n          setTimeout(() => {\n            this.fetchPostDetail(id)\n          }, 1000)\n        } else {\n          // 如果不是从发帖页面跳转，则返回帖子列表\n          setTimeout(() => {\n            this.$router.push({ name: 'PostList' })\n          }, 1500)\n        }\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 检查是否已点赞和收藏\n    checkLikeAndFavorite() {\n      // 这里需要调用后端API检查是否已点赞和收藏\n      // 由于我们没有实现这个API，这里先模拟一下\n      this.isLiked = false\n      this.isFavorited = false\n    },\n\n    // 获取评论列表\n    async fetchComments(postId) {\n      // 如果已经在加载中，则不重复加载\n      if (this.commentsLoading && !this.forceRefresh) {\n        return Promise.resolve()\n      }\n\n      this.commentsLoading = true\n\n      // 返回Promise以便调用者可以使用then/catch\n      return new Promise((resolve, reject) => {\n        getPostComments(postId)\n          .then(response => {\n            if (response.code === 0) {\n              this.comments = response.data.results || []\n              this.commentsTotal = response.data.count || 0\n\n              // 更新帖子评论数，确保与后端同步\n              if (this.post && typeof response.data.count === 'number') {\n                this.post.comments_count = response.data.count\n              }\n\n              resolve(response.data)\n            } else {\n              this.$message.error(response.msg || '获取评论列表失败')\n              reject(new Error(response.msg || '获取评论列表失败'))\n            }\n          })\n          .catch(error => {\n            console.error('获取评论列表失败:', error)\n            this.$message.error('获取评论列表失败')\n            reject(error)\n          })\n          .finally(() => {\n            this.commentsLoading = false\n            this.forceRefresh = false // 重置强制刷新标志\n          })\n      })\n    },\n\n    // 评论分页变化\n    handleCommentsPageChange(page) {\n      this.commentsQuery.page = page\n      this.fetchComments(this.post.id)\n    },\n\n    // 前往板块页面\n    goToBoard() {\n      if (this.post.board) {\n        this.$router.push({ name: 'BoardDetail', params: { id: this.post.board.id } })\n      }\n    },\n\n    // 点赞帖子\n    async handleLike() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await likePost(this.post.id)\n        if (response.code === 0) {\n          this.isLiked = !this.isLiked\n          // 更新点赞数\n          if (this.isLiked) {\n            this.post.likes_count++\n          } else {\n            this.post.likes_count--\n          }\n          this.$message.success(response.msg || (this.isLiked ? '点赞成功' : '取消点赞成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('点赞操作失败:', error)\n        this.$message.error('点赞操作失败')\n      }\n    },\n\n    // 收藏帖子\n    async handleFavorite() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      try {\n        const response = await favoritePost(this.post.id)\n        if (response.code === 0) {\n          this.isFavorited = !this.isFavorited\n          this.$message.success(response.msg || (this.isFavorited ? '收藏成功' : '取消收藏成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('收藏操作失败:', error)\n        this.$message.error('收藏操作失败')\n      }\n    },\n\n    // 帖子管理操作\n    async handleCommand(command) {\n      switch (command) {\n        case 'pin':\n          this.handlePinPost()\n          break\n        case 'feature':\n          this.handleFeaturePost()\n          break\n      }\n    },\n\n    // 编辑帖子\n    handleEditPost() {\n      this.$router.push({ name: 'PostEdit', params: { id: this.post.id } })\n    },\n\n    // 删除帖子\n    async handleDeletePost() {\n      try {\n        // 更详细的确认提示\n        await this.$confirm(\n          '确定要删除这篇帖子吗？删除后将无法恢复，帖子下的所有评论也将被删除。',\n          '删除确认',\n          {\n            confirmButtonText: '确定删除',\n            cancelButtonText: '取消',\n            type: 'warning',\n            distinguishCancelAndClose: true,\n            closeOnClickModal: false\n          }\n        )\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除帖子...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deletePost(this.post.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，直接返回帖子列表页\n            console.log('帖子删除成功，正在返回帖子列表页...')\n            // 返回帖子列表页\n            this.$router.push({ name: 'PostList' })\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除帖子请求失败:', err)\n          this.$message.error('删除帖子失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除帖子操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    },\n\n    // 置顶/取消置顶帖子\n    async handlePinPost() {\n      try {\n        const response = await pinPost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_pinned = !this.post.is_pinned\n          this.$message.success(response.msg || (this.post.is_pinned ? '置顶成功' : '取消置顶成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('置顶操作失败:', error)\n        this.$message.error('置顶操作失败')\n      }\n    },\n\n    // 加精/取消加精帖子\n    async handleFeaturePost() {\n      try {\n        const response = await featurePost(this.post.id)\n        if (response.code === 0) {\n          this.post.is_featured = !this.post.is_featured\n          this.$message.success(response.msg || (this.post.is_featured ? '加精成功' : '取消加精成功'))\n        } else {\n          this.$message.error(response.msg || '操作失败')\n        }\n      } catch (error) {\n        console.error('加精操作失败:', error)\n        this.$message.error('加精操作失败')\n      }\n    },\n\n    // 提交评论\n    async submitComment() {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.commentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交评论数据:', {\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        const response = await createComment({\n          post: this.post.id,\n          content: this.commentContent\n        })\n\n        console.log('评论提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('评论发表成功，不显示成功消息')\n\n          // 清空评论内容\n          this.commentContent = ''\n\n          // 获取新评论数据并直接添加到评论列表\n          if (response.data) {\n            console.log('获取到新评论数据:', response.data)\n\n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            console.log('当前用户信息:', userInfo)\n\n            // 构建评论对象\n            const newComment = {\n              ...response.data,\n              user: userInfo, // 使用当前用户信息\n              replies: [], // 初始化回复列表为空\n              created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n            };\n\n            console.log('构建的新评论对象:', newComment)\n\n            // 将新评论添加到评论列表的开头\n            this.comments.unshift(newComment);\n            console.log('更新后的评论列表:', this.comments)\n\n            // 更新评论总数\n            this.commentsTotal++;\n\n            // 更新帖子评论数\n            this.post.comments_count = (this.post.comments_count || 0) + 1;\n          } else {\n            // 如果没有返回评论数据，则刷新评论列表\n            console.log('未获取到评论数据，刷新评论列表')\n            this.fetchComments(this.post.id);\n          }\n        } else {\n          console.error('评论发表失败，响应:', response)\n          this.$message.error(response?.msg || '评论发表失败')\n        }\n      } catch (error) {\n        console.error('评论发表失败:', error)\n        this.$message.error('评论发表失败，请检查网络连接')\n      }\n    },\n\n    // 回复评论\n    handleReply(comment, reply = null) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      this.replyingTo = comment.id\n      this.replyContent = reply ? `@${reply.user.nickname || reply.user.username} ` : ''\n    },\n\n    // 取消回复\n    cancelReply() {\n      this.replyingTo = null\n      this.replyContent = ''\n    },\n\n    // 提交回复\n    async submitReply(comment) {\n      if (!this.isLogin) {\n        this.$message.warning('请先登录')\n        this.$router.push({ name: 'Login', query: { redirect: this.$route.fullPath } })\n        return\n      }\n\n      if (!this.replyContent.trim()) {\n        this.$message.warning('回复内容不能为空')\n        return\n      }\n\n      try {\n        console.log('提交回复数据:', {\n          post: this.post.id,\n          parent: comment.id,\n          content: this.replyContent\n        })\n\n        const response = await replyComment(\n          this.post.id,\n          comment.id,\n          this.replyContent\n        )\n\n        console.log('回复提交响应:', response)\n\n        if (response && (response.code === 0 || response.status === 0)) {\n          // 不显示成功消息\n          console.log('回复发表成功，不显示成功消息')\n\n          // 清空回复状态\n          this.replyingTo = null\n          this.replyContent = ''\n\n          // 获取新回复数据并直接添加到回复列表\n          if (response.data) {\n            console.log('获取到新回复数据:', response.data)\n\n            // 获取当前用户信息\n            const userInfo = this.$store.getters.userInfo\n            console.log('当前用户信息:', userInfo)\n\n            // 构建回复对象\n            const newReply = {\n              ...response.data,\n              user: userInfo, // 使用当前用户信息\n              created_at: response.data.created_at || new Date().toISOString() // 优先使用服务器返回的时间\n            };\n\n            console.log('构建的新回复对象:', newReply)\n\n            // 将新回复添加到对应评论的回复列表\n            if (!comment.replies) {\n              comment.replies = [];\n            }\n            comment.replies.push(newReply);\n            console.log('更新后的回复列表:', comment.replies)\n\n            // 更新帖子评论数\n            this.post.comments_count = (this.post.comments_count || 0) + 1;\n          } else {\n            // 如果没有返回回复数据，则刷新评论列表\n            console.log('未获取到回复数据，刷新评论列表')\n            this.fetchComments(this.post.id);\n          }\n        } else {\n          console.error('回复发表失败，响应:', response)\n          this.$message.error(response?.msg || '回复发表失败')\n        }\n      } catch (error) {\n        console.error('回复发表失败:', error)\n        this.$message.error('回复发表失败，请检查网络连接')\n      }\n    },\n\n    // 判断是否可以管理评论\n    canManageComment(comment) {\n      return this.isLogin && (\n        this.isAdmin ||\n        (comment.user && comment.user.id === this.userId)\n      )\n    },\n\n    // 评论操作方法已直接绑定到按钮上，不再需要此方法\n\n    // 编辑评论\n    handleEditComment(comment) {\n      this.currentEditingComment = comment\n      this.editCommentContent = comment.content\n      this.editCommentDialogVisible = true\n    },\n\n    // 提交编辑评论\n    async submitEditComment() {\n      if (!this.editCommentContent.trim()) {\n        this.$message.warning('评论内容不能为空')\n        return\n      }\n\n      try {\n        const response = await updateComment(this.currentEditingComment.id, {\n          content: this.editCommentContent\n        })\n\n        if (response.code === 0) {\n          this.$message.success(response.msg || '评论更新成功')\n          this.editCommentDialogVisible = false\n          // 刷新评论列表\n          this.fetchComments(this.post.id)\n        } else {\n          this.$message.error(response.msg || '评论更新失败')\n        }\n      } catch (error) {\n        console.error('评论更新失败:', error)\n        this.$message.error('评论更新失败')\n      }\n    },\n\n    // 删除评论\n    async handleDeleteComment(comment) {\n      try {\n        // 判断是否有回复，提供更详细的确认信息\n        const hasReplies = comment.replies && comment.replies.length > 0\n        const confirmMessage = hasReplies\n          ? `确定要删除这条评论吗？删除后将同时删除该评论下的 ${comment.replies.length} 条回复，且无法恢复。`\n          : '确定要删除这条评论吗？删除后将无法恢复。'\n\n        await this.$confirm(confirmMessage, '删除确认', {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          distinguishCancelAndClose: true,\n          closeOnClickModal: false\n        })\n\n        // 显示加载状态\n        const loading = this.$loading({\n          lock: true,\n          text: '正在删除评论...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        })\n\n        try {\n          const response = await deleteComment(comment.id)\n          loading.close() // 关闭加载状态\n\n          if (response.code === 0) {\n            // 不显示任何提示弹窗，只在控制台输出日志\n            console.log('评论删除成功，正在刷新页面...')\n\n            // 计算需要减少的评论数\n            const commentsToDecrease = hasReplies ? (1 + comment.replies.length) : 1\n\n            // 更新帖子评论数\n            this.post.comments_count = Math.max(0, this.post.comments_count - commentsToDecrease)\n\n            // 标记为加载中，防止用户重复操作\n            this.commentsLoading = true\n\n            // 直接从前端状态中移除已删除的评论\n            if (comment.parent) {\n              // 如果是回复，从父评论的回复列表中移除\n              const parentComment = this.comments.find(c => c.id === comment.parent)\n              if (parentComment && parentComment.replies) {\n                parentComment.replies = parentComment.replies.filter(r => r.id !== comment.id)\n              }\n            } else {\n              // 如果是顶级评论，从评论列表中移除\n              this.comments = this.comments.filter(c => c.id !== comment.id)\n              // 更新评论总数\n              this.commentsTotal = Math.max(0, this.commentsTotal - commentsToDecrease)\n            }\n\n            // 增加延迟时间，确保后端有足够时间处理删除操作\n            // 并在回调中显示成功消息\n            setTimeout(() => {\n              // 设置强制刷新标志\n              this.forceRefresh = true\n\n              // 强制刷新评论列表，不显示任何提示弹窗\n              this.fetchComments(this.post.id).then(() => {\n                // 刷新成功，不显示任何提示\n                // console.log('评论删除成功，页面已刷新')\n              }).catch(err => {\n                console.error('刷新评论列表失败:', err)\n                // 如果刷新失败，尝试再次刷新，仍然不显示提示\n                setTimeout(() => {\n                  this.forceRefresh = true\n                  this.fetchComments(this.post.id)\n                }, 1000)\n              }).finally(() => {\n                this.commentsLoading = false\n              })\n            }, 800) // 增加延迟时间到800毫秒\n          } else {\n            this.$message.error(response.msg || '删除失败，请稍后重试')\n          }\n        } catch (err) {\n          loading.close() // 确保加载状态被关闭\n          console.error('删除评论请求失败:', err)\n          this.$message.error('删除评论失败，请检查网络连接')\n        }\n      } catch (error) {\n        // 用户取消删除，不做任何处理\n        if (error !== 'cancel') {\n          console.error('删除评论操作异常:', error)\n          this.$message.error('操作异常，请刷新页面后重试')\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.post-detail-container {\n  padding: 20px;\n}\n\n.post-detail-card,\n.comments-card {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 20px 0;\n}\n\n.post-header {\n  margin-bottom: 20px;\n}\n\n.post-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-title .el-tag {\n  margin-right: 10px;\n}\n\n.post-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.post-author {\n  display: flex;\n  align-items: center;\n}\n\n.author-info {\n  margin-left: 10px;\n}\n\n.author-name {\n  font-weight: bold;\n}\n\n.post-time,\n.comment-time,\n.reply-time {\n  font-size: 12px;\n  color: #909399;\n}\n\n.post-board {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #409EFF;\n}\n\n.post-board i {\n  margin-right: 5px;\n}\n\n.post-content {\n  line-height: 1.6;\n  margin-bottom: 20px;\n  white-space: pre-wrap;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 15px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.post-stats {\n  display: flex;\n  color: #909399;\n}\n\n.post-stats span {\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n}\n\n.post-stats span i {\n  margin-right: 5px;\n}\n\n.post-actions {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.post-actions .el-button {\n  margin-left: 0;\n}\n\n.comment-form {\n  margin-bottom: 20px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n}\n\n.login-tip {\n  font-size: 14px;\n  color: #909399;\n}\n\n.login-tip a {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.empty-comments {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #909399;\n}\n\n.empty-comments i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.comments-list {\n  margin-bottom: 20px;\n}\n\n.comment-item {\n  padding: 15px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.comment-item:last-child {\n  border-bottom: none;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-author {\n  display: flex;\n  align-items: center;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.comment-content {\n  line-height: 1.6;\n  margin-bottom: 10px;\n  white-space: pre-wrap;\n}\n\n.reply-form {\n  margin: 10px 0 10px 40px;\n}\n\n.reply-form-footer {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n.replies-list {\n  margin-left: 40px;\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #F5F7FA;\n  border-radius: 4px;\n}\n\n.reply-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.reply-item:last-child {\n  border-bottom: none;\n}\n\n.reply-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.reply-author {\n  display: flex;\n  align-items: center;\n}\n\n.reply-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.reply-content {\n  line-height: 1.6;\n  white-space: pre-wrap;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}