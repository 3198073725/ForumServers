{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/defineProperty.js\")[\"default\"];\nvar _objectSpread = require(\"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\nrequire(\"core-js/modules/es.symbol.js\");\nrequire(\"core-js/modules/es.symbol.description.js\");\nrequire(\"core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../icon/index.js');\nvar alert = require('./alert.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar __default__ = vue.defineComponent({\n  name: \"ElAlert\"\n});\nvar _sfc_main = /* @__PURE__ */vue.defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: alert.alertProps,\n  emits: alert.alertEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var Close = icon.TypeComponents.Close;\n    var slots = vue.useSlots();\n    var ns = index.useNamespace(\"alert\");\n    var visible = vue.ref(true);\n    var iconComponent = vue.computed(function () {\n      return icon.TypeComponentsMap[props.type];\n    });\n    var hasDesc = vue.computed(function () {\n      return !!(props.description || slots[\"default\"]);\n    });\n    var close = function close(evt) {\n      visible.value = false;\n      emit(\"close\", evt);\n    };\n    return function (_ctx, _cache) {\n      return vue.openBlock(), vue.createBlock(vue.Transition, {\n        name: vue.unref(ns).b(\"fade\"),\n        persisted: \"\"\n      }, {\n        \"default\": vue.withCtx(function () {\n          return [vue.withDirectives(vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.type), vue.unref(ns).is(\"center\", _ctx.center), vue.unref(ns).is(_ctx.effect)]),\n            role: \"alert\"\n          }, [_ctx.showIcon && (_ctx.$slots.icon || vue.unref(iconComponent)) ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n            key: 0,\n            \"class\": vue.normalizeClass([vue.unref(ns).e(\"icon\"), _defineProperty({}, vue.unref(ns).is(\"big\"), vue.unref(hasDesc))])\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.renderSlot(_ctx.$slots, \"icon\", {}, function () {\n                return [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))];\n              })];\n            }),\n            _: 3\n          }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"content\"))\n          }, [_ctx.title || _ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n            key: 0,\n            \"class\": vue.normalizeClass([vue.unref(ns).e(\"title\"), {\n              \"with-description\": vue.unref(hasDesc)\n            }])\n          }, [vue.renderSlot(_ctx.$slots, \"title\", {}, function () {\n            return [vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)];\n          })], 2)) : vue.createCommentVNode(\"v-if\", true), vue.unref(hasDesc) ? (vue.openBlock(), vue.createElementBlock(\"p\", {\n            key: 1,\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"description\"))\n          }, [vue.renderSlot(_ctx.$slots, \"default\", {}, function () {\n            return [vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)];\n          })], 2)) : vue.createCommentVNode(\"v-if\", true), _ctx.closable ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n            key: 2\n          }, [_ctx.closeText ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n            key: 0,\n            \"class\": vue.normalizeClass([vue.unref(ns).e(\"close-btn\"), vue.unref(ns).is(\"customed\")]),\n            onClick: close\n          }, vue.toDisplayString(_ctx.closeText), 3)) : (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n            key: 1,\n            \"class\": vue.normalizeClass(vue.unref(ns).e(\"close-btn\")),\n            onClick: close\n          }, {\n            \"default\": vue.withCtx(function () {\n              return [vue.createVNode(vue.unref(Close))];\n            }),\n            _: 1\n          }, 8, [\"class\"]))], 64)) : vue.createCommentVNode(\"v-if\", true)], 2)], 2), [[vue.vShow, visible.value]])];\n        }),\n        _: 3\n      }, 8, [\"name\"]);\n    };\n  }\n}));\nvar Alert = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"alert.vue\"]]);\nexports[\"default\"] = Alert;","map":{"version":3,"names":["name","Close","icon","TypeComponents","slots","vue","useSlots","ns","index","useNamespace","visible","ref","iconComponent","computed","TypeComponentsMap","props","type","hasDesc","description","close","evt","value","emit"],"sources":["../../../../../../packages/components/alert/src/alert.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"visible\"\n      :class=\"[ns.b(), ns.m(type), ns.is('center', center), ns.is(effect)]\"\n      role=\"alert\"\n    >\n      <el-icon\n        v-if=\"showIcon && ($slots.icon || iconComponent)\"\n        :class=\"[ns.e('icon'), { [ns.is('big')]: hasDesc }]\"\n      >\n        <slot name=\"icon\">\n          <component :is=\"iconComponent\" />\n        </slot>\n      </el-icon>\n\n      <div :class=\"ns.e('content')\">\n        <span\n          v-if=\"title || $slots.title\"\n          :class=\"[ns.e('title'), { 'with-description': hasDesc }]\"\n        >\n          <slot name=\"title\">{{ title }}</slot>\n        </span>\n        <p v-if=\"hasDesc\" :class=\"ns.e('description')\">\n          <slot>\n            {{ description }}\n          </slot>\n        </p>\n        <template v-if=\"closable\">\n          <div\n            v-if=\"closeText\"\n            :class=\"[ns.e('close-btn'), ns.is('customed')]\"\n            @click=\"close\"\n          >\n            {{ closeText }}\n          </div>\n          <el-icon v-else :class=\"ns.e('close-btn')\" @click=\"close\">\n            <Close />\n          </el-icon>\n        </template>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { alertEmits, alertProps } from './alert'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElAlert',\n})\n\nconst props = defineProps(alertProps)\nconst emit = defineEmits(alertEmits)\nconst slots = useSlots()\n\nconst ns = useNamespace('alert')\n\nconst visible = ref(true)\n\nconst iconComponent = computed(() => TypeComponentsMap[props.type])\n\nconst hasDesc = computed(() => !!(props.description || slots.default))\n\nconst close = (evt: MouseEvent) => {\n  visible.value = false\n  emit('close', evt)\n}\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;qCAsDc;EACZA,IAAM;AACR;;;;;;;IAJM,IAAEC,KAAA,GAAUC,IAAA,CAAAC,cAAA,CAAVF,KAAA;IAQR,IAAMG,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAEjB,IAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,OAAO;IAEzB,IAAAC,OAAA,GAAUL,GAAA,CAAAM,GAAA,CAAI,IAAI;IAExB,IAAMC,aAAA,GAAgBP,GAAA,CAAAQ,QAAS;MAAA,OAAMX,IAAA,CAAAY,iBAAkB,CAAAC,KAAA,CAAMC,IAAI,CAAC;IAAA;IAE5D,IAAAC,OAAA,GAAUZ,GAAA,CAAAQ,QAAA,CAAS;MAAA,OAAM,CAAC,EAAEE,KAAM,CAAAG,WAAA,IAAed,KAAA,WAAc;IAAA;IAE/D,IAAAe,KAAA,GAAQ,SAARA,MAASC,GAAoB;MACjCV,OAAA,CAAQW,KAAQ;MAChBC,IAAA,CAAK,SAASF,GAAG;IAAA,CACnB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}