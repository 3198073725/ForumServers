{"ast":null,"code":"import _regeneratorRuntime from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { View, ChatDotRound, Star, Document, User } from '@element-plus/icons-vue';\nimport { getHotUsers } from '../api/profile';\nimport { getPostList } from '../api/post';\nimport { getHotBoards } from '../api/board';\nimport { formatDateTime } from '../utils/index';\nimport UserAvatar from '../components/UserAvatar.vue';\nexport default {\n  name: 'Ranking',\n  components: {\n    UserAvatar: UserAvatar,\n    View: View,\n    ChatDotRound: ChatDotRound,\n    Star: Star,\n    Document: Document,\n    User: User\n  },\n  setup: function setup() {\n    var activeTab = ref('users');\n    var userRankingType = ref('posts_count');\n    var postRankingType = ref('views');\n    var boardRankingType = ref('posts_count');\n    var userRanking = ref([]);\n    var postRanking = ref([]);\n    var boardRanking = ref([]);\n    var loading = reactive({\n      users: false,\n      posts: false,\n      boards: false\n    });\n\n    // 格式化日期\n    var formatDate = function formatDate(date) {\n      if (!date) return '未知';\n      try {\n        // 对于注册时间，使用更友好的格式\n        var dateObj = new Date(date);\n        if (isNaN(dateObj.getTime())) return '格式错误';\n        var now = new Date();\n        var diffYears = now.getFullYear() - dateObj.getFullYear();\n        if (diffYears > 0) {\n          // 超过一年显示年月日\n          return formatDateTime(date, 'YYYY年MM月DD日');\n        } else {\n          // 不到一年显示月日和具体时间\n          return formatDateTime(date, 'MM月DD日 HH:mm');\n        }\n      } catch (error) {\n        console.error('日期格式化错误:', error);\n        return '格式错误';\n      }\n    };\n\n    // 根据排序类型获取排行值\n    var getRankingValue = function getRankingValue(item, type) {\n      switch (type) {\n        case 'posts_count':\n          return \"\".concat(item.posts_count || 0, \" \\u5E16\\u5B50\");\n        case 'likes_received':\n          return \"\".concat(item.likes_received || 0, \" \\u83B7\\u8D5E\");\n        case 'join_date':\n          return formatDate(item.created_at || item.date_joined);\n        default:\n          return item[type] || 0;\n      }\n    };\n\n    // 获取用户排行\n    var fetchUserRanking = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              loading.users = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return getHotUsers(20);\n            case 4:\n              response = _context.sent;\n              if (response && response.code === 0 && response.data) {\n                userRanking.value = response.data;\n              } else if (response && Array.isArray(response)) {\n                userRanking.value = response;\n              } else if (response && response.status === 0 && response.data) {\n                userRanking.value = response.data;\n              } else {\n                console.error('获取用户排行失败:', response ? response.msg : '未知错误');\n                userRanking.value = [];\n              }\n\n              // 根据当前选择的排序类型排序\n              sortUserRanking();\n              _context.next = 14;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取用户排行失败:', _context.t0);\n              ElMessage.error('获取用户排行失败，请稍后再试');\n              userRanking.value = [];\n            case 14:\n              _context.prev = 14;\n              loading.users = false;\n              return _context.finish(14);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 9, 14, 17]]);\n      }));\n      return function fetchUserRanking() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // 获取帖子排行\n    var fetchPostRanking = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              loading.posts = true;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return getPostList({\n                page: 1,\n                page_size: 20,\n                ordering: \"-\".concat(postRankingType.value)\n              });\n            case 4:\n              response = _context2.sent;\n              if (response && response.count !== undefined) {\n                postRanking.value = response.results || [];\n              } else if (response && response.code === 0) {\n                postRanking.value = response.data.results || [];\n              } else {\n                console.error('获取帖子排行失败:', response ? response.msg : '未知错误');\n                postRanking.value = [];\n              }\n              _context2.next = 13;\n              break;\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error('获取帖子排行失败:', _context2.t0);\n              ElMessage.error('获取帖子排行失败，请稍后再试');\n              postRanking.value = [];\n            case 13:\n              _context2.prev = 13;\n              loading.posts = false;\n              return _context2.finish(13);\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 8, 13, 16]]);\n      }));\n      return function fetchPostRanking() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // 获取板块排行\n    var fetchBoardRanking = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              loading.boards = true;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return getHotBoards(20);\n            case 4:\n              response = _context3.sent;\n              if (response && response.status === 0 && response.data) {\n                boardRanking.value = response.data;\n              } else if (response && response.code === 0 && response.data) {\n                boardRanking.value = response.data;\n              } else if (response && Array.isArray(response)) {\n                boardRanking.value = response;\n              } else {\n                console.error('获取板块排行失败:', response ? response.msg : '未知错误');\n                boardRanking.value = [];\n              }\n\n              // 根据当前选择的排序类型排序\n              sortBoardRanking();\n              _context3.next = 14;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error('获取板块排行失败:', _context3.t0);\n              ElMessage.error('获取板块排行失败，请稍后再试');\n              boardRanking.value = [];\n            case 14:\n              _context3.prev = 14;\n              loading.boards = false;\n              return _context3.finish(14);\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 9, 14, 17]]);\n      }));\n      return function fetchBoardRanking() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // 排序用户排行榜\n    var sortUserRanking = function sortUserRanking() {\n      userRanking.value.sort(function (a, b) {\n        var valueA = a[userRankingType.value] || 0;\n        var valueB = b[userRankingType.value] || 0;\n        if (userRankingType.value === 'join_date') {\n          // 注册时间从早到晚\n          var dateA = a.created_at || a.date_joined;\n          var dateB = b.created_at || b.date_joined;\n          return new Date(dateA) - new Date(dateB);\n        } else {\n          // 其他从高到低\n          return valueB - valueA;\n        }\n      });\n    };\n\n    // 排序板块排行榜\n    var sortBoardRanking = function sortBoardRanking() {\n      boardRanking.value.sort(function (a, b) {\n        var valueA = a[boardRankingType.value] || 0;\n        var valueB = b[boardRankingType.value] || 0;\n        return valueB - valueA;\n      });\n    };\n\n    // 监听排序类型变化\n    var handleUserRankingTypeChange = function handleUserRankingTypeChange() {\n      sortUserRanking();\n    };\n    var handlePostRankingTypeChange = function handlePostRankingTypeChange() {\n      fetchPostRanking();\n    };\n    var handleBoardRankingTypeChange = function handleBoardRankingTypeChange() {\n      sortBoardRanking();\n    };\n\n    // 监听标签页切换\n    var handleTabChange = function handleTabChange(tab) {\n      if (tab === 'users' && userRanking.value.length === 0) {\n        fetchUserRanking();\n      } else if (tab === 'posts' && postRanking.value.length === 0) {\n        fetchPostRanking();\n      } else if (tab === 'boards' && boardRanking.value.length === 0) {\n        fetchBoardRanking();\n      }\n    };\n    onMounted(function () {\n      // 加载默认标签页的数据\n      fetchUserRanking();\n    });\n    return {\n      activeTab: activeTab,\n      userRankingType: userRankingType,\n      postRankingType: postRankingType,\n      boardRankingType: boardRankingType,\n      userRanking: userRanking,\n      postRanking: postRanking,\n      boardRanking: boardRanking,\n      loading: loading,\n      formatDate: formatDate,\n      getRankingValue: getRankingValue,\n      handleUserRankingTypeChange: handleUserRankingTypeChange,\n      handlePostRankingTypeChange: handlePostRankingTypeChange,\n      handleBoardRankingTypeChange: handleBoardRankingTypeChange,\n      handleTabChange: handleTabChange\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","View","ChatDotRound","Star","Document","User","getHotUsers","getPostList","getHotBoards","formatDateTime","UserAvatar","name","components","setup","activeTab","userRankingType","postRankingType","boardRankingType","userRanking","postRanking","boardRanking","loading","users","posts","boards","formatDate","date","dateObj","Date","isNaN","getTime","now","diffYears","getFullYear","error","console","getRankingValue","item","type","concat","posts_count","likes_received","created_at","date_joined","fetchUserRanking","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","sent","code","data","value","Array","isArray","status","msg","sortUserRanking","t0","finish","stop","apply","arguments","fetchPostRanking","_ref2","_callee2","_callee2$","_context2","page","page_size","ordering","count","undefined","results","fetchBoardRanking","_ref3","_callee3","_callee3$","_context3","sortBoardRanking","sort","a","b","valueA","valueB","dateA","dateB","handleUserRankingTypeChange","handlePostRankingTypeChange","handleBoardRankingTypeChange","handleTabChange","tab","length"],"sources":["H:\\ForumServers\\ForumFrontend\\src\\views\\Ranking.vue"],"sourcesContent":["<template>\r\n  <div class=\"ranking-container\">\r\n    <div class=\"page-header\">\r\n      <h1>排行榜</h1>\r\n      <p>查看论坛中最活跃的用户、最热门的帖子和板块</p>\r\n    </div>\r\n\r\n    <el-tabs v-model=\"activeTab\" class=\"ranking-tabs\">\r\n      <el-tab-pane label=\"用户排行\" name=\"users\">\r\n        <div class=\"ranking-section\">\r\n          <div class=\"section-header\">\r\n            <h2>活跃用户排行</h2>\r\n            <el-select v-model=\"userRankingType\" placeholder=\"排序方式\" size=\"small\">\r\n              <el-option label=\"发帖数量\" value=\"posts_count\" />\r\n              <el-option label=\"获赞数量\" value=\"likes_received\" />\r\n              <el-option label=\"注册时间\" value=\"join_date\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <div class=\"ranking-list\">\r\n            <div v-if=\"loading.users\" class=\"loading-container\">\r\n              <el-skeleton :rows=\"10\" animated />\r\n            </div>\r\n            <el-empty description=\"暂无数据\" v-else-if=\"!userRanking.length\"></el-empty>\r\n            <div v-else class=\"ranking-items\">\r\n              <div v-for=\"(user, index) in userRanking\" :key=\"user.id\" class=\"ranking-item\">\r\n                <div class=\"rank-number\" :class=\"{ 'top-three': index < 3 }\">{{ index + 1 }}</div>\r\n                <div class=\"user-avatar\">\r\n                  <user-avatar :user=\"user\" :size=\"40\" />\r\n                </div>\r\n                <div class=\"user-info\">\r\n                  <div class=\"user-name\">\r\n                    <router-link :to=\"`/profile/${user.id}`\">{{ user.nickname || user.username }}</router-link>\r\n                  </div>\r\n                  <div class=\"user-stats\">\r\n                    <span>发帖: {{ user.posts_count || 0 }}</span>\r\n                    <span>获赞: {{ user.likes_received || 0 }}</span>\r\n                    <span>注册于: {{ formatDate(user.created_at || user.date_joined) }}</span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"ranking-value\">\r\n                  {{ getRankingValue(user, userRankingType) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </el-tab-pane>\r\n\r\n      <el-tab-pane label=\"帖子排行\" name=\"posts\">\r\n        <div class=\"ranking-section\">\r\n          <div class=\"section-header\">\r\n            <h2>热门帖子排行</h2>\r\n            <el-select v-model=\"postRankingType\" placeholder=\"排序方式\" size=\"small\">\r\n              <el-option label=\"浏览量\" value=\"views\" />\r\n              <el-option label=\"评论数\" value=\"comments_count\" />\r\n              <el-option label=\"点赞数\" value=\"likes_count\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <div class=\"ranking-list\">\r\n            <div v-if=\"loading.posts\" class=\"loading-container\">\r\n              <el-skeleton :rows=\"10\" animated />\r\n            </div>\r\n            <el-empty description=\"暂无数据\" v-else-if=\"!postRanking.length\"></el-empty>\r\n            <div v-else class=\"ranking-items\">\r\n              <div v-for=\"(post, index) in postRanking\" :key=\"post.id\" class=\"ranking-item\">\r\n                <div class=\"rank-number\" :class=\"{ 'top-three': index < 3 }\">{{ index + 1 }}</div>\r\n                <div class=\"post-info\">\r\n                  <div class=\"post-title\">\r\n                    <router-link :to=\"`/posts/${post.id}`\">{{ post.title }}</router-link>\r\n                    <el-tag size=\"small\" type=\"success\" v-if=\"post.is_pinned\">置顶</el-tag>\r\n                    <el-tag size=\"small\" type=\"warning\" v-if=\"post.is_featured\">精华</el-tag>\r\n                  </div>\r\n                  <div class=\"post-meta\">\r\n                    <span>作者: {{ post.user.nickname || post.user.username }}</span>\r\n                    <span>板块: {{ post.board_name }}</span>\r\n                    <span>发布于: {{ formatDate(post.created_at) }}</span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"ranking-stats\">\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><View /></el-icon> {{ post.views || 0 }}\r\n                  </div>\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><ChatDotRound /></el-icon> {{ post.comments_count || 0 }}\r\n                  </div>\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><Star /></el-icon> {{ post.likes_count || 0 }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </el-tab-pane>\r\n\r\n      <el-tab-pane label=\"板块排行\" name=\"boards\">\r\n        <div class=\"ranking-section\">\r\n          <div class=\"section-header\">\r\n            <h2>热门板块排行</h2>\r\n            <el-select v-model=\"boardRankingType\" placeholder=\"排序方式\" size=\"small\">\r\n              <el-option label=\"帖子数量\" value=\"posts_count\" />\r\n              <el-option label=\"用户数量\" value=\"users_count\" />\r\n              <el-option label=\"总浏览量\" value=\"total_views\" />\r\n            </el-select>\r\n          </div>\r\n\r\n          <div class=\"ranking-list\">\r\n            <div v-if=\"loading.boards\" class=\"loading-container\">\r\n              <el-skeleton :rows=\"10\" animated />\r\n            </div>\r\n            <el-empty description=\"暂无数据\" v-else-if=\"!boardRanking.length\"></el-empty>\r\n            <div v-else class=\"ranking-items\">\r\n              <div v-for=\"(board, index) in boardRanking\" :key=\"board.id\" class=\"ranking-item\">\r\n                <div class=\"rank-number\" :class=\"{ 'top-three': index < 3 }\">{{ index + 1 }}</div>\r\n                <div class=\"board-info\">\r\n                  <div class=\"board-name\">\r\n                    <router-link :to=\"`/boards/${board.id}`\">{{ board.name }}</router-link>\r\n                  </div>\r\n                  <div class=\"board-description\">\r\n                    {{ board.description }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"ranking-stats\">\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><Document /></el-icon> {{ board.posts_count || 0 }} 帖子\r\n                  </div>\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><User /></el-icon> {{ board.users_count || 0 }} 用户\r\n                  </div>\r\n                  <div class=\"stat-item\">\r\n                    <el-icon><View /></el-icon> {{ board.total_views || 0 }} 浏览\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport { View, ChatDotRound, Star, Document, User } from '@element-plus/icons-vue'\r\nimport { getHotUsers } from '../api/profile'\r\nimport { getPostList } from '../api/post'\r\nimport { getHotBoards } from '../api/board'\r\nimport { formatDateTime } from '../utils/index'\r\nimport UserAvatar from '../components/UserAvatar.vue'\r\n\r\nexport default {\r\n  name: 'Ranking',\r\n  components: {\r\n    UserAvatar,\r\n    View,\r\n    ChatDotRound,\r\n    Star,\r\n    Document,\r\n    User\r\n  },\r\n  setup() {\r\n    const activeTab = ref('users')\r\n    const userRankingType = ref('posts_count')\r\n    const postRankingType = ref('views')\r\n    const boardRankingType = ref('posts_count')\r\n\r\n    const userRanking = ref([])\r\n    const postRanking = ref([])\r\n    const boardRanking = ref([])\r\n\r\n    const loading = reactive({\r\n      users: false,\r\n      posts: false,\r\n      boards: false\r\n    })\r\n\r\n    // 格式化日期\r\n    const formatDate = (date) => {\r\n      if (!date) return '未知'\r\n      \r\n      try {\r\n        // 对于注册时间，使用更友好的格式\r\n        const dateObj = new Date(date)\r\n        if (isNaN(dateObj.getTime())) return '格式错误'\r\n        \r\n        const now = new Date()\r\n        const diffYears = now.getFullYear() - dateObj.getFullYear()\r\n        \r\n        if (diffYears > 0) {\r\n          // 超过一年显示年月日\r\n          return formatDateTime(date, 'YYYY年MM月DD日')\r\n        } else {\r\n          // 不到一年显示月日和具体时间\r\n          return formatDateTime(date, 'MM月DD日 HH:mm')\r\n        }\r\n      } catch (error) {\r\n        console.error('日期格式化错误:', error)\r\n        return '格式错误'\r\n      }\r\n    }\r\n\r\n    // 根据排序类型获取排行值\r\n    const getRankingValue = (item, type) => {\r\n      switch (type) {\r\n        case 'posts_count':\r\n          return `${item.posts_count || 0} 帖子`\r\n        case 'likes_received':\r\n          return `${item.likes_received || 0} 获赞`\r\n        case 'join_date':\r\n          return formatDate(item.created_at || item.date_joined)\r\n        default:\r\n          return item[type] || 0\r\n      }\r\n    }\r\n\r\n    // 获取用户排行\r\n    const fetchUserRanking = async () => {\r\n      loading.users = true\r\n      try {\r\n        const response = await getHotUsers(20)\r\n        \r\n        if (response && response.code === 0 && response.data) {\r\n          userRanking.value = response.data\r\n        } else if (response && Array.isArray(response)) {\r\n          userRanking.value = response\r\n        } else if (response && response.status === 0 && response.data) {\r\n          userRanking.value = response.data\r\n        } else {\r\n          console.error('获取用户排行失败:', response ? response.msg : '未知错误')\r\n          userRanking.value = []\r\n        }\r\n        \r\n        // 根据当前选择的排序类型排序\r\n        sortUserRanking()\r\n      } catch (error) {\r\n        console.error('获取用户排行失败:', error)\r\n        ElMessage.error('获取用户排行失败，请稍后再试')\r\n        userRanking.value = []\r\n      } finally {\r\n        loading.users = false\r\n      }\r\n    }\r\n\r\n    // 获取帖子排行\r\n    const fetchPostRanking = async () => {\r\n      loading.posts = true\r\n      try {\r\n        const response = await getPostList({\r\n          page: 1,\r\n          page_size: 20,\r\n          ordering: `-${postRankingType.value}`\r\n        })\r\n\r\n        if (response && response.count !== undefined) {\r\n          postRanking.value = response.results || []\r\n        } else if (response && response.code === 0) {\r\n          postRanking.value = response.data.results || []\r\n        } else {\r\n          console.error('获取帖子排行失败:', response ? response.msg : '未知错误')\r\n          postRanking.value = []\r\n        }\r\n      } catch (error) {\r\n        console.error('获取帖子排行失败:', error)\r\n        ElMessage.error('获取帖子排行失败，请稍后再试')\r\n        postRanking.value = []\r\n      } finally {\r\n        loading.posts = false\r\n      }\r\n    }\r\n\r\n    // 获取板块排行\r\n    const fetchBoardRanking = async () => {\r\n      loading.boards = true\r\n      try {\r\n        const response = await getHotBoards(20)\r\n\r\n        if (response && response.status === 0 && response.data) {\r\n          boardRanking.value = response.data\r\n        } else if (response && response.code === 0 && response.data) {\r\n          boardRanking.value = response.data\r\n        } else if (response && Array.isArray(response)) {\r\n          boardRanking.value = response\r\n        } else {\r\n          console.error('获取板块排行失败:', response ? response.msg : '未知错误')\r\n          boardRanking.value = []\r\n        }\r\n        \r\n        // 根据当前选择的排序类型排序\r\n        sortBoardRanking()\r\n      } catch (error) {\r\n        console.error('获取板块排行失败:', error)\r\n        ElMessage.error('获取板块排行失败，请稍后再试')\r\n        boardRanking.value = []\r\n      } finally {\r\n        loading.boards = false\r\n      }\r\n    }\r\n\r\n    // 排序用户排行榜\r\n    const sortUserRanking = () => {\r\n      userRanking.value.sort((a, b) => {\r\n        const valueA = a[userRankingType.value] || 0\r\n        const valueB = b[userRankingType.value] || 0\r\n        \r\n        if (userRankingType.value === 'join_date') {\r\n          // 注册时间从早到晚\r\n          const dateA = a.created_at || a.date_joined\r\n          const dateB = b.created_at || b.date_joined\r\n          return new Date(dateA) - new Date(dateB)\r\n        } else {\r\n          // 其他从高到低\r\n          return valueB - valueA\r\n        }\r\n      })\r\n    }\r\n\r\n    // 排序板块排行榜\r\n    const sortBoardRanking = () => {\r\n      boardRanking.value.sort((a, b) => {\r\n        const valueA = a[boardRankingType.value] || 0\r\n        const valueB = b[boardRankingType.value] || 0\r\n        return valueB - valueA\r\n      })\r\n    }\r\n\r\n    // 监听排序类型变化\r\n    const handleUserRankingTypeChange = () => {\r\n      sortUserRanking()\r\n    }\r\n\r\n    const handlePostRankingTypeChange = () => {\r\n      fetchPostRanking()\r\n    }\r\n\r\n    const handleBoardRankingTypeChange = () => {\r\n      sortBoardRanking()\r\n    }\r\n\r\n    // 监听标签页切换\r\n    const handleTabChange = (tab) => {\r\n      if (tab === 'users' && userRanking.value.length === 0) {\r\n        fetchUserRanking()\r\n      } else if (tab === 'posts' && postRanking.value.length === 0) {\r\n        fetchPostRanking()\r\n      } else if (tab === 'boards' && boardRanking.value.length === 0) {\r\n        fetchBoardRanking()\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      // 加载默认标签页的数据\r\n      fetchUserRanking()\r\n    })\r\n\r\n    return {\r\n      activeTab,\r\n      userRankingType,\r\n      postRankingType,\r\n      boardRankingType,\r\n      userRanking,\r\n      postRanking,\r\n      boardRanking,\r\n      loading,\r\n      formatDate,\r\n      getRankingValue,\r\n      handleUserRankingTypeChange,\r\n      handlePostRankingTypeChange,\r\n      handleBoardRankingTypeChange,\r\n      handleTabChange\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.ranking-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 30px;\r\n  text-align: center;\r\n  position: relative;\r\n}\r\n\r\n.page-header::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 80px;\r\n  height: 3px;\r\n  background: linear-gradient(90deg, #409eff, #67c23a);\r\n  border-radius: 3px;\r\n}\r\n\r\n.page-header h1 {\r\n  font-size: 32px;\r\n  color: #303133;\r\n  margin-bottom: 12px;\r\n  font-weight: 600;\r\n}\r\n\r\n.page-header p {\r\n  color: #606266;\r\n  font-size: 16px;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.ranking-tabs {\r\n  background-color: #fff;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\r\n  padding: 25px;\r\n}\r\n\r\n.section-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 25px;\r\n  border-bottom: 1px solid #ebeef5;\r\n  padding-bottom: 15px;\r\n}\r\n\r\n.section-header h2 {\r\n  margin: 0;\r\n  font-size: 22px;\r\n  width: 200px;\r\n  color: #303133;\r\n  position: relative;\r\n  padding-left: 15px;\r\n}\r\n\r\n.section-header h2::before {\r\n  content: '';\r\n  position: absolute;\r\n  left: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 4px;\r\n  height: 20px;\r\n  background: #409eff;\r\n  border-radius: 2px;\r\n}\r\n\r\n.ranking-list {\r\n  margin-top: 25px;\r\n}\r\n\r\n.ranking-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 18px;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.ranking-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 18px;\r\n  background-color: #ffffff;\r\n  border-radius: 12px;\r\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  border: 1px solid #ebeef5;\r\n  margin-bottom: 0;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n  position: relative;\r\n  overflow: hidden;\r\n  animation: fadeIn 0.5s ease-out forwards;\r\n  animation-delay: calc(0.05s * var(--index, 0));\r\n}\r\n\r\n.ranking-item:nth-child(1) { --index: 1; }\r\n.ranking-item:nth-child(2) { --index: 2; }\r\n.ranking-item:nth-child(3) { --index: 3; }\r\n.ranking-item:nth-child(4) { --index: 4; }\r\n.ranking-item:nth-child(5) { --index: 5; }\r\n.ranking-item:nth-child(6) { --index: 6; }\r\n.ranking-item:nth-child(7) { --index: 7; }\r\n.ranking-item:nth-child(8) { --index: 8; }\r\n.ranking-item:nth-child(9) { --index: 9; }\r\n.ranking-item:nth-child(10) { --index: 10; }\r\n.ranking-item:nth-child(n+11) { --index: 11; }\r\n\r\n.ranking-item::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 4px;\r\n  height: 100%;\r\n  background: transparent;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.ranking-item:hover::before {\r\n  background: linear-gradient(to bottom, #409eff, #67c23a);\r\n}\r\n\r\n.ranking-item:hover {\r\n  transform: translateY(-3px) scale(1.01);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);\r\n  border-color: #dcdfe6;\r\n}\r\n\r\n.rank-number {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  background-color: #909399;\r\n  color: #fff;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  margin-right: 15px;\r\n  font-size: 16px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.rank-number.top-three:nth-child(1) {\r\n  background: linear-gradient(135deg, #f56c6c, #e74c3c);\r\n  font-size: 18px;\r\n}\r\n\r\n.rank-number.top-three:nth-child(3n+2) {\r\n  background: linear-gradient(135deg, #e6a23c, #f39c12);\r\n  font-size: 17px;\r\n}\r\n\r\n.rank-number.top-three:nth-child(3n+3) {\r\n  background: linear-gradient(135deg, #67c23a, #27ae60);\r\n  font-size: 16px;\r\n}\r\n\r\n.user-avatar {\r\n  margin-right: 18px;\r\n  position: relative;\r\n}\r\n\r\n.user-avatar::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: -3px;\r\n  left: -3px;\r\n  right: -3px;\r\n  bottom: -3px;\r\n  border-radius: 50%;\r\n  border: 2px solid transparent;\r\n  opacity: 0;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.ranking-item:hover .user-avatar::after {\r\n  opacity: 1;\r\n  border-color: #409eff;\r\n}\r\n\r\n.user-info, .post-info, .board-info {\r\n  flex: 1;\r\n}\r\n\r\n.user-name, .post-title, .board-name {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.user-name a, .post-title a, .board-name a {\r\n  color: #303133;\r\n  text-decoration: none;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.user-name a:hover, .post-title a:hover, .board-name a:hover {\r\n  color: #409eff;\r\n}\r\n\r\n.user-stats, .post-meta {\r\n  display: flex;\r\n  gap: 15px;\r\n  color: #909399;\r\n  font-size: 13px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.user-stats span, .post-meta span {\r\n  background-color: #f5f7fa;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n\r\n.board-description {\r\n  color: #606266;\r\n  font-size: 14px;\r\n  margin-top: 5px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.ranking-value {\r\n  font-weight: bold;\r\n  color: #409eff;\r\n  margin-left: 15px;\r\n  background-color: #ecf5ff;\r\n  padding: 4px 12px;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.ranking-stats {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  align-items: center;\r\n  color: #606266;\r\n  font-size: 14px;\r\n  background-color: #f5f7fa;\r\n  padding: 4px 10px;\r\n  border-radius: 6px;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.stat-item:hover {\r\n  background-color: #ecf5ff;\r\n  color: #409eff;\r\n}\r\n\r\n.stat-item .el-icon {\r\n  margin-right: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading-container {\r\n  padding: 30px 0;\r\n}\r\n\r\n/* 添加响应式样式 */\r\n@media screen and (max-width: 768px) {\r\n  .ranking-item {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    padding: 15px;\r\n  }\r\n  \r\n  .rank-number {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .user-avatar {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .user-stats, .post-meta {\r\n    flex-direction: column;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .ranking-value, .ranking-stats {\r\n    margin-top: 10px;\r\n    margin-left: 0;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}