{"ast":null,"code":"import _typeof from \"H:/ForumServers/ForumFrontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport axios from 'axios';\nimport router from '../router';\nimport { ElMessage } from 'element-plus';\n\n// 增强的消息去重机制\nvar messageTracker = {\n  lastMessage: '',\n  lastTime: 0,\n  messageQueue: [],\n  showMessage: function showMessage(message, type) {\n    var _this = this;\n    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';\n    var now = Date.now();\n    var messageInfo = {\n      message: message,\n      type: type,\n      time: now,\n      source: source\n    };\n    console.log(\"\\u6D88\\u606F\\u89E6\\u53D1 [\".concat(source, \"]: \").concat(message, \" (\").concat(type, \")\"), messageInfo);\n\n    // 如果相同消息在3秒内出现，则不重复显示\n    if (message === this.lastMessage && now - this.lastTime < 3000) {\n      console.log(\"\\u6D88\\u606F\\u88AB\\u53BB\\u91CD: \".concat(message, \" (\\u4E0A\\u6B21\\u663E\\u793A\\u65F6\\u95F4: \").concat(new Date(this.lastTime).toLocaleTimeString(), \")\"));\n      return;\n    }\n\n    // 清理过期的消息\n    this.messageQueue = this.messageQueue.filter(function (msg) {\n      return now - msg.time < 5000;\n    });\n\n    // 检查队列中是否已有相同消息\n    var duplicate = this.messageQueue.find(function (msg) {\n      return msg.message === message;\n    });\n    if (duplicate) {\n      console.log(\"\\u961F\\u5217\\u4E2D\\u5DF2\\u5B58\\u5728\\u76F8\\u540C\\u6D88\\u606F: \".concat(message, \" (\\u6765\\u6E90: \").concat(duplicate.source, \")\"));\n      return;\n    }\n\n    // 添加到消息队列\n    this.messageQueue.push(messageInfo);\n    this.lastMessage = message;\n    this.lastTime = now;\n    console.log(\"\\u663E\\u793A\\u6D88\\u606F: \".concat(message));\n    ElMessage.closeAll(); // 关闭所有现有消息\n    ElMessage({\n      message: message,\n      type: type,\n      duration: type === 'error' ? 5 * 1000 : 3000,\n      onClose: function onClose() {\n        // 从队列中移除\n        _this.messageQueue = _this.messageQueue.filter(function (msg) {\n          return msg.message !== message;\n        });\n      }\n    });\n  }\n};\n\n// 全局挂载消息追踪器，用于其他组件直接使用\nwindow.messageTracker = messageTracker;\n\n// 创建自定义消息显示函数，替代直接调用ElMessage\nvar showSafeMessage = function showSafeMessage(options) {\n  if (typeof options === 'string') {\n    messageTracker.showMessage(options, 'info', 'safe-message');\n  } else {\n    messageTracker.showMessage(options.message, options.type || 'info', 'safe-message-' + (options.type || 'info'));\n  }\n};\n\n// 全局暴露，方便其他组件使用\nwindow.showSafeMessage = showSafeMessage;\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : '',\n  timeout: 15000,\n  // 增加超时时间到15秒\n  // 添加validateStatus选项，允许所有状态码通过，不抛出请求错误\n  validateStatus: function validateStatus(status) {\n    return status < 600; // 所有HTTP状态码都作为成功处理，包括500错误\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n\n  // 设置Authorization头\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n\n  // 设置Content-Type头（如果没有设置）\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 辅助函数：判断是否为登出操作\nfunction isLogoutOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n  var isPostMethod = config.method.toLowerCase() === 'post';\n  var isLogoutUrl = config.url.includes('/api/v1/auth/logout/');\n  console.log('请求拦截器检测登出操作:', {\n    url: config.url,\n    method: config.method,\n    isLogoutUrl: isLogoutUrl,\n    isPostMethod: isPostMethod,\n    isLogout: isLogoutUrl && isPostMethod\n  });\n  return isLogoutUrl && isPostMethod;\n}\n\n// 辅助函数：判断是否为公开内容请求（无需登录即可访问）\nfunction isPublicContentRequest(config) {\n  // 防止config为undefined\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为公开内容请求，配置不完整:', config);\n    // 默认返回true，对于无法判断的请求，视为公开内容\n    return true;\n  }\n\n  // 默认所有GET请求都视为公开内容\n  var isGetMethod = config.method.toLowerCase() === 'get';\n\n  // 如果是GET请求，直接返回true，允许所有GET请求不需要登录\n  if (isGetMethod) {\n    console.log('请求拦截器: GET请求被视为公开内容', config.url);\n    return true;\n  }\n\n  // 扩展公开URL匹配\n  var isPostsUrl = config.url.includes('/api/v1/posts');\n  var isBoardsUrl = config.url.includes('/api/v1/boards');\n  var isRankingUrl = config.url.includes('/api/v1/ranking');\n  var isCommentsUrl = config.url.includes('/api/v1/comments');\n  var isHomeUrl = config.url === '/' || config.url.endsWith('/index.html');\n  var isProfileUrl = config.url.includes('/api/v1/users/profile');\n  var isStaticUrl = config.url.includes('/static/') || config.url.includes('/media/');\n\n  // 调试日志，帮助排查问题\n  console.log('请求拦截器检测公开内容请求:', {\n    url: config.url,\n    method: config.method,\n    isGetMethod: isGetMethod,\n    isPostsUrl: isPostsUrl,\n    isBoardsUrl: isBoardsUrl,\n    isRankingUrl: isRankingUrl,\n    isCommentsUrl: isCommentsUrl,\n    isHomeUrl: isHomeUrl,\n    isProfileUrl: isProfileUrl,\n    isStaticUrl: isStaticUrl,\n    isPublicContent: isGetMethod || isPostsUrl || isBoardsUrl || isRankingUrl || isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl\n  });\n\n  // 所有GET请求 + 特定POST请求路径 = 公开内容请求\n  return isGetMethod || isPostsUrl || isBoardsUrl || isRankingUrl || isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl;\n}\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  // 检查是否为HTML错误页面（Django错误页面）\n  if (response.data && typeof response.data === 'string' && (response.data.includes('<!DOCTYPE html>') || response.data.includes('ContentNotRenderedError'))) {\n    console.error('响应拦截器检测到HTML错误页面:', {\n      url: response.config.url,\n      method: response.config.method,\n      status: response.status\n    });\n\n    // 提取错误信息\n    var errorMessage = '服务器错误';\n    if (response.data.includes('ContentNotRenderedError')) {\n      errorMessage = 'Django序列化错误: ContentNotRenderedError';\n      console.error('检测到Django ContentNotRenderedError，这通常是由于响应内容未正确渲染导致的');\n    }\n\n    // 对于公开内容请求，不显示错误消息\n    var _isPublic = isPublicContentRequest(response.config);\n    if (!_isPublic) {\n      messageTracker.showMessage(errorMessage, 'error', 'html-error-page');\n    } else {\n      console.log('公开内容请求收到HTML错误页面，不显示错误消息');\n    }\n\n    // 返回一个标准格式的错误响应，让调用方处理\n    return {\n      code: 500,\n      status: 500,\n      msg: errorMessage,\n      data: null\n    };\n  }\n\n  // 处理空响应\n  if (!response.data && response.status !== 204) {\n    console.warn('API返回空响应:', {\n      url: response.config.url,\n      method: response.config.method,\n      status: response.status\n    });\n    return {\n      code: 0,\n      status: 0,\n      msg: '',\n      data: null\n    };\n  }\n\n  // 处理非JSON响应\n  if (response.data && typeof response.data === 'string' && response.headers['content-type'] && !response.headers['content-type'].includes('application/json')) {\n    console.log('非JSON响应:', {\n      url: response.config.url,\n      contentType: response.headers['content-type'],\n      status: response.status\n    });\n\n    // 返回一个包装好的响应\n    return {\n      code: 0,\n      status: response.status,\n      msg: '',\n      data: response.data\n    };\n  }\n  var res = response.data;\n  console.log('响应拦截器收到响应:', res);\n\n  // 检查是否为帖子创建请求\n  var isCreatePost = response.config.url === '/api/v1/posts/' && response.config.method.toLowerCase() === 'post';\n  if (isCreatePost) {\n    console.log('检测到帖子创建请求，响应数据:', res);\n    // 如果响应成功但没有返回帖子ID，尝试从响应中提取\n    if ((res.status === 0 || res.code === 0) && res.data) {\n      if (_typeof(res.data) === 'object' && !res.data.id) {\n        // 尝试从响应中提取帖子ID\n        var postId = res.data.post_id || res.data.postId || res.post_id || res.postId;\n        if (postId) {\n          res.data.id = postId;\n        }\n      }\n    }\n  }\n\n  // 检查是否为公开内容请求\n  var isPublic = isPublicContentRequest(response.config);\n  console.log('是否为公开内容请求:', isPublic);\n\n  // 检查是否有明确的错误状态\n  if (res.status !== undefined && res.status !== 0 && res.status !== 200 || res.code !== undefined && res.code !== 0 && res.code !== 200) {\n    console.error('API错误响应:', res);\n\n    // 401错误特殊处理 - 对于公开内容请求，不显示错误消息\n    if ((res.status === 401 || res.code === 401) && isPublic) {\n      console.log('公开内容401错误，不显示错误消息');\n      // 直接返回一个成功的空数据，让调用方继续处理\n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: null\n      };\n    }\n\n    // 如果是登出操作，即使返回错误也不显示错误消息\n    if (isLogoutOperation(response.config)) {\n      console.log('登出操作返回错误，不显示错误消息');\n      return res;\n    }\n\n    // 如果不应该抑制消息，则显示错误消息\n    if (!shouldSuppressMessage(response.config)) {\n      var errorMsg = res.msg || res.message || '请求失败';\n      messageTracker.showMessage(errorMsg, 'error', 'api-error');\n    }\n    return res;\n  }\n\n  // 检查是否为删除评论操作\n  if (isCommentDeleteOperation(response.config)) {\n    console.log('检测到评论删除操作，不显示成功消息');\n    return res;\n  }\n\n  // 检查是否为帖子操作\n  if (isPostOperation(response.config)) {\n    console.log('检测到帖子操作，不显示成功消息');\n    return res;\n  }\n\n  // 如果有成功消息且不是GET请求，显示成功消息\n  if (res.msg && response.config.method.toLowerCase() !== 'get' && !isPublic) {\n    messageTracker.showMessage(res.msg, 'success', 'api-success');\n  }\n  return res;\n}, function (error) {\n  console.error('请求错误:', error);\n\n  // 如果请求被取消，不显示错误消息\n  if (axios.isCancel(error)) {\n    console.log('请求被取消');\n    return Promise.reject(error);\n  }\n\n  // 检查是否为公开内容请求\n  var isPublic = error.config ? isPublicContentRequest(error.config) : false;\n\n  // 如果不是公开内容请求，显示错误消息\n  if (!isPublic && !shouldSuppressMessage(error.config)) {\n    var errorMsg = '网络错误，请检查您的网络连接';\n    if (error.response) {\n      // 服务器返回了错误状态码\n      switch (error.response.status) {\n        case 401:\n          errorMsg = '未授权，请重新登录';\n          // 清除token和用户信息\n          localStorage.removeItem('token');\n          localStorage.removeItem('userInfo');\n          // 跳转到登录页\n          router.push('/login');\n          break;\n        case 403:\n          errorMsg = '拒绝访问';\n          break;\n        case 404:\n          errorMsg = '请求的资源不存在';\n          break;\n        case 500:\n          errorMsg = '服务器错误';\n          break;\n        default:\n          errorMsg = \"\\u8BF7\\u6C42\\u5931\\u8D25 (\".concat(error.response.status, \")\");\n      }\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      errorMsg = '服务器无响应，请稍后重试';\n    }\n    messageTracker.showMessage(errorMsg, 'error', 'axios-error');\n  }\n\n  // 返回标准格式的错误对象\n  return {\n    code: -1,\n    status: error.response ? error.response.status : 500,\n    msg: error.message || '未知错误',\n    data: null\n  };\n});\n\n// 辅助函数：判断是否应该抑制消息\nfunction shouldSuppressMessage(config) {\n  if (!config) return false;\n\n  // 检查是否有自定义标记\n  return config.suppressErrorMessage === true || config.headers && config.headers['X-Suppress-Message'] === 'true';\n}\n\n// 辅助函数：判断是否为删除评论操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n  var isDeleteMethod = config.method.toLowerCase() === 'delete';\n  var isCommentUrl = config.url.includes('/api/v1/comments/');\n  return isDeleteMethod && isCommentUrl;\n}\n\n// 辅助函数：判断是否为帖子操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false;\n  }\n  var isPostMethod = config.method.toLowerCase() === 'post';\n  var isPutMethod = config.method.toLowerCase() === 'put';\n  var isPostUrl = config.url.includes('/api/v1/posts');\n  return (isPostMethod || isPutMethod) && isPostUrl;\n}\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","messageTracker","lastMessage","lastTime","messageQueue","showMessage","message","type","_this","source","arguments","length","undefined","now","Date","messageInfo","time","console","log","concat","toLocaleTimeString","filter","msg","duplicate","find","push","closeAll","duration","onClose","window","showSafeMessage","options","service","create","baseURL","process","env","NODE_ENV","timeout","validateStatus","status","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","method","data","FormData","error","Promise","reject","isLogoutOperation","url","isPostMethod","toLowerCase","isLogoutUrl","includes","isLogout","isPublicContentRequest","isGetMethod","isPostsUrl","isBoardsUrl","isRankingUrl","isCommentsUrl","isHomeUrl","endsWith","isProfileUrl","isStaticUrl","isPublicContent","response","errorMessage","isPublic","code","warn","contentType","res","isCreatePost","_typeof","id","postId","post_id","shouldSuppressMessage","errorMsg","isCommentDeleteOperation","isPostOperation","isCancel","removeItem","suppressErrorMessage","isDeleteMethod","isCommentUrl","isPutMethod","isPostUrl"],"sources":["H:/ForumServers/ForumFrontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n\n// 增强的消息去重机制\nconst messageTracker = {\n  lastMessage: '',\n  lastTime: 0,\n  messageQueue: [],\n  showMessage(message, type, source = 'unknown') {\n    const now = Date.now();\n    const messageInfo = { message, type, time: now, source };\n    \n    console.log(`消息触发 [${source}]: ${message} (${type})`, messageInfo);\n    \n    // 如果相同消息在3秒内出现，则不重复显示\n    if (message === this.lastMessage && now - this.lastTime < 3000) {\n      console.log(`消息被去重: ${message} (上次显示时间: ${new Date(this.lastTime).toLocaleTimeString()})`);\n      return;\n    }\n    \n    // 清理过期的消息\n    this.messageQueue = this.messageQueue.filter(msg => now - msg.time < 5000);\n    \n    // 检查队列中是否已有相同消息\n    const duplicate = this.messageQueue.find(msg => msg.message === message);\n    if (duplicate) {\n      console.log(`队列中已存在相同消息: ${message} (来源: ${duplicate.source})`);\n      return;\n    }\n    \n    // 添加到消息队列\n    this.messageQueue.push(messageInfo);\n    this.lastMessage = message;\n    this.lastTime = now;\n    \n    console.log(`显示消息: ${message}`);\n    ElMessage.closeAll(); // 关闭所有现有消息\n    ElMessage({\n      message: message,\n      type: type,\n      duration: type === 'error' ? 5 * 1000 : 3000,\n      onClose: () => {\n        // 从队列中移除\n        this.messageQueue = this.messageQueue.filter(msg => msg.message !== message);\n      }\n    });\n  }\n};\n\n// 全局挂载消息追踪器，用于其他组件直接使用\nwindow.messageTracker = messageTracker;\n\n// 创建自定义消息显示函数，替代直接调用ElMessage\nconst showSafeMessage = (options) => {\n  if (typeof options === 'string') {\n    messageTracker.showMessage(options, 'info', 'safe-message');\n  } else {\n    messageTracker.showMessage(\n      options.message, \n      options.type || 'info', \n      'safe-message-' + (options.type || 'info')\n    );\n  }\n};\n\n// 全局暴露，方便其他组件使用\nwindow.showSafeMessage = showSafeMessage;\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : '',\n  timeout: 15000, // 增加超时时间到15秒\n  // 添加validateStatus选项，允许所有状态码通过，不抛出请求错误\n  validateStatus: function (status) {\n    return status < 600 // 所有HTTP状态码都作为成功处理，包括500错误\n  }\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    \n    // 设置Authorization头\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    // 设置Content-Type头（如果没有设置）\n    if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n      if (!config.headers['Content-Type'] && !(config.data instanceof FormData)) {\n        config.headers['Content-Type'] = 'application/json'\n      }\n    }\n\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 辅助函数：判断是否为登出操作\nfunction isLogoutOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  const isPostMethod = config.method.toLowerCase() === 'post'\n  const isLogoutUrl = config.url.includes('/api/v1/auth/logout/')\n  \n  console.log('请求拦截器检测登出操作:', {\n    url: config.url,\n    method: config.method,\n    isLogoutUrl,\n    isPostMethod,\n    isLogout: isLogoutUrl && isPostMethod\n  })\n  \n  return isLogoutUrl && isPostMethod\n}\n\n// 辅助函数：判断是否为公开内容请求（无需登录即可访问）\nfunction isPublicContentRequest(config) {\n  // 防止config为undefined\n  if (!config || !config.url || !config.method) {\n    console.log('无法判断是否为公开内容请求，配置不完整:', config)\n    // 默认返回true，对于无法判断的请求，视为公开内容\n    return true\n  }\n  \n  // 默认所有GET请求都视为公开内容\n  const isGetMethod = config.method.toLowerCase() === 'get'\n  \n  // 如果是GET请求，直接返回true，允许所有GET请求不需要登录\n  if (isGetMethod) {\n    console.log('请求拦截器: GET请求被视为公开内容', config.url);\n    return true;\n  }\n  \n  // 扩展公开URL匹配\n  const isPostsUrl = config.url.includes('/api/v1/posts') \n  const isBoardsUrl = config.url.includes('/api/v1/boards')\n  const isRankingUrl = config.url.includes('/api/v1/ranking')\n  const isCommentsUrl = config.url.includes('/api/v1/comments')\n  const isHomeUrl = config.url === '/' || config.url.endsWith('/index.html')\n  const isProfileUrl = config.url.includes('/api/v1/users/profile')\n  const isStaticUrl = config.url.includes('/static/') || config.url.includes('/media/')\n  \n  // 调试日志，帮助排查问题\n  console.log('请求拦截器检测公开内容请求:', {\n    url: config.url,\n    method: config.method,\n    isGetMethod,\n    isPostsUrl,\n    isBoardsUrl,\n    isRankingUrl,\n    isCommentsUrl,\n    isHomeUrl,\n    isProfileUrl,\n    isStaticUrl,\n    isPublicContent: isGetMethod || (\n      isPostsUrl || isBoardsUrl || isRankingUrl || \n      isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl\n    )\n  })\n  \n  // 所有GET请求 + 特定POST请求路径 = 公开内容请求\n  return isGetMethod || (\n    (isPostsUrl || isBoardsUrl || isRankingUrl || \n    isCommentsUrl || isHomeUrl || isProfileUrl || isStaticUrl)\n  )\n}\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // 检查是否为HTML错误页面（Django错误页面）\n    if (response.data && typeof response.data === 'string' && \n        (response.data.includes('<!DOCTYPE html>') || \n         response.data.includes('ContentNotRenderedError'))) {\n      console.error('响应拦截器检测到HTML错误页面:', {\n        url: response.config.url,\n        method: response.config.method,\n        status: response.status\n      });\n      \n      // 提取错误信息\n      let errorMessage = '服务器错误';\n      if (response.data.includes('ContentNotRenderedError')) {\n        errorMessage = 'Django序列化错误: ContentNotRenderedError';\n        console.error('检测到Django ContentNotRenderedError，这通常是由于响应内容未正确渲染导致的');\n      }\n      \n      // 对于公开内容请求，不显示错误消息\n      const isPublic = isPublicContentRequest(response.config);\n      if (!isPublic) {\n        messageTracker.showMessage(errorMessage, 'error', 'html-error-page');\n      } else {\n        console.log('公开内容请求收到HTML错误页面，不显示错误消息');\n      }\n      \n      // 返回一个标准格式的错误响应，让调用方处理\n      return {\n        code: 500,\n        status: 500,\n        msg: errorMessage,\n        data: null\n      };\n    }\n    \n    // 处理空响应\n    if (!response.data && response.status !== 204) {\n      console.warn('API返回空响应:', {\n        url: response.config.url,\n        method: response.config.method,\n        status: response.status\n      });\n      \n      return {\n        code: 0,\n        status: 0,\n        msg: '',\n        data: null\n      };\n    }\n    \n    // 处理非JSON响应\n    if (response.data && typeof response.data === 'string' && response.headers['content-type'] && \n        !response.headers['content-type'].includes('application/json')) {\n      console.log('非JSON响应:', {\n        url: response.config.url,\n        contentType: response.headers['content-type'],\n        status: response.status\n      });\n      \n      // 返回一个包装好的响应\n      return {\n        code: 0,\n        status: response.status,\n        msg: '',\n        data: response.data\n      };\n    }\n    \n    const res = response.data\n    console.log('响应拦截器收到响应:', res)\n    \n    // 检查是否为帖子创建请求\n    const isCreatePost = response.config.url === '/api/v1/posts/' && \n                        response.config.method.toLowerCase() === 'post';\n    if (isCreatePost) {\n      console.log('检测到帖子创建请求，响应数据:', res);\n      // 如果响应成功但没有返回帖子ID，尝试从响应中提取\n      if ((res.status === 0 || res.code === 0) && res.data) {\n        if (typeof res.data === 'object' && !res.data.id) {\n          // 尝试从响应中提取帖子ID\n          const postId = res.data.post_id || res.data.postId || res.post_id || res.postId;\n          if (postId) {\n            res.data.id = postId;\n          }\n        }\n      }\n    }\n    \n    // 检查是否为公开内容请求\n    const isPublic = isPublicContentRequest(response.config);\n    console.log('是否为公开内容请求:', isPublic);\n    \n    // 检查是否有明确的错误状态\n    if ((res.status !== undefined && res.status !== 0 && res.status !== 200) || \n        (res.code !== undefined && res.code !== 0 && res.code !== 200)) {\n      console.error('API错误响应:', res)\n      \n      // 401错误特殊处理 - 对于公开内容请求，不显示错误消息\n      if ((res.status === 401 || res.code === 401) && isPublic) {\n        console.log('公开内容401错误，不显示错误消息')\n        // 直接返回一个成功的空数据，让调用方继续处理\n        return {\n          code: 0,\n          status: 0,\n          msg: '',\n          data: null\n        }\n      }\n      \n      // 如果是登出操作，即使返回错误也不显示错误消息\n      if (isLogoutOperation(response.config)) {\n        console.log('登出操作返回错误，不显示错误消息')\n        return res\n      }\n      \n      // 如果不应该抑制消息，则显示错误消息\n      if (!shouldSuppressMessage(response.config)) {\n        const errorMsg = res.msg || res.message || '请求失败'\n        messageTracker.showMessage(errorMsg, 'error', 'api-error')\n      }\n      \n      return res\n    }\n    \n    // 检查是否为删除评论操作\n    if (isCommentDeleteOperation(response.config)) {\n      console.log('检测到评论删除操作，不显示成功消息')\n      return res\n    }\n    \n    // 检查是否为帖子操作\n    if (isPostOperation(response.config)) {\n      console.log('检测到帖子操作，不显示成功消息')\n      return res\n    }\n    \n    // 如果有成功消息且不是GET请求，显示成功消息\n    if (res.msg && response.config.method.toLowerCase() !== 'get' && !isPublic) {\n      messageTracker.showMessage(res.msg, 'success', 'api-success')\n    }\n    \n    return res\n  },\n  error => {\n    console.error('请求错误:', error)\n    \n    // 如果请求被取消，不显示错误消息\n    if (axios.isCancel(error)) {\n      console.log('请求被取消')\n      return Promise.reject(error)\n    }\n    \n    // 检查是否为公开内容请求\n    const isPublic = error.config ? isPublicContentRequest(error.config) : false\n    \n    // 如果不是公开内容请求，显示错误消息\n    if (!isPublic && !shouldSuppressMessage(error.config)) {\n      let errorMsg = '网络错误，请检查您的网络连接'\n      \n      if (error.response) {\n        // 服务器返回了错误状态码\n        switch (error.response.status) {\n          case 401:\n            errorMsg = '未授权，请重新登录'\n            // 清除token和用户信息\n            localStorage.removeItem('token')\n            localStorage.removeItem('userInfo')\n            // 跳转到登录页\n            router.push('/login')\n            break\n          case 403:\n            errorMsg = '拒绝访问'\n            break\n          case 404:\n            errorMsg = '请求的资源不存在'\n            break\n          case 500:\n            errorMsg = '服务器错误'\n            break\n          default:\n            errorMsg = `请求失败 (${error.response.status})`\n        }\n      } else if (error.request) {\n        // 请求已发出，但没有收到响应\n        errorMsg = '服务器无响应，请稍后重试'\n      }\n      \n      messageTracker.showMessage(errorMsg, 'error', 'axios-error')\n    }\n    \n    // 返回标准格式的错误对象\n    return {\n      code: -1,\n      status: error.response ? error.response.status : 500,\n      msg: error.message || '未知错误',\n      data: null\n    }\n  }\n)\n\n// 辅助函数：判断是否应该抑制消息\nfunction shouldSuppressMessage(config) {\n  if (!config) return false\n  \n  // 检查是否有自定义标记\n  return config.suppressErrorMessage === true || \n         (config.headers && config.headers['X-Suppress-Message'] === 'true')\n}\n\n// 辅助函数：判断是否为删除评论操作\nfunction isCommentDeleteOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  const isDeleteMethod = config.method.toLowerCase() === 'delete'\n  const isCommentUrl = config.url.includes('/api/v1/comments/')\n  \n  return isDeleteMethod && isCommentUrl\n}\n\n// 辅助函数：判断是否为帖子操作\nfunction isPostOperation(config) {\n  if (!config || !config.url || !config.method) {\n    return false\n  }\n  \n  const isPostMethod = config.method.toLowerCase() === 'post'\n  const isPutMethod = config.method.toLowerCase() === 'put'\n  const isPostUrl = config.url.includes('/api/v1/posts')\n  \n  return (isPostMethod || isPutMethod) && isPostUrl\n}\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}